
32x32_L476.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006378  08006378  00007378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006400  08006400  00008014  2**0
                  CONTENTS
  4 .ARM          00000008  08006400  08006400  00007400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006408  08006408  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006408  08006408  00007408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800640c  0800640c  0000740c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006410  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011f88  20000014  08006424  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00001e04  20011f9c  08006424  00008f9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c6c  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ff0  00000000  00000000  0001acb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  0001dca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e42  00000000  00000000  0001ef28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000287e2  00000000  00000000  0001fd6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165de  00000000  00000000  0004854c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f91c9  00000000  00000000  0005eb2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157cf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c54  00000000  00000000  00157d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0015c98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006360 	.word	0x08006360

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006360 	.word	0x08006360

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <set_pixel>:
 */

#include "32x32.h"

void set_pixel(uint16_t x, uint16_t y, uint8_t r, uint8_t g, uint8_t b)
{
 80001e0:	b490      	push	{r4, r7}
 80001e2:	b088      	sub	sp, #32
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	4604      	mov	r4, r0
 80001e8:	4608      	mov	r0, r1
 80001ea:	4611      	mov	r1, r2
 80001ec:	461a      	mov	r2, r3
 80001ee:	4623      	mov	r3, r4
 80001f0:	80fb      	strh	r3, [r7, #6]
 80001f2:	4603      	mov	r3, r0
 80001f4:	80bb      	strh	r3, [r7, #4]
 80001f6:	460b      	mov	r3, r1
 80001f8:	70fb      	strb	r3, [r7, #3]
 80001fa:	4613      	mov	r3, r2
 80001fc:	70bb      	strb	r3, [r7, #2]
	uint16_t offset = y * 4 * 3;
 80001fe:	88bb      	ldrh	r3, [r7, #4]
 8000200:	461a      	mov	r2, r3
 8000202:	0052      	lsls	r2, r2, #1
 8000204:	4413      	add	r3, r2
 8000206:	009b      	lsls	r3, r3, #2
 8000208:	83fb      	strh	r3, [r7, #30]
	offset += x >> 3;
 800020a:	88fb      	ldrh	r3, [r7, #6]
 800020c:	08db      	lsrs	r3, r3, #3
 800020e:	b29a      	uxth	r2, r3
 8000210:	8bfb      	ldrh	r3, [r7, #30]
 8000212:	4413      	add	r3, r2
 8000214:	83fb      	strh	r3, [r7, #30]
	// shift by the remainder times 4
	uint8_t shift = (x & 0x7u) << 2;
 8000216:	88fb      	ldrh	r3, [r7, #6]
 8000218:	b2db      	uxtb	r3, r3
 800021a:	009b      	lsls	r3, r3, #2
 800021c:	b2db      	uxtb	r3, r3
 800021e:	f003 031c 	and.w	r3, r3, #28
 8000222:	777b      	strb	r3, [r7, #29]
	uint32_t mask = ~(0xFu << shift);
 8000224:	7f7b      	ldrb	r3, [r7, #29]
 8000226:	220f      	movs	r2, #15
 8000228:	fa02 f303 	lsl.w	r3, r2, r3
 800022c:	43db      	mvns	r3, r3
 800022e:	61bb      	str	r3, [r7, #24]
	uint32_t pr = ((uint32_t)(r) & 0xFu) << shift;
 8000230:	78fb      	ldrb	r3, [r7, #3]
 8000232:	f003 020f 	and.w	r2, r3, #15
 8000236:	7f7b      	ldrb	r3, [r7, #29]
 8000238:	fa02 f303 	lsl.w	r3, r2, r3
 800023c:	617b      	str	r3, [r7, #20]
	uint32_t pg = ((uint32_t)(g) & 0xFu) << shift;
 800023e:	78bb      	ldrb	r3, [r7, #2]
 8000240:	f003 020f 	and.w	r2, r3, #15
 8000244:	7f7b      	ldrb	r3, [r7, #29]
 8000246:	fa02 f303 	lsl.w	r3, r2, r3
 800024a:	613b      	str	r3, [r7, #16]
	uint32_t pb = ((uint32_t)(b) & 0xFu) << shift;
 800024c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000250:	f003 020f 	and.w	r2, r3, #15
 8000254:	7f7b      	ldrb	r3, [r7, #29]
 8000256:	fa02 f303 	lsl.w	r3, r2, r3
 800025a:	60fb      	str	r3, [r7, #12]

	image_buffer[offset + 0] = (image_buffer[offset + 0] & mask) | pb;
 800025c:	4b1d      	ldr	r3, [pc, #116]	@ (80002d4 <set_pixel+0xf4>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	8bfb      	ldrh	r3, [r7, #30]
 8000262:	009b      	lsls	r3, r3, #2
 8000264:	4413      	add	r3, r2
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	69bb      	ldr	r3, [r7, #24]
 800026a:	ea02 0103 	and.w	r1, r2, r3
 800026e:	4b19      	ldr	r3, [pc, #100]	@ (80002d4 <set_pixel+0xf4>)
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	8bfb      	ldrh	r3, [r7, #30]
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	4413      	add	r3, r2
 8000278:	68fa      	ldr	r2, [r7, #12]
 800027a:	430a      	orrs	r2, r1
 800027c:	601a      	str	r2, [r3, #0]
	image_buffer[offset + 4] = (image_buffer[offset + 4] & mask) | pg;
 800027e:	4b15      	ldr	r3, [pc, #84]	@ (80002d4 <set_pixel+0xf4>)
 8000280:	681a      	ldr	r2, [r3, #0]
 8000282:	8bfb      	ldrh	r3, [r7, #30]
 8000284:	3304      	adds	r3, #4
 8000286:	009b      	lsls	r3, r3, #2
 8000288:	4413      	add	r3, r2
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	69bb      	ldr	r3, [r7, #24]
 800028e:	ea02 0103 	and.w	r1, r2, r3
 8000292:	4b10      	ldr	r3, [pc, #64]	@ (80002d4 <set_pixel+0xf4>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	8bfb      	ldrh	r3, [r7, #30]
 8000298:	3304      	adds	r3, #4
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	4413      	add	r3, r2
 800029e:	693a      	ldr	r2, [r7, #16]
 80002a0:	430a      	orrs	r2, r1
 80002a2:	601a      	str	r2, [r3, #0]
	image_buffer[offset + 8] = (image_buffer[offset + 8] & mask) | pr;
 80002a4:	4b0b      	ldr	r3, [pc, #44]	@ (80002d4 <set_pixel+0xf4>)
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	8bfb      	ldrh	r3, [r7, #30]
 80002aa:	3308      	adds	r3, #8
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	4413      	add	r3, r2
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	69bb      	ldr	r3, [r7, #24]
 80002b4:	ea02 0103 	and.w	r1, r2, r3
 80002b8:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <set_pixel+0xf4>)
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	8bfb      	ldrh	r3, [r7, #30]
 80002be:	3308      	adds	r3, #8
 80002c0:	009b      	lsls	r3, r3, #2
 80002c2:	4413      	add	r3, r2
 80002c4:	697a      	ldr	r2, [r7, #20]
 80002c6:	430a      	orrs	r2, r1
 80002c8:	601a      	str	r2, [r3, #0]
}
 80002ca:	bf00      	nop
 80002cc:	3720      	adds	r7, #32
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc90      	pop	{r4, r7}
 80002d2:	4770      	bx	lr
 80002d4:	20000384 	.word	0x20000384

080002d8 <clear_led_matrix>:
	image_buffer[offset + 0] = r;
	image_buffer[offset + 4] = g;
	image_buffer[offset + 8] = b;
}

void clear_led_matrix(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af02      	add	r7, sp, #8
	for (uint8_t x = 0; x < MATRIX_WIDTH; x++) {
 80002de:	2300      	movs	r3, #0
 80002e0:	71fb      	strb	r3, [r7, #7]
 80002e2:	e025      	b.n	8000330 <clear_led_matrix+0x58>
		for (uint8_t y = 0; y < MATRIX_HEIGHT; y++) {
 80002e4:	2300      	movs	r3, #0
 80002e6:	71bb      	strb	r3, [r7, #6]
 80002e8:	e01c      	b.n	8000324 <clear_led_matrix+0x4c>
			image_buffer = backbuffer[0];
 80002ea:	4b15      	ldr	r3, [pc, #84]	@ (8000340 <clear_led_matrix+0x68>)
 80002ec:	4a15      	ldr	r2, [pc, #84]	@ (8000344 <clear_led_matrix+0x6c>)
 80002ee:	601a      	str	r2, [r3, #0]
			set_pixel(x,y, 0, 0, 0);
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	b298      	uxth	r0, r3
 80002f4:	79bb      	ldrb	r3, [r7, #6]
 80002f6:	b299      	uxth	r1, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	2300      	movs	r3, #0
 80002fe:	2200      	movs	r2, #0
 8000300:	f7ff ff6e 	bl	80001e0 <set_pixel>
			image_buffer = backbuffer[1];
 8000304:	4b0e      	ldr	r3, [pc, #56]	@ (8000340 <clear_led_matrix+0x68>)
 8000306:	4a10      	ldr	r2, [pc, #64]	@ (8000348 <clear_led_matrix+0x70>)
 8000308:	601a      	str	r2, [r3, #0]
			set_pixel(x,y, 0, 0, 0);
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	b298      	uxth	r0, r3
 800030e:	79bb      	ldrb	r3, [r7, #6]
 8000310:	b299      	uxth	r1, r3
 8000312:	2300      	movs	r3, #0
 8000314:	9300      	str	r3, [sp, #0]
 8000316:	2300      	movs	r3, #0
 8000318:	2200      	movs	r2, #0
 800031a:	f7ff ff61 	bl	80001e0 <set_pixel>
		for (uint8_t y = 0; y < MATRIX_HEIGHT; y++) {
 800031e:	79bb      	ldrb	r3, [r7, #6]
 8000320:	3301      	adds	r3, #1
 8000322:	71bb      	strb	r3, [r7, #6]
 8000324:	79bb      	ldrb	r3, [r7, #6]
 8000326:	2b1f      	cmp	r3, #31
 8000328:	d9df      	bls.n	80002ea <clear_led_matrix+0x12>
	for (uint8_t x = 0; x < MATRIX_WIDTH; x++) {
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	3301      	adds	r3, #1
 800032e:	71fb      	strb	r3, [r7, #7]
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	2b1f      	cmp	r3, #31
 8000334:	d9d6      	bls.n	80002e4 <clear_led_matrix+0xc>
		}
	}
}
 8000336:	bf00      	nop
 8000338:	bf00      	nop
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	20000384 	.word	0x20000384
 8000344:	20000388 	.word	0x20000388
 8000348:	20000988 	.word	0x20000988

0800034c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	4a07      	ldr	r2, [pc, #28]	@ (8000378 <vApplicationGetIdleTaskMemory+0x2c>)
 800035c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	4a06      	ldr	r2, [pc, #24]	@ (800037c <vApplicationGetIdleTaskMemory+0x30>)
 8000362:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2280      	movs	r2, #128	@ 0x80
 8000368:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800036a:	bf00      	nop
 800036c:	3714      	adds	r7, #20
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	20000030 	.word	0x20000030
 800037c:	20000084 	.word	0x20000084

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b5b0      	push	{r4, r5, r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000386:	f000 ff42 	bl	800120e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800038a:	f000 f8ef 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038e:	f000 f9e5 	bl	800075c <MX_GPIO_Init>
  MX_DMA_Init();
 8000392:	f000 f9c5 	bl	8000720 <MX_DMA_Init>
  MX_SPI1_Init();
 8000396:	f000 f93d 	bl	8000614 <MX_SPI1_Init>
  MX_TIM3_Init();
 800039a:	f000 f973 	bl	8000684 <MX_TIM3_Init>
  UserButton_Init();
 800039e:	f000 fed5 	bl	800114c <UserButton_Init>
  UART_Init();
 80003a2:	f000 fe05 	bl	8000fb0 <UART_Init>

  UART_Reset_Terminal();
 80003a6:	f000 fea5 	bl	80010f4 <UART_Reset_Terminal>


//  Onboard_LED_Init();  /* USER CODE BEGIN 2 */

      image_buffer = backbuffer[backbuffer_index];
 80003aa:	4b63      	ldr	r3, [pc, #396]	@ (8000538 <main+0x1b8>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	461a      	mov	r2, r3
 80003b2:	4613      	mov	r3, r2
 80003b4:	005b      	lsls	r3, r3, #1
 80003b6:	4413      	add	r3, r2
 80003b8:	025b      	lsls	r3, r3, #9
 80003ba:	4a60      	ldr	r2, [pc, #384]	@ (800053c <main+0x1bc>)
 80003bc:	4413      	add	r3, r2
 80003be:	4a60      	ldr	r2, [pc, #384]	@ (8000540 <main+0x1c0>)
 80003c0:	6013      	str	r3, [r2, #0]
      int curr_i = 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60fb      	str	r3, [r7, #12]
  #ifdef TEST_PATTERN
    for(int y=0;y<32;++y) {
 80003c6:	2300      	movs	r3, #0
 80003c8:	60bb      	str	r3, [r7, #8]
 80003ca:	e071      	b.n	80004b0 <main+0x130>
  	  for(int x=0;x<32;++x)
 80003cc:	2300      	movs	r3, #0
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	e068      	b.n	80004a4 <main+0x124>
  	  {
  		  // layout: b - g - r
  		  image_buffer = backbuffer[0];
 80003d2:	4b5b      	ldr	r3, [pc, #364]	@ (8000540 <main+0x1c0>)
 80003d4:	4a59      	ldr	r2, [pc, #356]	@ (800053c <main+0x1bc>)
 80003d6:	601a      	str	r2, [r3, #0]
  		  set_pixel(x,y, x/2, y/2, (63-(x+y))/4);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	b298      	uxth	r0, r3
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	b299      	uxth	r1, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	0fda      	lsrs	r2, r3, #31
 80003e4:	4413      	add	r3, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	b2dc      	uxtb	r4, r3
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	0fda      	lsrs	r2, r3, #31
 80003ee:	4413      	add	r3, r2
 80003f0:	105b      	asrs	r3, r3, #1
 80003f2:	b2dd      	uxtb	r5, r3
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	4413      	add	r3, r2
 80003fa:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 80003fe:	2b00      	cmp	r3, #0
 8000400:	da00      	bge.n	8000404 <main+0x84>
 8000402:	3303      	adds	r3, #3
 8000404:	109b      	asrs	r3, r3, #2
 8000406:	b2db      	uxtb	r3, r3
 8000408:	9300      	str	r3, [sp, #0]
 800040a:	462b      	mov	r3, r5
 800040c:	4622      	mov	r2, r4
 800040e:	f7ff fee7 	bl	80001e0 <set_pixel>

  		  image_buffer = backbuffer[1];
 8000412:	4b4b      	ldr	r3, [pc, #300]	@ (8000540 <main+0x1c0>)
 8000414:	4a4b      	ldr	r2, [pc, #300]	@ (8000544 <main+0x1c4>)
 8000416:	601a      	str	r2, [r3, #0]
  		  set_pixel(x,y, x/2, y/2, (63-(x+y))/4);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	b298      	uxth	r0, r3
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	b299      	uxth	r1, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	0fda      	lsrs	r2, r3, #31
 8000424:	4413      	add	r3, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	b2dc      	uxtb	r4, r3
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	0fda      	lsrs	r2, r3, #31
 800042e:	4413      	add	r3, r2
 8000430:	105b      	asrs	r3, r3, #1
 8000432:	b2dd      	uxtb	r5, r3
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	4413      	add	r3, r2
 800043a:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800043e:	2b00      	cmp	r3, #0
 8000440:	da00      	bge.n	8000444 <main+0xc4>
 8000442:	3303      	adds	r3, #3
 8000444:	109b      	asrs	r3, r3, #2
 8000446:	b2db      	uxtb	r3, r3
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	462b      	mov	r3, r5
 800044c:	4622      	mov	r2, r4
 800044e:	f7ff fec7 	bl	80001e0 <set_pixel>

  		  curr_image_data[curr_i] = x/2;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	0fda      	lsrs	r2, r3, #31
 8000456:	4413      	add	r3, r2
 8000458:	105b      	asrs	r3, r3, #1
 800045a:	b2d9      	uxtb	r1, r3
 800045c:	4a3a      	ldr	r2, [pc, #232]	@ (8000548 <main+0x1c8>)
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	4413      	add	r3, r2
 8000462:	460a      	mov	r2, r1
 8000464:	701a      	strb	r2, [r3, #0]
  		  curr_image_data[curr_i+1] = y/2;
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	0fda      	lsrs	r2, r3, #31
 800046a:	4413      	add	r3, r2
 800046c:	105b      	asrs	r3, r3, #1
 800046e:	461a      	mov	r2, r3
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	3301      	adds	r3, #1
 8000474:	b2d1      	uxtb	r1, r2
 8000476:	4a34      	ldr	r2, [pc, #208]	@ (8000548 <main+0x1c8>)
 8000478:	54d1      	strb	r1, [r2, r3]
  		  curr_image_data[curr_i+2] = (63-(x+y))/4;
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	4413      	add	r3, r2
 8000480:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <main+0x10a>
 8000488:	3303      	adds	r3, #3
 800048a:	109b      	asrs	r3, r3, #2
 800048c:	461a      	mov	r2, r3
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	3302      	adds	r3, #2
 8000492:	b2d1      	uxtb	r1, r2
 8000494:	4a2c      	ldr	r2, [pc, #176]	@ (8000548 <main+0x1c8>)
 8000496:	54d1      	strb	r1, [r2, r3]

  		  curr_i += 3;
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	3303      	adds	r3, #3
 800049c:	60fb      	str	r3, [r7, #12]
  	  for(int x=0;x<32;++x)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	3301      	adds	r3, #1
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2b1f      	cmp	r3, #31
 80004a8:	dd93      	ble.n	80003d2 <main+0x52>
    for(int y=0;y<32;++y) {
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	3301      	adds	r3, #1
 80004ae:	60bb      	str	r3, [r7, #8]
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	2b1f      	cmp	r3, #31
 80004b4:	dd8a      	ble.n	80003cc <main+0x4c>

  	  }
    }
  #endif

    xVsyncSemaphore = xSemaphoreCreateBinary();
 80004b6:	2203      	movs	r2, #3
 80004b8:	2100      	movs	r1, #0
 80004ba:	2001      	movs	r0, #1
 80004bc:	f004 f9ba 	bl	8004834 <xQueueGenericCreate>
 80004c0:	4603      	mov	r3, r0
 80004c2:	4a22      	ldr	r2, [pc, #136]	@ (800054c <main+0x1cc>)
 80004c4:	6013      	str	r3, [r2, #0]
    xFrameReadySemaphore = xSemaphoreCreateBinary();
 80004c6:	2203      	movs	r2, #3
 80004c8:	2100      	movs	r1, #0
 80004ca:	2001      	movs	r0, #1
 80004cc:	f004 f9b2 	bl	8004834 <xQueueGenericCreate>
 80004d0:	4603      	mov	r3, r0
 80004d2:	4a1f      	ldr	r2, [pc, #124]	@ (8000550 <main+0x1d0>)
 80004d4:	6013      	str	r3, [r2, #0]

    if (xFrameReadySemaphore == NULL) {
 80004d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000550 <main+0x1d0>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d101      	bne.n	80004e2 <main+0x162>
        while(1);
 80004de:	bf00      	nop
 80004e0:	e7fd      	b.n	80004de <main+0x15e>
    }

    if (xVsyncSemaphore == NULL) {
 80004e2:	4b1a      	ldr	r3, [pc, #104]	@ (800054c <main+0x1cc>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d101      	bne.n	80004ee <main+0x16e>
		while(1);
 80004ea:	bf00      	nop
 80004ec:	e7fd      	b.n	80004ea <main+0x16a>
    }


  // Create tasks
    retVal = xTaskCreate(WriteLEDTask, "WriteLEDTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, &WriteLEDTaskHandler);
 80004ee:	4b19      	ldr	r3, [pc, #100]	@ (8000554 <main+0x1d4>)
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2301      	movs	r3, #1
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	2300      	movs	r3, #0
 80004f8:	2280      	movs	r2, #128	@ 0x80
 80004fa:	4917      	ldr	r1, [pc, #92]	@ (8000558 <main+0x1d8>)
 80004fc:	4817      	ldr	r0, [pc, #92]	@ (800055c <main+0x1dc>)
 80004fe:	f004 fdf7 	bl	80050f0 <xTaskCreate>
 8000502:	6038      	str	r0, [r7, #0]
    if (retVal != pdPASS) { while(1);}	// check if task creation failed
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d001      	beq.n	800050e <main+0x18e>
 800050a:	bf00      	nop
 800050c:	e7fd      	b.n	800050a <main+0x18a>

    retVal = xTaskCreate(vSyncTask, "vSyncTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, &vSyncTaskHandler);
 800050e:	4b14      	ldr	r3, [pc, #80]	@ (8000560 <main+0x1e0>)
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	2300      	movs	r3, #0
 8000518:	2280      	movs	r2, #128	@ 0x80
 800051a:	4912      	ldr	r1, [pc, #72]	@ (8000564 <main+0x1e4>)
 800051c:	4812      	ldr	r0, [pc, #72]	@ (8000568 <main+0x1e8>)
 800051e:	f004 fde7 	bl	80050f0 <xTaskCreate>
 8000522:	6038      	str	r0, [r7, #0]
    if (retVal != pdPASS) { while(1);}	// check if task creation failed
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d001      	beq.n	800052e <main+0x1ae>
 800052a:	bf00      	nop
 800052c:	e7fd      	b.n	800052a <main+0x1aa>

  /* Start scheduler */
//  osKernelStart();
  vTaskStartScheduler();
 800052e:	f004 ff17 	bl	8005360 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000532:	bf00      	nop
 8000534:	e7fd      	b.n	8000532 <main+0x1b2>
 8000536:	bf00      	nop
 8000538:	20000f88 	.word	0x20000f88
 800053c:	20000388 	.word	0x20000388
 8000540:	20000384 	.word	0x20000384
 8000544:	20000988 	.word	0x20000988
 8000548:	20002794 	.word	0x20002794
 800054c:	20000f8c 	.word	0x20000f8c
 8000550:	20000f90 	.word	0x20000f90
 8000554:	2000037c 	.word	0x2000037c
 8000558:	08006378 	.word	0x08006378
 800055c:	08000949 	.word	0x08000949
 8000560:	20000380 	.word	0x20000380
 8000564:	08006388 	.word	0x08006388
 8000568:	08000b7d 	.word	0x08000b7d

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b096      	sub	sp, #88	@ 0x58
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2244      	movs	r2, #68	@ 0x44
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f005 feb6 	bl	80062ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800058e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000592:	f001 fbe9 	bl	8001d68 <HAL_PWREx_ControlVoltageScaling>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800059c:	f000 fc04 	bl	8000da8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005a0:	2310      	movs	r3, #16
 80005a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005ac:	2360      	movs	r3, #96	@ 0x60
 80005ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005b4:	2301      	movs	r3, #1
 80005b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005b8:	2301      	movs	r3, #1
 80005ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 80005bc:	2320      	movs	r3, #32
 80005be:	64bb      	str	r3, [r7, #72]	@ 0x48
//  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLP = 0x4U;
 80005c0:	2304      	movs	r3, #4
 80005c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 fc1f 	bl	8001e14 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005dc:	f000 fbe4 	bl	8000da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	2303      	movs	r3, #3
 80005e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	2103      	movs	r1, #3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 ffe6 	bl	80025cc <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000606:	f000 fbcf 	bl	8000da8 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3758      	adds	r7, #88	@ 0x58
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000618:	4b18      	ldr	r3, [pc, #96]	@ (800067c <MX_SPI1_Init+0x68>)
 800061a:	4a19      	ldr	r2, [pc, #100]	@ (8000680 <MX_SPI1_Init+0x6c>)
 800061c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800061e:	4b17      	ldr	r3, [pc, #92]	@ (800067c <MX_SPI1_Init+0x68>)
 8000620:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000624:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000626:	4b15      	ldr	r3, [pc, #84]	@ (800067c <MX_SPI1_Init+0x68>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800062c:	4b13      	ldr	r3, [pc, #76]	@ (800067c <MX_SPI1_Init+0x68>)
 800062e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000632:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000634:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_SPI1_Init+0x68>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800063a:	4b10      	ldr	r3, [pc, #64]	@ (800067c <MX_SPI1_Init+0x68>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000640:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_SPI1_Init+0x68>)
 8000642:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000646:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000648:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <MX_SPI1_Init+0x68>)
 800064a:	2208      	movs	r2, #8
 800064c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800064e:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <MX_SPI1_Init+0x68>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000654:	4b09      	ldr	r3, [pc, #36]	@ (800067c <MX_SPI1_Init+0x68>)
 8000656:	2200      	movs	r2, #0
 8000658:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800065a:	4b08      	ldr	r3, [pc, #32]	@ (800067c <MX_SPI1_Init+0x68>)
 800065c:	2200      	movs	r2, #0
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000660:	4b06      	ldr	r3, [pc, #24]	@ (800067c <MX_SPI1_Init+0x68>)
 8000662:	220a      	movs	r2, #10
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
//  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
//  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <MX_SPI1_Init+0x68>)
 8000668:	f002 f99c 	bl	80029a4 <HAL_SPI_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000672:	f000 fb99 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000284 	.word	0x20000284
 8000680:	40013000 	.word	0x40013000

08000684 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068a:	f107 0310 	add.w	r3, r7, #16
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <MX_TIM3_Init+0x94>)
 80006a4:	4a1d      	ldr	r2, [pc, #116]	@ (800071c <MX_TIM3_Init+0x98>)
 80006a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000718 <MX_TIM3_Init+0x94>)
 80006aa:	221f      	movs	r2, #31
 80006ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <MX_TIM3_Init+0x94>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 129; // 129
 80006b4:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <MX_TIM3_Init+0x94>)
 80006b6:	2281      	movs	r2, #129	@ 0x81
 80006b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ba:	4b17      	ldr	r3, [pc, #92]	@ (8000718 <MX_TIM3_Init+0x94>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c0:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <MX_TIM3_Init+0x94>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006c6:	4814      	ldr	r0, [pc, #80]	@ (8000718 <MX_TIM3_Init+0x94>)
 80006c8:	f002 fe02 	bl	80032d0 <HAL_TIM_Base_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80006d2:	f000 fb69 	bl	8000da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	4619      	mov	r1, r3
 80006e2:	480d      	ldr	r0, [pc, #52]	@ (8000718 <MX_TIM3_Init+0x94>)
 80006e4:	f002 ffbe 	bl	8003664 <HAL_TIM_ConfigClockSource>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80006ee:	f000 fb5b 	bl	8000da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	4806      	ldr	r0, [pc, #24]	@ (8000718 <MX_TIM3_Init+0x94>)
 8000700:	f003 f9d6 	bl	8003ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800070a:	f000 fb4d 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	3720      	adds	r7, #32
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000330 	.word	0x20000330
 800071c:	40000400 	.word	0x40000400

08000720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000726:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_DMA_Init+0x38>)
 8000728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800072a:	4a0b      	ldr	r2, [pc, #44]	@ (8000758 <MX_DMA_Init+0x38>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6493      	str	r3, [r2, #72]	@ 0x48
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_DMA_Init+0x38>)
 8000734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2105      	movs	r1, #5
 8000742:	203b      	movs	r0, #59	@ 0x3b
 8000744:	f000 fec3 	bl	80014ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000748:	203b      	movs	r0, #59	@ 0x3b
 800074a:	f000 fedc 	bl	8001506 <HAL_NVIC_EnableIRQ>

}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b27      	ldr	r3, [pc, #156]	@ (8000810 <MX_GPIO_Init+0xb4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	4a26      	ldr	r2, [pc, #152]	@ (8000810 <MX_GPIO_Init+0xb4>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077e:	4b24      	ldr	r3, [pc, #144]	@ (8000810 <MX_GPIO_Init+0xb4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b21      	ldr	r3, [pc, #132]	@ (8000810 <MX_GPIO_Init+0xb4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	4a20      	ldr	r2, [pc, #128]	@ (8000810 <MX_GPIO_Init+0xb4>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000796:	4b1e      	ldr	r3, [pc, #120]	@ (8000810 <MX_GPIO_Init+0xb4>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <MX_GPIO_Init+0xb4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	4a1a      	ldr	r2, [pc, #104]	@ (8000810 <MX_GPIO_Init+0xb4>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ae:	4b18      	ldr	r3, [pc, #96]	@ (8000810 <MX_GPIO_Init+0xb4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D_A_Pin|D_B_Pin|D_C_Pin|D_D_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	210f      	movs	r1, #15
 80007be:	4815      	ldr	r0, [pc, #84]	@ (8000814 <MX_GPIO_Init+0xb8>)
 80007c0:	f001 faac 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_OE_Pin|D_STB_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2103      	movs	r1, #3
 80007c8:	4813      	ldr	r0, [pc, #76]	@ (8000818 <MX_GPIO_Init+0xbc>)
 80007ca:	f001 faa7 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D_A_Pin D_B_Pin D_C_Pin D_D_Pin */
  GPIO_InitStruct.Pin = D_A_Pin|D_B_Pin|D_C_Pin|D_D_Pin;
 80007ce:	230f      	movs	r3, #15
 80007d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	4619      	mov	r1, r3
 80007e4:	480b      	ldr	r0, [pc, #44]	@ (8000814 <MX_GPIO_Init+0xb8>)
 80007e6:	f001 f8ef 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_OE_Pin D_STB_Pin */
  GPIO_InitStruct.Pin = D_OE_Pin|D_STB_Pin;
 80007ea:	2303      	movs	r3, #3
 80007ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	4619      	mov	r1, r3
 8000800:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_GPIO_Init+0xbc>)
 8000802:	f001 f8e1 	bl	80019c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000806:	bf00      	nop
 8000808:	3720      	adds	r7, #32
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000
 8000814:	48000800 	.word	0x48000800
 8000818:	48000400 	.word	0x48000400

0800081c <HAL_SPI_TxCpltCallback>:
static volatile uint8_t transfer_pending = 0;
static volatile uint16_t spi_transmit_line = 0;


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	if(hspi == &hspi1)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <HAL_SPI_TxCpltCallback+0x54>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d11b      	bne.n	8000864 <HAL_SPI_TxCpltCallback+0x48>
	{
		// drive OE high
		GPIOB->BSRR = GPIO_PIN_0;
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <HAL_SPI_TxCpltCallback+0x58>)
 800082e:	2201      	movs	r2, #1
 8000830:	619a      	str	r2, [r3, #24]

		GPIOC->ODR = spi_transmit_line & 0xF;
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <HAL_SPI_TxCpltCallback+0x5c>)
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	b29b      	uxth	r3, r3
 8000838:	4a10      	ldr	r2, [pc, #64]	@ (800087c <HAL_SPI_TxCpltCallback+0x60>)
 800083a:	f003 030f 	and.w	r3, r3, #15
 800083e:	6153      	str	r3, [r2, #20]
		// latch data in
		GPIOB->BSRR = GPIO_PIN_1;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <HAL_SPI_TxCpltCallback+0x58>)
 8000842:	2202      	movs	r2, #2
 8000844:	619a      	str	r2, [r3, #24]

		// give the IOs some time to settle
		__asm volatile (
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	bf00      	nop
 800084c:	bf00      	nop
				" nop	\n"
				" nop	\n"
				);

		// disable latches
		GPIOB->BSRR = GPIO_PIN_1 << 16;
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <HAL_SPI_TxCpltCallback+0x58>)
 8000850:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000854:	619a      	str	r2, [r3, #24]

		// drive OE low
		GPIOB->BSRR = GPIO_PIN_0 << 16;
 8000856:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <HAL_SPI_TxCpltCallback+0x58>)
 8000858:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800085c:	619a      	str	r2, [r3, #24]

		transfer_pending = 0;
 800085e:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <HAL_SPI_TxCpltCallback+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]

//		vTaskDelay(1000 / portTICK_PERIOD_MS);
	}
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	20000284 	.word	0x20000284
 8000874:	48000400 	.word	0x48000400
 8000878:	200033d2 	.word	0x200033d2
 800087c:	48000800 	.word	0x48000800
 8000880:	200033d0 	.word	0x200033d0

08000884 <bitline>:

uint32_t bitline(const uint32_t *image_data, const uint8_t bam_pattern)
{
 8000884:	b480      	push	{r7}
 8000886:	b089      	sub	sp, #36	@ 0x24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	70fb      	strb	r3, [r7, #3]
	uint32_t v = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
	const uint32_t bam_pattern32 = (uint32_t)bam_pattern;
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0;i<4;++i)
 8000898:	2300      	movs	r3, #0
 800089a:	76fb      	strb	r3, [r7, #27]
 800089c:	e021      	b.n	80008e2 <bitline+0x5e>
	{
		const uint32_t id = *image_data++;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	1d1a      	adds	r2, r3, #4
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	60bb      	str	r3, [r7, #8]
		uint32_t bam_shifter = bam_pattern32;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	617b      	str	r3, [r7, #20]
		for(uint8_t j=0;j<8;++j)
 80008ac:	2300      	movs	r3, #0
 80008ae:	74fb      	strb	r3, [r7, #19]
 80008b0:	e011      	b.n	80008d6 <bitline+0x52>
		{
			v <<= 1;
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	61fb      	str	r3, [r7, #28]
			if((id & bam_shifter)>0)
 80008b8:	68ba      	ldr	r2, [r7, #8]
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	4013      	ands	r3, r2
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d003      	beq.n	80008ca <bitline+0x46>
				v |= 0x1u;
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
			bam_shifter <<= 4;
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	011b      	lsls	r3, r3, #4
 80008ce:	617b      	str	r3, [r7, #20]
		for(uint8_t j=0;j<8;++j)
 80008d0:	7cfb      	ldrb	r3, [r7, #19]
 80008d2:	3301      	adds	r3, #1
 80008d4:	74fb      	strb	r3, [r7, #19]
 80008d6:	7cfb      	ldrb	r3, [r7, #19]
 80008d8:	2b07      	cmp	r3, #7
 80008da:	d9ea      	bls.n	80008b2 <bitline+0x2e>
	for(uint8_t i=0;i<4;++i)
 80008dc:	7efb      	ldrb	r3, [r7, #27]
 80008de:	3301      	adds	r3, #1
 80008e0:	76fb      	strb	r3, [r7, #27]
 80008e2:	7efb      	ldrb	r3, [r7, #27]
 80008e4:	2b03      	cmp	r3, #3
 80008e6:	d9da      	bls.n	800089e <bitline+0x1a>
		}
	}

	return v;
 80008e8:	69fb      	ldr	r3, [r7, #28]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3724      	adds	r7, #36	@ 0x24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
	...

080008f8 <HAL_TIM_PeriodElapsedCallback>:

uint8_t isr_continue_flag = 0;
uint8_t task_continue_flag = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a0e      	ldr	r2, [pc, #56]	@ (800093c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d114      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
		vTaskNotifyGiveFromISR(WriteLEDTaskHandler, &xHigherPriorityTaskWoken);
 800090c:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f107 020c 	add.w	r2, r7, #12
 8000914:	4611      	mov	r1, r2
 8000916:	4618      	mov	r0, r3
 8000918:	f005 fbee 	bl	80060f8 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d007      	beq.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x3a>
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000924:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	f3bf 8f4f 	dsb	sy
 800092e:	f3bf 8f6f 	isb	sy
	}
}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000330 	.word	0x20000330
 8000940:	2000037c 	.word	0x2000037c
 8000944:	e000ed04 	.word	0xe000ed04

08000948 <WriteLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

void WriteLEDTask(void * argument) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b08e      	sub	sp, #56	@ 0x38
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	for(;;) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);		// wait for notification from HAL_TIM_PeriodElapsedCallback
 8000950:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000954:	2001      	movs	r0, #1
 8000956:	f005 fb87 	bl	8006068 <ulTaskNotifyTake>
		if ( !transfer_pending )
 800095a:	4b7b      	ldr	r3, [pc, #492]	@ (8000b48 <WriteLEDTask+0x200>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d1f5      	bne.n	8000950 <WriteLEDTask+0x8>
				{
					transfer_pending = 1;
 8000964:	4b78      	ldr	r3, [pc, #480]	@ (8000b48 <WriteLEDTask+0x200>)
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]

					// dispatch SPI transfer in the background
					spi_transmit_line = line;
 800096a:	4b78      	ldr	r3, [pc, #480]	@ (8000b4c <WriteLEDTask+0x204>)
 800096c:	881a      	ldrh	r2, [r3, #0]
 800096e:	4b78      	ldr	r3, [pc, #480]	@ (8000b50 <WriteLEDTask+0x208>)
 8000970:	801a      	strh	r2, [r3, #0]
					HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)&linedata[cur_linedata][0], sizeof(uint32_t)*6);
 8000972:	4b78      	ldr	r3, [pc, #480]	@ (8000b54 <WriteLEDTask+0x20c>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	4613      	mov	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4413      	add	r3, r2
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	4a75      	ldr	r2, [pc, #468]	@ (8000b58 <WriteLEDTask+0x210>)
 8000982:	4413      	add	r3, r2
 8000984:	2218      	movs	r2, #24
 8000986:	4619      	mov	r1, r3
 8000988:	4874      	ldr	r0, [pc, #464]	@ (8000b5c <WriteLEDTask+0x214>)
 800098a:	f002 f8af 	bl	8002aec <HAL_SPI_Transmit_DMA>

					++line;
 800098e:	4b6f      	ldr	r3, [pc, #444]	@ (8000b4c <WriteLEDTask+0x204>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	3301      	adds	r3, #1
 8000994:	b29a      	uxth	r2, r3
 8000996:	4b6d      	ldr	r3, [pc, #436]	@ (8000b4c <WriteLEDTask+0x204>)
 8000998:	801a      	strh	r2, [r3, #0]

					// we only have 15 slots
					if(line>0xF) {
 800099a:	4b6c      	ldr	r3, [pc, #432]	@ (8000b4c <WriteLEDTask+0x204>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d909      	bls.n	80009b6 <WriteLEDTask+0x6e>
						line = 0;
 80009a2:	4b6a      	ldr	r3, [pc, #424]	@ (8000b4c <WriteLEDTask+0x204>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	801a      	strh	r2, [r3, #0]
						++scan;
 80009a8:	4b6d      	ldr	r3, [pc, #436]	@ (8000b60 <WriteLEDTask+0x218>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b6b      	ldr	r3, [pc, #428]	@ (8000b60 <WriteLEDTask+0x218>)
 80009b4:	701a      	strb	r2, [r3, #0]
					}
					//  times oversampling
					if(scan>SCAN_RATE) {
 80009b6:	4b6a      	ldr	r3, [pc, #424]	@ (8000b60 <WriteLEDTask+0x218>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b07      	cmp	r3, #7
 80009be:	d928      	bls.n	8000a12 <WriteLEDTask+0xca>
						scan = 0;
 80009c0:	4b67      	ldr	r3, [pc, #412]	@ (8000b60 <WriteLEDTask+0x218>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
						++frame;
 80009c6:	4b67      	ldr	r3, [pc, #412]	@ (8000b64 <WriteLEDTask+0x21c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	3301      	adds	r3, #1
 80009cc:	4a65      	ldr	r2, [pc, #404]	@ (8000b64 <WriteLEDTask+0x21c>)
 80009ce:	6013      	str	r3, [r2, #0]

						if(xFrameReadySemaphore != NULL)
 80009d0:	4b65      	ldr	r3, [pc, #404]	@ (8000b68 <WriteLEDTask+0x220>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d010      	beq.n	80009fa <WriteLEDTask+0xb2>
						{
							if (xSemaphoreTake(xFrameReadySemaphore, 0) == pdTRUE)
 80009d8:	4b63      	ldr	r3, [pc, #396]	@ (8000b68 <WriteLEDTask+0x220>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f004 f914 	bl	8004c0c <xQueueSemaphoreTake>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d107      	bne.n	80009fa <WriteLEDTask+0xb2>
							{
								backbuffer_index ^= 1;
 80009ea:	4b60      	ldr	r3, [pc, #384]	@ (8000b6c <WriteLEDTask+0x224>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	f083 0301 	eor.w	r3, r3, #1
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4b5d      	ldr	r3, [pc, #372]	@ (8000b6c <WriteLEDTask+0x224>)
 80009f8:	701a      	strb	r2, [r3, #0]
							}
						}

						// trigger vSync
						if(xVsyncSemaphore != NULL)
 80009fa:	4b5d      	ldr	r3, [pc, #372]	@ (8000b70 <WriteLEDTask+0x228>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d007      	beq.n	8000a12 <WriteLEDTask+0xca>
						{
							signed portBASE_TYPE highPrioWoven;
							xSemaphoreGiveFromISR(xVsyncSemaphore, &highPrioWoven);
 8000a02:	4b5b      	ldr	r3, [pc, #364]	@ (8000b70 <WriteLEDTask+0x228>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f107 0208 	add.w	r2, r7, #8
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f004 f86d 	bl	8004aec <xQueueGiveFromISR>
						}
					}

					// switch to other buffer to populate SPI data
					cur_linedata ^= 1;
 8000a12:	4b50      	ldr	r3, [pc, #320]	@ (8000b54 <WriteLEDTask+0x20c>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	f083 0301 	eor.w	r3, r3, #1
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	4b4d      	ldr	r3, [pc, #308]	@ (8000b54 <WriteLEDTask+0x20c>)
 8000a1e:	701a      	strb	r2, [r3, #0]
					/* prepare next line */
					uint32_t *ld = &(linedata[cur_linedata][0]);
 8000a20:	4b4c      	ldr	r3, [pc, #304]	@ (8000b54 <WriteLEDTask+0x20c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4613      	mov	r3, r2
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	4413      	add	r3, r2
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	4a4a      	ldr	r2, [pc, #296]	@ (8000b58 <WriteLEDTask+0x210>)
 8000a30:	4413      	add	r3, r2
 8000a32:	637b      	str	r3, [r7, #52]	@ 0x34

					const uint32_t *display_buffer = &backbuffer[backbuffer_index^1][0];
 8000a34:	4b4d      	ldr	r3, [pc, #308]	@ (8000b6c <WriteLEDTask+0x224>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	f083 0301 	eor.w	r3, r3, #1
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	461a      	mov	r2, r3
 8000a42:	4613      	mov	r3, r2
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	4413      	add	r3, r2
 8000a48:	025b      	lsls	r3, r3, #9
 8000a4a:	4a4a      	ldr	r2, [pc, #296]	@ (8000b74 <WriteLEDTask+0x22c>)
 8000a4c:	4413      	add	r3, r2
 8000a4e:	633b      	str	r3, [r7, #48]	@ 0x30
					const uint32_t *lp_top = display_buffer + line*4*3;
 8000a50:	4b3e      	ldr	r3, [pc, #248]	@ (8000b4c <WriteLEDTask+0x204>)
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4613      	mov	r3, r2
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4413      	add	r3, r2
 8000a5c:	011b      	lsls	r3, r3, #4
 8000a5e:	461a      	mov	r2, r3
 8000a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a62:	4413      	add	r3, r2
 8000a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
					const uint32_t *lp_bottom = display_buffer + line*4*3 + 16*4*3;
 8000a66:	4b39      	ldr	r3, [pc, #228]	@ (8000b4c <WriteLEDTask+0x204>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4413      	add	r3, r2
 8000a72:	011b      	lsls	r3, r3, #4
 8000a74:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a7a:	4413      	add	r3, r2
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
					const uint8_t bam_pattern = bit_angle_modulation_lookup[scan];
 8000a7e:	4b38      	ldr	r3, [pc, #224]	@ (8000b60 <WriteLEDTask+0x218>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b3c      	ldr	r3, [pc, #240]	@ (8000b78 <WriteLEDTask+0x230>)
 8000a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

					*ld++ = __REV(bitline(lp_bottom, bam_pattern));
 8000a90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a94:	4619      	mov	r1, r3
 8000a96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a98:	f7ff fef4 	bl	8000884 <bitline>
 8000a9c:	4601      	mov	r1, r0
 8000a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aa0:	1d1a      	adds	r2, r3, #4
 8000aa2:	637a      	str	r2, [r7, #52]	@ 0x34
 8000aa4:	60f9      	str	r1, [r7, #12]
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	ba12      	rev	r2, r2
 8000aaa:	601a      	str	r2, [r3, #0]
					*ld++ = __REV(bitline(lp_bottom+4, bam_pattern));
 8000aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aae:	3310      	adds	r3, #16
 8000ab0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fee4 	bl	8000884 <bitline>
 8000abc:	4601      	mov	r1, r0
 8000abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ac0:	1d1a      	adds	r2, r3, #4
 8000ac2:	637a      	str	r2, [r7, #52]	@ 0x34
 8000ac4:	6139      	str	r1, [r7, #16]
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	ba12      	rev	r2, r2
 8000aca:	601a      	str	r2, [r3, #0]
					*ld++ = __REV(bitline(lp_bottom+8, bam_pattern));
 8000acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ace:	3320      	adds	r3, #32
 8000ad0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fed4 	bl	8000884 <bitline>
 8000adc:	4601      	mov	r1, r0
 8000ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ae0:	1d1a      	adds	r2, r3, #4
 8000ae2:	637a      	str	r2, [r7, #52]	@ 0x34
 8000ae4:	6179      	str	r1, [r7, #20]
 8000ae6:	697a      	ldr	r2, [r7, #20]
 8000ae8:	ba12      	rev	r2, r2
 8000aea:	601a      	str	r2, [r3, #0]
					*ld++ = __REV(bitline(lp_top, bam_pattern));
 8000aec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000af0:	4619      	mov	r1, r3
 8000af2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000af4:	f7ff fec6 	bl	8000884 <bitline>
 8000af8:	4601      	mov	r1, r0
 8000afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000afc:	1d1a      	adds	r2, r3, #4
 8000afe:	637a      	str	r2, [r7, #52]	@ 0x34
 8000b00:	61b9      	str	r1, [r7, #24]
 8000b02:	69ba      	ldr	r2, [r7, #24]
 8000b04:	ba12      	rev	r2, r2
 8000b06:	601a      	str	r2, [r3, #0]
					*ld++ = __REV(bitline(lp_top+4, bam_pattern));
 8000b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b0a:	3310      	adds	r3, #16
 8000b0c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff feb6 	bl	8000884 <bitline>
 8000b18:	4601      	mov	r1, r0
 8000b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b1c:	1d1a      	adds	r2, r3, #4
 8000b1e:	637a      	str	r2, [r7, #52]	@ 0x34
 8000b20:	61f9      	str	r1, [r7, #28]
 8000b22:	69fa      	ldr	r2, [r7, #28]
 8000b24:	ba12      	rev	r2, r2
 8000b26:	601a      	str	r2, [r3, #0]
					*ld   = __REV(bitline(lp_top+8, bam_pattern));
 8000b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b2a:	3320      	adds	r3, #32
 8000b2c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b30:	4611      	mov	r1, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fea6 	bl	8000884 <bitline>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	623b      	str	r3, [r7, #32]
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
 8000b3e:	ba1a      	rev	r2, r3
 8000b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b42:	601a      	str	r2, [r3, #0]
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);		// wait for notification from HAL_TIM_PeriodElapsedCallback
 8000b44:	e704      	b.n	8000950 <WriteLEDTask+0x8>
 8000b46:	bf00      	nop
 8000b48:	200033d0 	.word	0x200033d0
 8000b4c:	20003394 	.word	0x20003394
 8000b50:	200033d2 	.word	0x200033d2
 8000b54:	20003396 	.word	0x20003396
 8000b58:	20003398 	.word	0x20003398
 8000b5c:	20000284 	.word	0x20000284
 8000b60:	200033c8 	.word	0x200033c8
 8000b64:	200033cc 	.word	0x200033cc
 8000b68:	20000f90 	.word	0x20000f90
 8000b6c:	20000f88 	.word	0x20000f88
 8000b70:	20000f8c 	.word	0x20000f8c
 8000b74:	20000388 	.word	0x20000388
 8000b78:	080063a4 	.word	0x080063a4

08000b7c <vSyncTask>:
				}
	}
}

void vSyncTask(void * argument)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
//  for(;;)
//  {
//    osDelay(1);
//  }

		float t = 0;
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
		GPIOB->BSRR = GPIO_PIN_0 << 16;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc0 <vSyncTask+0x44>)
 8000b8c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b90:	619a      	str	r2, [r3, #24]

		HAL_TIM_Base_Start_IT(&htim3);
 8000b92:	480c      	ldr	r0, [pc, #48]	@ (8000bc4 <vSyncTask+0x48>)
 8000b94:	f002 fbf4 	bl	8003380 <HAL_TIM_Base_Start_IT>

		/* Infinite loop */
		for(;;)
		{
			// wait forever for a vSync
			if ( xVsyncSemaphore != NULL)
 8000b98:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <vSyncTask+0x4c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d006      	beq.n	8000bae <vSyncTask+0x32>
			{
				xSemaphoreTake(xVsyncSemaphore, portMAX_DELAY);
 8000ba0:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <vSyncTask+0x4c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f004 f82f 	bl	8004c0c <xQueueSemaphoreTake>
			}

			xSemaphoreGive(xFrameReadySemaphore);
 8000bae:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <vSyncTask+0x50>)
 8000bb0:	6818      	ldr	r0, [r3, #0]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	f003 fe96 	bl	80048e8 <xQueueGenericSend>
			if ( xVsyncSemaphore != NULL)
 8000bbc:	e7ec      	b.n	8000b98 <vSyncTask+0x1c>
 8000bbe:	bf00      	nop
 8000bc0:	48000400 	.word	0x48000400
 8000bc4:	20000330 	.word	0x20000330
 8000bc8:	20000f8c 	.word	0x20000f8c
 8000bcc:	20000f90 	.word	0x20000f90

08000bd0 <power_off>:
  /* USER CODE END 5 */
}

uint8_t device_state = DEVICE_STATE_ON;

void power_off(void) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	memcpy(saved_image_data, curr_image_data, sizeof(uint8_t)*32*32*3);
 8000bd4:	4a07      	ldr	r2, [pc, #28]	@ (8000bf4 <power_off+0x24>)
 8000bd6:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <power_off+0x28>)
 8000bd8:	4610      	mov	r0, r2
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000be0:	461a      	mov	r2, r3
 8000be2:	f005 fbaf 	bl	8006344 <memcpy>
	HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000be6:	2026      	movs	r0, #38	@ 0x26
 8000be8:	f000 fc9b 	bl	8001522 <HAL_NVIC_DisableIRQ>
	clear_led_matrix();
 8000bec:	f7ff fb74 	bl	80002d8 <clear_led_matrix>
//	HAL_NVIC_DisableIRQ(DMA2_Channel4_IRQn);

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20001b94 	.word	0x20001b94
 8000bf8:	20002794 	.word	0x20002794

08000bfc <power_on>:

void power_on(void) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c00:	2026      	movs	r0, #38	@ 0x26
 8000c02:	f000 fc80 	bl	8001506 <HAL_NVIC_EnableIRQ>
	write_matrix(saved_image_data);
 8000c06:	4802      	ldr	r0, [pc, #8]	@ (8000c10 <power_on+0x14>)
 8000c08:	f000 f85c 	bl	8000cc4 <write_matrix>
//	HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20001b94 	.word	0x20001b94

08000c14 <EXTI15_10_IRQHandler>:

/* User button IRQ Handler */
void EXTI15_10_IRQHandler(void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	if (EXTI->PR1 & EXTI_PR1_PIF13) {
 8000c18:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <EXTI15_10_IRQHandler+0x44>)
 8000c1a:	695b      	ldr	r3, [r3, #20]
 8000c1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d017      	beq.n	8000c54 <EXTI15_10_IRQHandler+0x40>

		device_state ^= 1;
 8000c24:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <EXTI15_10_IRQHandler+0x48>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	f083 0301 	eor.w	r3, r3, #1
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <EXTI15_10_IRQHandler+0x48>)
 8000c30:	701a      	strb	r2, [r3, #0]

		if (device_state == DEVICE_STATE_ON) {
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <EXTI15_10_IRQHandler+0x48>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d102      	bne.n	8000c40 <EXTI15_10_IRQHandler+0x2c>
			power_on();
 8000c3a:	f7ff ffdf 	bl	8000bfc <power_on>
 8000c3e:	e005      	b.n	8000c4c <EXTI15_10_IRQHandler+0x38>
		} else if (device_state == DEVICE_STATE_OFF) {
 8000c40:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <EXTI15_10_IRQHandler+0x48>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d101      	bne.n	8000c4c <EXTI15_10_IRQHandler+0x38>
			power_off();
 8000c48:	f7ff ffc2 	bl	8000bd0 <power_off>
		}

		EXTI->PR1 = EXTI_PR1_PIF13;	// clear flag
 8000c4c:	4b02      	ldr	r3, [pc, #8]	@ (8000c58 <EXTI15_10_IRQHandler+0x44>)
 8000c4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c52:	615a      	str	r2, [r3, #20]
	}
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40010400 	.word	0x40010400
 8000c5c:	20000000 	.word	0x20000000

08000c60 <USART2_IRQHandler>:

int rx_index = 0;
/* Interrupt handler for USART2 */
void USART2_IRQHandler(void) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
	// If read data register not empty, store the data (keypress) in global variable and set key press flag high

	if ((USART2->ISR & USART_ISR_RXNE) != 0) {
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <USART2_IRQHandler+0x58>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	f003 0320 	and.w	r3, r3, #32
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d01e      	beq.n	8000cb0 <USART2_IRQHandler+0x50>
		int data = USART2->RDR;
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <USART2_IRQHandler+0x58>)
 8000c74:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	607b      	str	r3, [r7, #4]

		rx_image_data[rx_index++] = data >> 6;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	1198      	asrs	r0, r3, #6
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <USART2_IRQHandler+0x5c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	1c5a      	adds	r2, r3, #1
 8000c84:	490d      	ldr	r1, [pc, #52]	@ (8000cbc <USART2_IRQHandler+0x5c>)
 8000c86:	600a      	str	r2, [r1, #0]
 8000c88:	b2c1      	uxtb	r1, r0
 8000c8a:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc0 <USART2_IRQHandler+0x60>)
 8000c8c:	54d1      	strb	r1, [r2, r3]

		if (rx_index >= (32*32*3)) {
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <USART2_IRQHandler+0x5c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000c96:	db0b      	blt.n	8000cb0 <USART2_IRQHandler+0x50>
			rx_index = 0;
 8000c98:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <USART2_IRQHandler+0x5c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]

			// Write image data to the led_matrix array
			write_matrix(rx_image_data);
 8000c9e:	4808      	ldr	r0, [pc, #32]	@ (8000cc0 <USART2_IRQHandler+0x60>)
 8000ca0:	f000 f810 	bl	8000cc4 <write_matrix>

			memset(rx_image_data, 0, sizeof(rx_image_data));
 8000ca4:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <USART2_IRQHandler+0x60>)
 8000cac:	f005 fb1e 	bl	80062ec <memset>

		}

	}

}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40004400 	.word	0x40004400
 8000cbc:	200033d4 	.word	0x200033d4
 8000cc0:	20000f94 	.word	0x20000f94

08000cc4 <write_matrix>:

void vApplicationIdleHook(void) {
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
}

void write_matrix(uint8_t rgb_data[32*32*3]) {
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b08b      	sub	sp, #44	@ 0x2c
 8000cc8:	af02      	add	r7, sp, #8
 8000cca:	6078      	str	r0, [r7, #4]
	memcpy(curr_image_data, rgb_data, sizeof(uint8_t)*32*32*3);
 8000ccc:	4a30      	ldr	r2, [pc, #192]	@ (8000d90 <write_matrix+0xcc>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000cd8:	461a      	mov	r2, r3
 8000cda:	f005 fb33 	bl	8006344 <memcpy>
	for (int i = 0; i < 32 * 32 * 3; i += 3) {
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	e04b      	b.n	8000d7c <write_matrix+0xb8>
		int x = (i / 3) % 32;
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	4a2b      	ldr	r2, [pc, #172]	@ (8000d94 <write_matrix+0xd0>)
 8000ce8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cec:	17db      	asrs	r3, r3, #31
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	425a      	negs	r2, r3
 8000cf2:	f003 031f 	and.w	r3, r3, #31
 8000cf6:	f002 021f 	and.w	r2, r2, #31
 8000cfa:	bf58      	it	pl
 8000cfc:	4253      	negpl	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
		int y = (i / 3) / 32;
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	4a25      	ldr	r2, [pc, #148]	@ (8000d98 <write_matrix+0xd4>)
 8000d04:	fb82 1203 	smull	r1, r2, r2, r3
 8000d08:	1112      	asrs	r2, r2, #4
 8000d0a:	17db      	asrs	r3, r3, #31
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	617b      	str	r3, [r7, #20]
		int r = rgb_data[i];
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	613b      	str	r3, [r7, #16]
		int g = rgb_data[i+1];
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
		int b = rgb_data[i+2];
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3302      	adds	r3, #2
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	60bb      	str	r3, [r7, #8]
		image_buffer = backbuffer[0];
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <write_matrix+0xd8>)
 8000d34:	4a1a      	ldr	r2, [pc, #104]	@ (8000da0 <write_matrix+0xdc>)
 8000d36:	601a      	str	r2, [r3, #0]
		  set_pixel(x,y, r, g, b);
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	b298      	uxth	r0, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	b299      	uxth	r1, r3
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	b2dc      	uxtb	r4, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	4623      	mov	r3, r4
 8000d50:	f7ff fa46 	bl	80001e0 <set_pixel>

		  image_buffer = backbuffer[1];
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <write_matrix+0xd8>)
 8000d56:	4a13      	ldr	r2, [pc, #76]	@ (8000da4 <write_matrix+0xe0>)
 8000d58:	601a      	str	r2, [r3, #0]
		  set_pixel(x,y, r, g, b);
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	b298      	uxth	r0, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	b299      	uxth	r1, r3
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	b2dc      	uxtb	r4, r3
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	4623      	mov	r3, r4
 8000d72:	f7ff fa35 	bl	80001e0 <set_pixel>
	for (int i = 0; i < 32 * 32 * 3; i += 3) {
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3303      	adds	r3, #3
 8000d7a:	61fb      	str	r3, [r7, #28]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000d82:	dbaf      	blt.n	8000ce4 <write_matrix+0x20>
	}
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	3724      	adds	r7, #36	@ 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd90      	pop	{r4, r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20002794 	.word	0x20002794
 8000d94:	55555556 	.word	0x55555556
 8000d98:	2aaaaaab 	.word	0x2aaaaaab
 8000d9c:	20000384 	.word	0x20000384
 8000da0:	20000388 	.word	0x20000388
 8000da4:	20000988 	.word	0x20000988

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <Error_Handler+0x8>

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <HAL_MspInit+0x4c>)
 8000dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dbe:	4a10      	ldr	r2, [pc, #64]	@ (8000e00 <HAL_MspInit+0x4c>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <HAL_MspInit+0x4c>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <HAL_MspInit+0x4c>)
 8000dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e00 <HAL_MspInit+0x4c>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ddc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dde:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <HAL_MspInit+0x4c>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	210f      	movs	r1, #15
 8000dee:	f06f 0001 	mvn.w	r0, #1
 8000df2:	f000 fb6c 	bl	80014ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000

08000e04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	@ 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a30      	ldr	r2, [pc, #192]	@ (8000ee4 <HAL_SPI_MspInit+0xe0>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d159      	bne.n	8000eda <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e26:	4b30      	ldr	r3, [pc, #192]	@ (8000ee8 <HAL_SPI_MspInit+0xe4>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e2a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ee8 <HAL_SPI_MspInit+0xe4>)
 8000e2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e30:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e32:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee8 <HAL_SPI_MspInit+0xe4>)
 8000e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee8 <HAL_SPI_MspInit+0xe4>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e42:	4a29      	ldr	r2, [pc, #164]	@ (8000ee8 <HAL_SPI_MspInit+0xe4>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e4a:	4b27      	ldr	r3, [pc, #156]	@ (8000ee8 <HAL_SPI_MspInit+0xe4>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e56:	23a0      	movs	r3, #160	@ 0xa0
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e66:	2305      	movs	r3, #5
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e74:	f000 fda8 	bl	80019c8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Channel4;
 8000e78:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <HAL_SPI_MspInit+0xe8>)
 8000e7a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef0 <HAL_SPI_MspInit+0xec>)
 8000e7c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_4;
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000eec <HAL_SPI_MspInit+0xe8>)
 8000e80:	2204      	movs	r2, #4
 8000e82:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e84:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <HAL_SPI_MspInit+0xe8>)
 8000e86:	2210      	movs	r2, #16
 8000e88:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e8a:	4b18      	ldr	r3, [pc, #96]	@ (8000eec <HAL_SPI_MspInit+0xe8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e90:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <HAL_SPI_MspInit+0xe8>)
 8000e92:	2280      	movs	r2, #128	@ 0x80
 8000e94:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e96:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <HAL_SPI_MspInit+0xe8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e9c:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <HAL_SPI_MspInit+0xe8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000ea2:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <HAL_SPI_MspInit+0xe8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ea8:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <HAL_SPI_MspInit+0xe8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000eae:	480f      	ldr	r0, [pc, #60]	@ (8000eec <HAL_SPI_MspInit+0xe8>)
 8000eb0:	f000 fb52 	bl	8001558 <HAL_DMA_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8000eba:	f7ff ff75 	bl	8000da8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <HAL_SPI_MspInit+0xe8>)
 8000ec2:	655a      	str	r2, [r3, #84]	@ 0x54
 8000ec4:	4a09      	ldr	r2, [pc, #36]	@ (8000eec <HAL_SPI_MspInit+0xe8>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2105      	movs	r1, #5
 8000ece:	2023      	movs	r0, #35	@ 0x23
 8000ed0:	f000 fafd 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ed4:	2023      	movs	r0, #35	@ 0x23
 8000ed6:	f000 fb16 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	@ 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40013000 	.word	0x40013000
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	200002e8 	.word	0x200002e8
 8000ef0:	40020444 	.word	0x40020444

08000ef4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	@ (8000f38 <HAL_TIM_Base_MspInit+0x44>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d113      	bne.n	8000f2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f06:	4b0d      	ldr	r3, [pc, #52]	@ (8000f3c <HAL_TIM_Base_MspInit+0x48>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f3c <HAL_TIM_Base_MspInit+0x48>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f12:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <HAL_TIM_Base_MspInit+0x48>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2105      	movs	r1, #5
 8000f22:	201d      	movs	r0, #29
 8000f24:	f000 fad3 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f28:	201d      	movs	r0, #29
 8000f2a:	f000 faec 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40000400 	.word	0x40000400
 8000f3c:	40021000 	.word	0x40021000

08000f40 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f54:	4802      	ldr	r0, [pc, #8]	@ (8000f60 <TIM3_IRQHandler+0x10>)
 8000f56:	f002 fa83 	bl	8003460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000330 	.word	0x20000330

08000f64 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f68:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <SPI1_IRQHandler+0x10>)
 8000f6a:	f001 feaf 	bl	8002ccc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000284 	.word	0x20000284

08000f78 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <DMA2_Channel4_IRQHandler+0x10>)
 8000f7e:	f000 fc44 	bl	800180a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200002e8 	.word	0x200002e8

08000f8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <SystemInit+0x20>)
 8000f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f96:	4a05      	ldr	r2, [pc, #20]	@ (8000fac <SystemInit+0x20>)
 8000f98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <UART_Init>:
#include "uart.h"
#include <stdio.h>
#include <string.h>

/* CONFIGURES PINS PA2 (TX) and PA3 (RX) for USART */
void UART_Init(void) {
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

	/* enable clock for GPIOA and USART2 */
		RCC->AHB2ENR 		|=  (RCC_AHB2ENR_GPIOAEN);
 8000fb4:	4b34      	ldr	r3, [pc, #208]	@ (8001088 <UART_Init+0xd8>)
 8000fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb8:	4a33      	ldr	r2, [pc, #204]	@ (8001088 <UART_Init+0xd8>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
		RCC->APB1ENR1		|= (RCC_APB1ENR1_USART2EN);
 8000fc0:	4b31      	ldr	r3, [pc, #196]	@ (8001088 <UART_Init+0xd8>)
 8000fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc4:	4a30      	ldr	r2, [pc, #192]	@ (8001088 <UART_Init+0xd8>)
 8000fc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fca:	6593      	str	r3, [r2, #88]	@ 0x58

		/* GPIO config (PA2->Tx and PA3->Rx) */
		GPIOA->AFR[0]   	&= ~(GPIO_AFRL_AFSEL2_Msk | GPIO_AFRL_AFSEL3_Msk);	// clear AFR
 8000fcc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
 8000fd2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000fda:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]		|=  ( (0x7UL << GPIO_AFRL_AFSEL2_Pos) |				// set PA2, PA3 to AF7
 8000fdc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fe6:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000fea:	6213      	str	r3, [r2, #32]
								  (0x7UL << GPIO_AFRL_AFSEL3_Pos) );
		GPIOA->MODER 		&= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3); 			// clear mode2 and mode3
 8000fec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ff6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000ffa:	6013      	str	r3, [r2, #0]
		GPIOA->MODER 		|=  (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);		// set to alternate function
 8000ffc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001006:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800100a:	6013      	str	r3, [r2, #0]
		GPIOA->OTYPER 		&= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);			// set OTYPE2 and OTYPE3 to push-pull
 800100c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001016:	f023 030c 	bic.w	r3, r3, #12
 800101a:	6053      	str	r3, [r2, #4]
		GPIOA->OSPEEDR 		|=  (GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3);	// set OSPEED2 and OPSEED3 to high speed
 800101c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001026:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 800102a:	6093      	str	r3, [r2, #8]
		GPIOA->PUPDR 		&= ~(GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);			// set PUPD2 and PUPD3 to no pull-up/pull-down
 800102c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001036:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800103a:	60d3      	str	r3, [r2, #12]

		/* USART2 config */
		USART2->CR1 &= ~(USART_CR1_M);										// set word length to 8 bits
 800103c:	4b13      	ldr	r3, [pc, #76]	@ (800108c <UART_Init+0xdc>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a12      	ldr	r2, [pc, #72]	@ (800108c <UART_Init+0xdc>)
 8001042:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8001046:	6013      	str	r3, [r2, #0]
		USART2->CR1 |=  (USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE); 	// transmit enable, read enable, RXNE interrupt enable
 8001048:	4b10      	ldr	r3, [pc, #64]	@ (800108c <UART_Init+0xdc>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0f      	ldr	r2, [pc, #60]	@ (800108c <UART_Init+0xdc>)
 800104e:	f043 032c 	orr.w	r3, r3, #44	@ 0x2c
 8001052:	6013      	str	r3, [r2, #0]
		USART2->CR2 &= ~(USART_CR2_MSBFIRST | USART_CR2_STOP);		 		// LSB first, 1 stop bit
 8001054:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <UART_Init+0xdc>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	4a0c      	ldr	r2, [pc, #48]	@ (800108c <UART_Init+0xdc>)
 800105a:	f423 2303 	bic.w	r3, r3, #536576	@ 0x83000
 800105e:	6053      	str	r3, [r2, #4]
		USART2->BRR  =  (USART_DIV);										// baud rate configuration
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <UART_Init+0xdc>)
 8001062:	f240 1215 	movw	r2, #277	@ 0x115
 8001066:	60da      	str	r2, [r3, #12]
		USART2->CR1 |=  (USART_CR1_UE);										// enable USART2
 8001068:	4b08      	ldr	r3, [pc, #32]	@ (800108c <UART_Init+0xdc>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a07      	ldr	r2, [pc, #28]	@ (800108c <UART_Init+0xdc>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6013      	str	r3, [r2, #0]

		/* enable interrupts in NVIC */
		NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <UART_Init+0xe0>)
 8001076:	2240      	movs	r2, #64	@ 0x40
 8001078:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 800107a:	b662      	cpsie	i
}
 800107c:	bf00      	nop

		/* enable interrupts globally */
		__enable_irq();

}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	40021000 	.word	0x40021000
 800108c:	40004400 	.word	0x40004400
 8001090:	e000e100 	.word	0xe000e100

08001094 <UART_ESC_Code>:

/**
  * @brief Transmits escape + input_string
  * @retval None
  */
void UART_ESC_Code(char *input_string) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	USART2->TDR = 0x1B;						// transmit escape
 800109c:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <UART_ESC_Code+0x5c>)
 800109e:	221b      	movs	r2, #27
 80010a0:	851a      	strh	r2, [r3, #40]	@ 0x28
	while(!(USART2->ISR & USART_ISR_TC));	// wait until transmission is complete
 80010a2:	bf00      	nop
 80010a4:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <UART_ESC_Code+0x5c>)
 80010a6:	69db      	ldr	r3, [r3, #28]
 80010a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0f9      	beq.n	80010a4 <UART_ESC_Code+0x10>

	for(int i = 0; i < strlen(input_string); i++) {
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	e00f      	b.n	80010d6 <UART_ESC_Code+0x42>
		USART2->TDR = input_string[i];			// transmit character
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	781a      	ldrb	r2, [r3, #0]
 80010be:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <UART_ESC_Code+0x5c>)
 80010c0:	851a      	strh	r2, [r3, #40]	@ 0x28
		while(!(USART2->ISR & USART_ISR_TC));	// wait until transmission is complete
 80010c2:	bf00      	nop
 80010c4:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <UART_ESC_Code+0x5c>)
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0f9      	beq.n	80010c4 <UART_ESC_Code+0x30>
	for(int i = 0; i < strlen(input_string); i++) {
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3301      	adds	r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff f87a 	bl	80001d0 <strlen>
 80010dc:	4602      	mov	r2, r0
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d8e8      	bhi.n	80010b6 <UART_ESC_Code+0x22>
	}
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40004400 	.word	0x40004400

080010f4 <UART_Reset_Terminal>:

/**
  * @brief Clears terminal and resets cursor to top left
  * @retval None
  */
void UART_Reset_Terminal(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	UART_ESC_Code("[2J");	// Clear screen
 80010f8:	4803      	ldr	r0, [pc, #12]	@ (8001108 <UART_Reset_Terminal+0x14>)
 80010fa:	f7ff ffcb 	bl	8001094 <UART_ESC_Code>
	UART_ESC_Code("[H");	// Move cursor to top left corner
 80010fe:	4803      	ldr	r0, [pc, #12]	@ (800110c <UART_Reset_Terminal+0x18>)
 8001100:	f7ff ffc8 	bl	8001094 <UART_ESC_Code>
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	08006394 	.word	0x08006394
 800110c:	08006398 	.word	0x08006398

08001110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	2b00      	cmp	r3, #0
 8001120:	db0b      	blt.n	800113a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	f003 021f 	and.w	r2, r3, #31
 8001128:	4907      	ldr	r1, [pc, #28]	@ (8001148 <__NVIC_EnableIRQ+0x38>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	095b      	lsrs	r3, r3, #5
 8001130:	2001      	movs	r0, #1
 8001132:	fa00 f202 	lsl.w	r2, r0, r2
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000e100 	.word	0xe000e100

0800114c <UserButton_Init>:
 *      Author: noahmasten
 */

#include "user_button.h"

void UserButton_Init(void) {
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	// turn on clock to GPIOC

	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8001150:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <UserButton_Init+0x60>)
 8001152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001154:	4a15      	ldr	r2, [pc, #84]	@ (80011ac <UserButton_Init+0x60>)
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800115c:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <UserButton_Init+0x60>)
 800115e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001160:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <UserButton_Init+0x60>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6613      	str	r3, [r2, #96]	@ 0x60

	// Configure User Button (PC13) for input
	GPIOC->MODER &= ~(GPIO_MODER_MODE13);		// Input mode
 8001168:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <UserButton_Init+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a10      	ldr	r2, [pc, #64]	@ (80011b0 <UserButton_Init+0x64>)
 800116e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8001172:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR |= (2 << GPIO_PUPDR_PUPD13_Pos); // Pull down resistor
 8001174:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <UserButton_Init+0x64>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	4a0d      	ldr	r2, [pc, #52]	@ (80011b0 <UserButton_Init+0x64>)
 800117a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800117e:	60d3      	str	r3, [r2, #12]
	SYSCFG->EXTICR[3] = (2 << SYSCFG_EXTICR4_EXTI13_Pos);	// Configure PC13 interrupt
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <UserButton_Init+0x68>)
 8001182:	2220      	movs	r2, #32
 8001184:	615a      	str	r2, [r3, #20]
	EXTI->IMR1 |= (EXTI_IMR1_IM13);		// enable interrupt in external interrupt controller
 8001186:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <UserButton_Init+0x6c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a0b      	ldr	r2, [pc, #44]	@ (80011b8 <UserButton_Init+0x6c>)
 800118c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001190:	6013      	str	r3, [r2, #0]
	EXTI->RTSR1 |= (EXTI_RTSR1_RT13);	// enable interrupt on rising edge
 8001192:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <UserButton_Init+0x6c>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	4a08      	ldr	r2, [pc, #32]	@ (80011b8 <UserButton_Init+0x6c>)
 8001198:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800119c:	6093      	str	r3, [r2, #8]

	// enable interrupts in NVIC
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 800119e:	2028      	movs	r0, #40	@ 0x28
 80011a0:	f7ff ffb6 	bl	8001110 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80011a4:	b662      	cpsie	i
}
 80011a6:	bf00      	nop
	__enable_irq();
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000
 80011b0:	48000800 	.word	0x48000800
 80011b4:	40010000 	.word	0x40010000
 80011b8:	40010400 	.word	0x40010400

080011bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack    /* Set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011c0:	f7ff fee4 	bl	8000f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c4:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80011c6:	490d      	ldr	r1, [pc, #52]	@ (80011fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001200 <LoopForever+0xe>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011cc:	e002      	b.n	80011d4 <LoopCopyDataInit>

080011ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d2:	3304      	adds	r3, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d8:	d3f9      	bcc.n	80011ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001208 <LoopForever+0x16>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e0:	e001      	b.n	80011e6 <LoopFillZerobss>

080011e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e4:	3204      	adds	r2, #4

080011e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e8:	d3fb      	bcc.n	80011e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ea:	f005 f887 	bl	80062fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ee:	f7ff f8c7 	bl	8000380 <main>

080011f2 <LoopForever>:

LoopForever:
    b LoopForever
 80011f2:	e7fe      	b.n	80011f2 <LoopForever>
   ldr   sp, =_estack    /* Set stack pointer */
 80011f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001200:	08006410 	.word	0x08006410
  ldr r2, =_sbss
 8001204:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001208:	20011f9c 	.word	0x20011f9c

0800120c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC1_2_IRQHandler>

0800120e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001218:	2003      	movs	r0, #3
 800121a:	f000 f94d 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800121e:	200f      	movs	r0, #15
 8001220:	f000 f80e 	bl	8001240 <HAL_InitTick>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	71fb      	strb	r3, [r7, #7]
 800122e:	e001      	b.n	8001234 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001230:	f7ff fdc0 	bl	8000db4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001234:	79fb      	ldrb	r3, [r7, #7]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <HAL_InitTick+0x6c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d023      	beq.n	800129c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001254:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <HAL_InitTick+0x70>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <HAL_InitTick+0x6c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001262:	fbb3 f3f1 	udiv	r3, r3, r1
 8001266:	fbb2 f3f3 	udiv	r3, r2, r3
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f967 	bl	800153e <HAL_SYSTICK_Config>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10f      	bne.n	8001296 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d809      	bhi.n	8001290 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001284:	f000 f923 	bl	80014ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001288:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <HAL_InitTick+0x74>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	e007      	b.n	80012a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	e004      	b.n	80012a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]
 800129a:	e001      	b.n	80012a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000000c 	.word	0x2000000c
 80012b0:	20000004 	.word	0x20000004
 80012b4:	20000008 	.word	0x20000008

080012b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return uwTick;
 80012bc:	4b03      	ldr	r3, [pc, #12]	@ (80012cc <HAL_GetTick+0x14>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	200033d8 	.word	0x200033d8

080012d0 <__NVIC_SetPriorityGrouping>:
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	@ (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_GetPriorityGrouping>:
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_EnableIRQ>:
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0b      	blt.n	800135e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4907      	ldr	r1, [pc, #28]	@ (800136c <__NVIC_EnableIRQ+0x38>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db12      	blt.n	80013a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	490a      	ldr	r1, [pc, #40]	@ (80013b4 <__NVIC_DisableIRQ+0x44>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	3320      	adds	r3, #32
 8001398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800139c:	f3bf 8f4f 	dsb	sy
}
 80013a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013a2:	f3bf 8f6f 	isb	sy
}
 80013a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000e100 	.word	0xe000e100

080013b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	db0a      	blt.n	80013e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	490c      	ldr	r1, [pc, #48]	@ (8001404 <__NVIC_SetPriority+0x4c>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	0112      	lsls	r2, r2, #4
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	440b      	add	r3, r1
 80013dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e0:	e00a      	b.n	80013f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4908      	ldr	r1, [pc, #32]	@ (8001408 <__NVIC_SetPriority+0x50>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	3b04      	subs	r3, #4
 80013f0:	0112      	lsls	r2, r2, #4
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	440b      	add	r3, r1
 80013f6:	761a      	strb	r2, [r3, #24]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000e100 	.word	0xe000e100
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	@ 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f1c3 0307 	rsb	r3, r3, #7
 8001426:	2b04      	cmp	r3, #4
 8001428:	bf28      	it	cs
 800142a:	2304      	movcs	r3, #4
 800142c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3304      	adds	r3, #4
 8001432:	2b06      	cmp	r3, #6
 8001434:	d902      	bls.n	800143c <NVIC_EncodePriority+0x30>
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3b03      	subs	r3, #3
 800143a:	e000      	b.n	800143e <NVIC_EncodePriority+0x32>
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001454:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	43d9      	mvns	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	4313      	orrs	r3, r2
         );
}
 8001466:	4618      	mov	r0, r3
 8001468:	3724      	adds	r7, #36	@ 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001498:	f7ff ff8e 	bl	80013b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff05 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff1a 	bl	8001318 <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff8e 	bl	800140c <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5d 	bl	80013b8 <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff0d 	bl	8001334 <__NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff1d 	bl	8001370 <__NVIC_DisableIRQ>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ff94 	bl	8001474 <SysTick_Config>
 800154c:	4603      	mov	r3, r0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e098      	b.n	800169c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	4b4d      	ldr	r3, [pc, #308]	@ (80016a8 <HAL_DMA_Init+0x150>)
 8001572:	429a      	cmp	r2, r3
 8001574:	d80f      	bhi.n	8001596 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	4b4b      	ldr	r3, [pc, #300]	@ (80016ac <HAL_DMA_Init+0x154>)
 800157e:	4413      	add	r3, r2
 8001580:	4a4b      	ldr	r2, [pc, #300]	@ (80016b0 <HAL_DMA_Init+0x158>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	009a      	lsls	r2, r3, #2
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a48      	ldr	r2, [pc, #288]	@ (80016b4 <HAL_DMA_Init+0x15c>)
 8001592:	641a      	str	r2, [r3, #64]	@ 0x40
 8001594:	e00e      	b.n	80015b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	4b46      	ldr	r3, [pc, #280]	@ (80016b8 <HAL_DMA_Init+0x160>)
 800159e:	4413      	add	r3, r2
 80015a0:	4a43      	ldr	r2, [pc, #268]	@ (80016b0 <HAL_DMA_Init+0x158>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	091b      	lsrs	r3, r3, #4
 80015a8:	009a      	lsls	r2, r3, #2
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a42      	ldr	r2, [pc, #264]	@ (80016bc <HAL_DMA_Init+0x164>)
 80015b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2202      	movs	r2, #2
 80015b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80015ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80015ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80015d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800160e:	d039      	beq.n	8001684 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001614:	4a27      	ldr	r2, [pc, #156]	@ (80016b4 <HAL_DMA_Init+0x15c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d11a      	bne.n	8001650 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800161a:	4b29      	ldr	r3, [pc, #164]	@ (80016c0 <HAL_DMA_Init+0x168>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	f003 031c 	and.w	r3, r3, #28
 8001626:	210f      	movs	r1, #15
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	4924      	ldr	r1, [pc, #144]	@ (80016c0 <HAL_DMA_Init+0x168>)
 8001630:	4013      	ands	r3, r2
 8001632:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001634:	4b22      	ldr	r3, [pc, #136]	@ (80016c0 <HAL_DMA_Init+0x168>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001640:	f003 031c 	and.w	r3, r3, #28
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	491d      	ldr	r1, [pc, #116]	@ (80016c0 <HAL_DMA_Init+0x168>)
 800164a:	4313      	orrs	r3, r2
 800164c:	600b      	str	r3, [r1, #0]
 800164e:	e019      	b.n	8001684 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001650:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <HAL_DMA_Init+0x16c>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001658:	f003 031c 	and.w	r3, r3, #28
 800165c:	210f      	movs	r1, #15
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	4917      	ldr	r1, [pc, #92]	@ (80016c4 <HAL_DMA_Init+0x16c>)
 8001666:	4013      	ands	r3, r2
 8001668:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800166a:	4b16      	ldr	r3, [pc, #88]	@ (80016c4 <HAL_DMA_Init+0x16c>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6859      	ldr	r1, [r3, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	f003 031c 	and.w	r3, r3, #28
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	4911      	ldr	r1, [pc, #68]	@ (80016c4 <HAL_DMA_Init+0x16c>)
 8001680:	4313      	orrs	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	40020407 	.word	0x40020407
 80016ac:	bffdfff8 	.word	0xbffdfff8
 80016b0:	cccccccd 	.word	0xcccccccd
 80016b4:	40020000 	.word	0x40020000
 80016b8:	bffdfbf8 	.word	0xbffdfbf8
 80016bc:	40020400 	.word	0x40020400
 80016c0:	400200a8 	.word	0x400200a8
 80016c4:	400204a8 	.word	0x400204a8

080016c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
 80016d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_DMA_Start_IT+0x20>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e04b      	b.n	8001780 <HAL_DMA_Start_IT+0xb8>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d13a      	bne.n	8001772 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2202      	movs	r2, #2
 8001700:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2200      	movs	r2, #0
 8001708:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0201 	bic.w	r2, r2, #1
 8001718:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	68b9      	ldr	r1, [r7, #8]
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 f921 	bl	8001968 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	2b00      	cmp	r3, #0
 800172c:	d008      	beq.n	8001740 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 020e 	orr.w	r2, r2, #14
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	e00f      	b.n	8001760 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0204 	bic.w	r2, r2, #4
 800174e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 020a 	orr.w	r2, r2, #10
 800175e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 0201 	orr.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	e005      	b.n	800177e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800177a:	2302      	movs	r3, #2
 800177c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800177e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d005      	beq.n	80017ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2204      	movs	r2, #4
 80017a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	e029      	b.n	8001800 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 020e 	bic.w	r2, r2, #14
 80017ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0201 	bic.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d0:	f003 021c 	and.w	r2, r3, #28
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d8:	2101      	movs	r1, #1
 80017da:	fa01 f202 	lsl.w	r2, r1, r2
 80017de:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	4798      	blx	r3
    }
  }
  return status;
 8001800:	7bfb      	ldrb	r3, [r7, #15]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b084      	sub	sp, #16
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	f003 031c 	and.w	r3, r3, #28
 800182a:	2204      	movs	r2, #4
 800182c:	409a      	lsls	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4013      	ands	r3, r2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d026      	beq.n	8001884 <HAL_DMA_IRQHandler+0x7a>
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d021      	beq.n	8001884 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	2b00      	cmp	r3, #0
 800184c:	d107      	bne.n	800185e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0204 	bic.w	r2, r2, #4
 800185c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	f003 021c 	and.w	r2, r3, #28
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	2104      	movs	r1, #4
 800186c:	fa01 f202 	lsl.w	r2, r1, r2
 8001870:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	2b00      	cmp	r3, #0
 8001878:	d071      	beq.n	800195e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001882:	e06c      	b.n	800195e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001888:	f003 031c 	and.w	r3, r3, #28
 800188c:	2202      	movs	r2, #2
 800188e:	409a      	lsls	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4013      	ands	r3, r2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d02e      	beq.n	80018f6 <HAL_DMA_IRQHandler+0xec>
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d029      	beq.n	80018f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0320 	and.w	r3, r3, #32
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10b      	bne.n	80018c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 020a 	bic.w	r2, r2, #10
 80018be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018cc:	f003 021c 	and.w	r2, r3, #28
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	2102      	movs	r1, #2
 80018d6:	fa01 f202 	lsl.w	r2, r1, r2
 80018da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d038      	beq.n	800195e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80018f4:	e033      	b.n	800195e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	f003 031c 	and.w	r3, r3, #28
 80018fe:	2208      	movs	r2, #8
 8001900:	409a      	lsls	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4013      	ands	r3, r2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d02a      	beq.n	8001960 <HAL_DMA_IRQHandler+0x156>
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d025      	beq.n	8001960 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 020e 	bic.w	r2, r2, #14
 8001922:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001928:	f003 021c 	and.w	r2, r3, #28
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001930:	2101      	movs	r1, #1
 8001932:	fa01 f202 	lsl.w	r2, r1, r2
 8001936:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001952:	2b00      	cmp	r3, #0
 8001954:	d004      	beq.n	8001960 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800195e:	bf00      	nop
 8001960:	bf00      	nop
}
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	f003 021c 	and.w	r2, r3, #28
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	2101      	movs	r1, #1
 8001984:	fa01 f202 	lsl.w	r2, r1, r2
 8001988:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b10      	cmp	r3, #16
 8001998:	d108      	bne.n	80019ac <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019aa:	e007      	b.n	80019bc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	60da      	str	r2, [r3, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d6:	e17f      	b.n	8001cd8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	2101      	movs	r1, #1
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	4013      	ands	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 8171 	beq.w	8001cd2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d005      	beq.n	8001a08 <HAL_GPIO_Init+0x40>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d130      	bne.n	8001a6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	2203      	movs	r2, #3
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a3e:	2201      	movs	r2, #1
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	091b      	lsrs	r3, r3, #4
 8001a54:	f003 0201 	and.w	r2, r3, #1
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d118      	bne.n	8001aa8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	08db      	lsrs	r3, r3, #3
 8001a92:	f003 0201 	and.w	r2, r3, #1
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d017      	beq.n	8001ae4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	2203      	movs	r2, #3
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d123      	bne.n	8001b38 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	08da      	lsrs	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3208      	adds	r2, #8
 8001af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001afc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	220f      	movs	r2, #15
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	08da      	lsrs	r2, r3, #3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3208      	adds	r2, #8
 8001b32:	6939      	ldr	r1, [r7, #16]
 8001b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0203 	and.w	r2, r3, #3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 80ac 	beq.w	8001cd2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7a:	4b5f      	ldr	r3, [pc, #380]	@ (8001cf8 <HAL_GPIO_Init+0x330>)
 8001b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7e:	4a5e      	ldr	r2, [pc, #376]	@ (8001cf8 <HAL_GPIO_Init+0x330>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b86:	4b5c      	ldr	r3, [pc, #368]	@ (8001cf8 <HAL_GPIO_Init+0x330>)
 8001b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b92:	4a5a      	ldr	r2, [pc, #360]	@ (8001cfc <HAL_GPIO_Init+0x334>)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	089b      	lsrs	r3, r3, #2
 8001b98:	3302      	adds	r3, #2
 8001b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	220f      	movs	r2, #15
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bbc:	d025      	beq.n	8001c0a <HAL_GPIO_Init+0x242>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4f      	ldr	r2, [pc, #316]	@ (8001d00 <HAL_GPIO_Init+0x338>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d01f      	beq.n	8001c06 <HAL_GPIO_Init+0x23e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4e      	ldr	r2, [pc, #312]	@ (8001d04 <HAL_GPIO_Init+0x33c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d019      	beq.n	8001c02 <HAL_GPIO_Init+0x23a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4d      	ldr	r2, [pc, #308]	@ (8001d08 <HAL_GPIO_Init+0x340>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d013      	beq.n	8001bfe <HAL_GPIO_Init+0x236>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4c      	ldr	r2, [pc, #304]	@ (8001d0c <HAL_GPIO_Init+0x344>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00d      	beq.n	8001bfa <HAL_GPIO_Init+0x232>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4b      	ldr	r2, [pc, #300]	@ (8001d10 <HAL_GPIO_Init+0x348>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d007      	beq.n	8001bf6 <HAL_GPIO_Init+0x22e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4a      	ldr	r2, [pc, #296]	@ (8001d14 <HAL_GPIO_Init+0x34c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d101      	bne.n	8001bf2 <HAL_GPIO_Init+0x22a>
 8001bee:	2306      	movs	r3, #6
 8001bf0:	e00c      	b.n	8001c0c <HAL_GPIO_Init+0x244>
 8001bf2:	2307      	movs	r3, #7
 8001bf4:	e00a      	b.n	8001c0c <HAL_GPIO_Init+0x244>
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	e008      	b.n	8001c0c <HAL_GPIO_Init+0x244>
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x244>
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e004      	b.n	8001c0c <HAL_GPIO_Init+0x244>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_Init+0x244>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_GPIO_Init+0x244>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	f002 0203 	and.w	r2, r2, #3
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	4093      	lsls	r3, r2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c1c:	4937      	ldr	r1, [pc, #220]	@ (8001cfc <HAL_GPIO_Init+0x334>)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	3302      	adds	r3, #2
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d18 <HAL_GPIO_Init+0x350>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c4e:	4a32      	ldr	r2, [pc, #200]	@ (8001d18 <HAL_GPIO_Init+0x350>)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c54:	4b30      	ldr	r3, [pc, #192]	@ (8001d18 <HAL_GPIO_Init+0x350>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c78:	4a27      	ldr	r2, [pc, #156]	@ (8001d18 <HAL_GPIO_Init+0x350>)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c7e:	4b26      	ldr	r3, [pc, #152]	@ (8001d18 <HAL_GPIO_Init+0x350>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ca2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d18 <HAL_GPIO_Init+0x350>)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <HAL_GPIO_Init+0x350>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ccc:	4a12      	ldr	r2, [pc, #72]	@ (8001d18 <HAL_GPIO_Init+0x350>)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f47f ae78 	bne.w	80019d8 <HAL_GPIO_Init+0x10>
  }
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	371c      	adds	r7, #28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	48000400 	.word	0x48000400
 8001d04:	48000800 	.word	0x48000800
 8001d08:	48000c00 	.word	0x48000c00
 8001d0c:	48001000 	.word	0x48001000
 8001d10:	48001400 	.word	0x48001400
 8001d14:	48001800 	.word	0x48001800
 8001d18:	40010400 	.word	0x40010400

08001d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	807b      	strh	r3, [r7, #2]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d2c:	787b      	ldrb	r3, [r7, #1]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d32:	887a      	ldrh	r2, [r7, #2]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d38:	e002      	b.n	8001d40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d3a:	887a      	ldrh	r2, [r7, #2]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d50:	4b04      	ldr	r3, [pc, #16]	@ (8001d64 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40007000 	.word	0x40007000

08001d68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d76:	d130      	bne.n	8001dda <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d78:	4b23      	ldr	r3, [pc, #140]	@ (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d84:	d038      	beq.n	8001df8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d86:	4b20      	ldr	r3, [pc, #128]	@ (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d96:	4b1d      	ldr	r3, [pc, #116]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2232      	movs	r2, #50	@ 0x32
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	0c9b      	lsrs	r3, r3, #18
 8001da8:	3301      	adds	r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dac:	e002      	b.n	8001db4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001db4:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dc0:	d102      	bne.n	8001dc8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f2      	bne.n	8001dae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dd4:	d110      	bne.n	8001df8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e00f      	b.n	8001dfa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dda:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001de6:	d007      	beq.n	8001df8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001de8:	4b07      	ldr	r3, [pc, #28]	@ (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001df0:	4a05      	ldr	r2, [pc, #20]	@ (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001df2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001df6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40007000 	.word	0x40007000
 8001e0c:	20000004 	.word	0x20000004
 8001e10:	431bde83 	.word	0x431bde83

08001e14 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e3ca      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e26:	4b97      	ldr	r3, [pc, #604]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e30:	4b94      	ldr	r3, [pc, #592]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 80e4 	beq.w	8002010 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <HAL_RCC_OscConfig+0x4a>
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2b0c      	cmp	r3, #12
 8001e52:	f040 808b 	bne.w	8001f6c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	f040 8087 	bne.w	8001f6c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e5e:	4b89      	ldr	r3, [pc, #548]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d005      	beq.n	8001e76 <HAL_RCC_OscConfig+0x62>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e3a2      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1a      	ldr	r2, [r3, #32]
 8001e7a:	4b82      	ldr	r3, [pc, #520]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d004      	beq.n	8001e90 <HAL_RCC_OscConfig+0x7c>
 8001e86:	4b7f      	ldr	r3, [pc, #508]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e8e:	e005      	b.n	8001e9c <HAL_RCC_OscConfig+0x88>
 8001e90:	4b7c      	ldr	r3, [pc, #496]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d223      	bcs.n	8001ee8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 fd1d 	bl	80028e4 <RCC_SetFlashLatencyFromMSIRange>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e383      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eb4:	4b73      	ldr	r3, [pc, #460]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a72      	ldr	r2, [pc, #456]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001eba:	f043 0308 	orr.w	r3, r3, #8
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b70      	ldr	r3, [pc, #448]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	496d      	ldr	r1, [pc, #436]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ed2:	4b6c      	ldr	r3, [pc, #432]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	4968      	ldr	r1, [pc, #416]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	604b      	str	r3, [r1, #4]
 8001ee6:	e025      	b.n	8001f34 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ee8:	4b66      	ldr	r3, [pc, #408]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a65      	ldr	r2, [pc, #404]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001eee:	f043 0308 	orr.w	r3, r3, #8
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4b63      	ldr	r3, [pc, #396]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4960      	ldr	r1, [pc, #384]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f06:	4b5f      	ldr	r3, [pc, #380]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	495b      	ldr	r1, [pc, #364]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d109      	bne.n	8001f34 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 fcdd 	bl	80028e4 <RCC_SetFlashLatencyFromMSIRange>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e343      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f34:	f000 fc4a 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	4b52      	ldr	r3, [pc, #328]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	4950      	ldr	r1, [pc, #320]	@ (8002088 <HAL_RCC_OscConfig+0x274>)
 8001f46:	5ccb      	ldrb	r3, [r1, r3]
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f50:	4a4e      	ldr	r2, [pc, #312]	@ (800208c <HAL_RCC_OscConfig+0x278>)
 8001f52:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f54:	4b4e      	ldr	r3, [pc, #312]	@ (8002090 <HAL_RCC_OscConfig+0x27c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff f971 	bl	8001240 <HAL_InitTick>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d052      	beq.n	800200e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	e327      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d032      	beq.n	8001fda <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f74:	4b43      	ldr	r3, [pc, #268]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a42      	ldr	r2, [pc, #264]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f80:	f7ff f99a 	bl	80012b8 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f88:	f7ff f996 	bl	80012b8 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e310      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f9a:	4b3a      	ldr	r3, [pc, #232]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fa6:	4b37      	ldr	r3, [pc, #220]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a36      	ldr	r2, [pc, #216]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001fac:	f043 0308 	orr.w	r3, r3, #8
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	4b34      	ldr	r3, [pc, #208]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4931      	ldr	r1, [pc, #196]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fc4:	4b2f      	ldr	r3, [pc, #188]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	492c      	ldr	r1, [pc, #176]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
 8001fd8:	e01a      	b.n	8002010 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fda:	4b2a      	ldr	r3, [pc, #168]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a29      	ldr	r2, [pc, #164]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fe6:	f7ff f967 	bl	80012b8 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fee:	f7ff f963 	bl	80012b8 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e2dd      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002000:	4b20      	ldr	r3, [pc, #128]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x1da>
 800200c:	e000      	b.n	8002010 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800200e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d074      	beq.n	8002106 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	2b08      	cmp	r3, #8
 8002020:	d005      	beq.n	800202e <HAL_RCC_OscConfig+0x21a>
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	2b0c      	cmp	r3, #12
 8002026:	d10e      	bne.n	8002046 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d10b      	bne.n	8002046 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202e:	4b15      	ldr	r3, [pc, #84]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d064      	beq.n	8002104 <HAL_RCC_OscConfig+0x2f0>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d160      	bne.n	8002104 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e2ba      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800204e:	d106      	bne.n	800205e <HAL_RCC_OscConfig+0x24a>
 8002050:	4b0c      	ldr	r3, [pc, #48]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0b      	ldr	r2, [pc, #44]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8002056:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	e026      	b.n	80020ac <HAL_RCC_OscConfig+0x298>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002066:	d115      	bne.n	8002094 <HAL_RCC_OscConfig+0x280>
 8002068:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a05      	ldr	r2, [pc, #20]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 800206e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b03      	ldr	r3, [pc, #12]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a02      	ldr	r2, [pc, #8]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 800207a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	e014      	b.n	80020ac <HAL_RCC_OscConfig+0x298>
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	080063c0 	.word	0x080063c0
 800208c:	20000004 	.word	0x20000004
 8002090:	20000008 	.word	0x20000008
 8002094:	4ba0      	ldr	r3, [pc, #640]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a9f      	ldr	r2, [pc, #636]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 800209a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	4b9d      	ldr	r3, [pc, #628]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a9c      	ldr	r2, [pc, #624]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 80020a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d013      	beq.n	80020dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7ff f900 	bl	80012b8 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020bc:	f7ff f8fc 	bl	80012b8 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	@ 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e276      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ce:	4b92      	ldr	r3, [pc, #584]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0x2a8>
 80020da:	e014      	b.n	8002106 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7ff f8ec 	bl	80012b8 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e4:	f7ff f8e8 	bl	80012b8 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b64      	cmp	r3, #100	@ 0x64
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e262      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020f6:	4b88      	ldr	r3, [pc, #544]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x2d0>
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d060      	beq.n	80021d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2b04      	cmp	r3, #4
 8002116:	d005      	beq.n	8002124 <HAL_RCC_OscConfig+0x310>
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	2b0c      	cmp	r3, #12
 800211c:	d119      	bne.n	8002152 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d116      	bne.n	8002152 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002124:	4b7c      	ldr	r3, [pc, #496]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_RCC_OscConfig+0x328>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e23f      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213c:	4b76      	ldr	r3, [pc, #472]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	061b      	lsls	r3, r3, #24
 800214a:	4973      	ldr	r1, [pc, #460]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002150:	e040      	b.n	80021d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d023      	beq.n	80021a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800215a:	4b6f      	ldr	r3, [pc, #444]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a6e      	ldr	r2, [pc, #440]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 8002160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002166:	f7ff f8a7 	bl	80012b8 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216e:	f7ff f8a3 	bl	80012b8 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e21d      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002180:	4b65      	ldr	r3, [pc, #404]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218c:	4b62      	ldr	r3, [pc, #392]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	061b      	lsls	r3, r3, #24
 800219a:	495f      	ldr	r1, [pc, #380]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
 80021a0:	e018      	b.n	80021d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 80021a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ae:	f7ff f883 	bl	80012b8 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b6:	f7ff f87f 	bl	80012b8 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e1f9      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021c8:	4b53      	ldr	r3, [pc, #332]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f0      	bne.n	80021b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d03c      	beq.n	800225a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d01c      	beq.n	8002222 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 80021ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021ee:	4a4a      	ldr	r2, [pc, #296]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f8:	f7ff f85e 	bl	80012b8 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002200:	f7ff f85a 	bl	80012b8 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e1d4      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002212:	4b41      	ldr	r3, [pc, #260]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 8002214:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0ef      	beq.n	8002200 <HAL_RCC_OscConfig+0x3ec>
 8002220:	e01b      	b.n	800225a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002222:	4b3d      	ldr	r3, [pc, #244]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 8002224:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002228:	4a3b      	ldr	r2, [pc, #236]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 800222a:	f023 0301 	bic.w	r3, r3, #1
 800222e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002232:	f7ff f841 	bl	80012b8 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223a:	f7ff f83d 	bl	80012b8 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e1b7      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800224c:	4b32      	ldr	r3, [pc, #200]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 800224e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1ef      	bne.n	800223a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 80a6 	beq.w	80023b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002268:	2300      	movs	r3, #0
 800226a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800226c:	4b2a      	ldr	r3, [pc, #168]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 800226e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10d      	bne.n	8002294 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002278:	4b27      	ldr	r3, [pc, #156]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 800227a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227c:	4a26      	ldr	r2, [pc, #152]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 800227e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002282:	6593      	str	r3, [r2, #88]	@ 0x58
 8002284:	4b24      	ldr	r3, [pc, #144]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002290:	2301      	movs	r3, #1
 8002292:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002294:	4b21      	ldr	r3, [pc, #132]	@ (800231c <HAL_RCC_OscConfig+0x508>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229c:	2b00      	cmp	r3, #0
 800229e:	d118      	bne.n	80022d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022a0:	4b1e      	ldr	r3, [pc, #120]	@ (800231c <HAL_RCC_OscConfig+0x508>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a1d      	ldr	r2, [pc, #116]	@ (800231c <HAL_RCC_OscConfig+0x508>)
 80022a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ac:	f7ff f804 	bl	80012b8 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b4:	f7ff f800 	bl	80012b8 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e17a      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c6:	4b15      	ldr	r3, [pc, #84]	@ (800231c <HAL_RCC_OscConfig+0x508>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d108      	bne.n	80022ec <HAL_RCC_OscConfig+0x4d8>
 80022da:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022ea:	e029      	b.n	8002340 <HAL_RCC_OscConfig+0x52c>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d115      	bne.n	8002320 <HAL_RCC_OscConfig+0x50c>
 80022f4:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022fa:	4a07      	ldr	r2, [pc, #28]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 80022fc:	f043 0304 	orr.w	r3, r3, #4
 8002300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002304:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800230a:	4a03      	ldr	r2, [pc, #12]	@ (8002318 <HAL_RCC_OscConfig+0x504>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002314:	e014      	b.n	8002340 <HAL_RCC_OscConfig+0x52c>
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	40007000 	.word	0x40007000
 8002320:	4b9c      	ldr	r3, [pc, #624]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002326:	4a9b      	ldr	r2, [pc, #620]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002330:	4b98      	ldr	r3, [pc, #608]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002336:	4a97      	ldr	r2, [pc, #604]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 8002338:	f023 0304 	bic.w	r3, r3, #4
 800233c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d016      	beq.n	8002376 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002348:	f7fe ffb6 	bl	80012b8 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800234e:	e00a      	b.n	8002366 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002350:	f7fe ffb2 	bl	80012b8 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e12a      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002366:	4b8b      	ldr	r3, [pc, #556]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 8002368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0ed      	beq.n	8002350 <HAL_RCC_OscConfig+0x53c>
 8002374:	e015      	b.n	80023a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002376:	f7fe ff9f 	bl	80012b8 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800237c:	e00a      	b.n	8002394 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237e:	f7fe ff9b 	bl	80012b8 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800238c:	4293      	cmp	r3, r2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e113      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002394:	4b7f      	ldr	r3, [pc, #508]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1ed      	bne.n	800237e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023a2:	7ffb      	ldrb	r3, [r7, #31]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d105      	bne.n	80023b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a8:	4b7a      	ldr	r3, [pc, #488]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 80023aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ac:	4a79      	ldr	r2, [pc, #484]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 80023ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023b2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80fe 	beq.w	80025ba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	f040 80d0 	bne.w	8002568 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023c8:	4b72      	ldr	r3, [pc, #456]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f003 0203 	and.w	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d8:	429a      	cmp	r2, r3
 80023da:	d130      	bne.n	800243e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	3b01      	subs	r3, #1
 80023e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d127      	bne.n	800243e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d11f      	bne.n	800243e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002408:	2a07      	cmp	r2, #7
 800240a:	bf14      	ite	ne
 800240c:	2201      	movne	r2, #1
 800240e:	2200      	moveq	r2, #0
 8002410:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002412:	4293      	cmp	r3, r2
 8002414:	d113      	bne.n	800243e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	3b01      	subs	r3, #1
 8002424:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d109      	bne.n	800243e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	085b      	lsrs	r3, r3, #1
 8002436:	3b01      	subs	r3, #1
 8002438:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800243a:	429a      	cmp	r2, r3
 800243c:	d06e      	beq.n	800251c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	2b0c      	cmp	r3, #12
 8002442:	d069      	beq.n	8002518 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002444:	4b53      	ldr	r3, [pc, #332]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d105      	bne.n	800245c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002450:	4b50      	ldr	r3, [pc, #320]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0ad      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002460:	4b4c      	ldr	r3, [pc, #304]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a4b      	ldr	r2, [pc, #300]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 8002466:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800246a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800246c:	f7fe ff24 	bl	80012b8 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002474:	f7fe ff20 	bl	80012b8 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e09a      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002486:	4b43      	ldr	r3, [pc, #268]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002492:	4b40      	ldr	r3, [pc, #256]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	4b40      	ldr	r3, [pc, #256]	@ (8002598 <HAL_RCC_OscConfig+0x784>)
 8002498:	4013      	ands	r3, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024a2:	3a01      	subs	r2, #1
 80024a4:	0112      	lsls	r2, r2, #4
 80024a6:	4311      	orrs	r1, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80024ac:	0212      	lsls	r2, r2, #8
 80024ae:	4311      	orrs	r1, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80024b4:	0852      	lsrs	r2, r2, #1
 80024b6:	3a01      	subs	r2, #1
 80024b8:	0552      	lsls	r2, r2, #21
 80024ba:	4311      	orrs	r1, r2
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80024c0:	0852      	lsrs	r2, r2, #1
 80024c2:	3a01      	subs	r2, #1
 80024c4:	0652      	lsls	r2, r2, #25
 80024c6:	4311      	orrs	r1, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80024cc:	0912      	lsrs	r2, r2, #4
 80024ce:	0452      	lsls	r2, r2, #17
 80024d0:	430a      	orrs	r2, r1
 80024d2:	4930      	ldr	r1, [pc, #192]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a2d      	ldr	r2, [pc, #180]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 80024de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 80024ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024f0:	f7fe fee2 	bl	80012b8 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f8:	f7fe fede 	bl	80012b8 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e058      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250a:	4b22      	ldr	r3, [pc, #136]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002516:	e050      	b.n	80025ba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e04f      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800251c:	4b1d      	ldr	r3, [pc, #116]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d148      	bne.n	80025ba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002528:	4b1a      	ldr	r3, [pc, #104]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a19      	ldr	r2, [pc, #100]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 800252e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002532:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002534:	4b17      	ldr	r3, [pc, #92]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4a16      	ldr	r2, [pc, #88]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 800253a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800253e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002540:	f7fe feba 	bl	80012b8 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002548:	f7fe feb6 	bl	80012b8 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e030      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255a:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x734>
 8002566:	e028      	b.n	80025ba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d023      	beq.n	80025b6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256e:	4b09      	ldr	r3, [pc, #36]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a08      	ldr	r2, [pc, #32]	@ (8002594 <HAL_RCC_OscConfig+0x780>)
 8002574:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257a:	f7fe fe9d 	bl	80012b8 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002580:	e00c      	b.n	800259c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002582:	f7fe fe99 	bl	80012b8 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d905      	bls.n	800259c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e013      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
 8002594:	40021000 	.word	0x40021000
 8002598:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800259c:	4b09      	ldr	r3, [pc, #36]	@ (80025c4 <HAL_RCC_OscConfig+0x7b0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1ec      	bne.n	8002582 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025a8:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <HAL_RCC_OscConfig+0x7b0>)
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	4905      	ldr	r1, [pc, #20]	@ (80025c4 <HAL_RCC_OscConfig+0x7b0>)
 80025ae:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <HAL_RCC_OscConfig+0x7b4>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	60cb      	str	r3, [r1, #12]
 80025b4:	e001      	b.n	80025ba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3720      	adds	r7, #32
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	feeefffc 	.word	0xfeeefffc

080025cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0e7      	b.n	80027b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e0:	4b75      	ldr	r3, [pc, #468]	@ (80027b8 <HAL_RCC_ClockConfig+0x1ec>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d910      	bls.n	8002610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	4b72      	ldr	r3, [pc, #456]	@ (80027b8 <HAL_RCC_ClockConfig+0x1ec>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 0207 	bic.w	r2, r3, #7
 80025f6:	4970      	ldr	r1, [pc, #448]	@ (80027b8 <HAL_RCC_ClockConfig+0x1ec>)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b6e      	ldr	r3, [pc, #440]	@ (80027b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0cf      	b.n	80027b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d010      	beq.n	800263e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	4b66      	ldr	r3, [pc, #408]	@ (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002628:	429a      	cmp	r2, r3
 800262a:	d908      	bls.n	800263e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262c:	4b63      	ldr	r3, [pc, #396]	@ (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	4960      	ldr	r1, [pc, #384]	@ (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 800263a:	4313      	orrs	r3, r2
 800263c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d04c      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b03      	cmp	r3, #3
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002652:	4b5a      	ldr	r3, [pc, #360]	@ (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d121      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0a6      	b.n	80027b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d107      	bne.n	800267a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800266a:	4b54      	ldr	r3, [pc, #336]	@ (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d115      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e09a      	b.n	80027b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d107      	bne.n	8002692 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002682:	4b4e      	ldr	r3, [pc, #312]	@ (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e08e      	b.n	80027b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002692:	4b4a      	ldr	r3, [pc, #296]	@ (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e086      	b.n	80027b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026a2:	4b46      	ldr	r3, [pc, #280]	@ (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f023 0203 	bic.w	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4943      	ldr	r1, [pc, #268]	@ (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b4:	f7fe fe00 	bl	80012b8 <HAL_GetTick>
 80026b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026bc:	f7fe fdfc 	bl	80012b8 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e06e      	b.n	80027b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d2:	4b3a      	ldr	r3, [pc, #232]	@ (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 020c 	and.w	r2, r3, #12
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d1eb      	bne.n	80026bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d010      	beq.n	8002712 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	4b31      	ldr	r3, [pc, #196]	@ (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d208      	bcs.n	8002712 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002700:	4b2e      	ldr	r3, [pc, #184]	@ (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	492b      	ldr	r1, [pc, #172]	@ (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002712:	4b29      	ldr	r3, [pc, #164]	@ (80027b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d210      	bcs.n	8002742 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002720:	4b25      	ldr	r3, [pc, #148]	@ (80027b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 0207 	bic.w	r2, r3, #7
 8002728:	4923      	ldr	r1, [pc, #140]	@ (80027b8 <HAL_RCC_ClockConfig+0x1ec>)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	4313      	orrs	r3, r2
 800272e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002730:	4b21      	ldr	r3, [pc, #132]	@ (80027b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d001      	beq.n	8002742 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e036      	b.n	80027b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	2b00      	cmp	r3, #0
 800274c:	d008      	beq.n	8002760 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274e:	4b1b      	ldr	r3, [pc, #108]	@ (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	4918      	ldr	r1, [pc, #96]	@ (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 800275c:	4313      	orrs	r3, r2
 800275e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d009      	beq.n	8002780 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800276c:	4b13      	ldr	r3, [pc, #76]	@ (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4910      	ldr	r1, [pc, #64]	@ (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 800277c:	4313      	orrs	r3, r2
 800277e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002780:	f000 f824 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	4b0d      	ldr	r3, [pc, #52]	@ (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	490b      	ldr	r1, [pc, #44]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f4>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
 800279c:	4a09      	ldr	r2, [pc, #36]	@ (80027c4 <HAL_RCC_ClockConfig+0x1f8>)
 800279e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027a0:	4b09      	ldr	r3, [pc, #36]	@ (80027c8 <HAL_RCC_ClockConfig+0x1fc>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe fd4b 	bl	8001240 <HAL_InitTick>
 80027aa:	4603      	mov	r3, r0
 80027ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80027ae:	7afb      	ldrb	r3, [r7, #11]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40022000 	.word	0x40022000
 80027bc:	40021000 	.word	0x40021000
 80027c0:	080063c0 	.word	0x080063c0
 80027c4:	20000004 	.word	0x20000004
 80027c8:	20000008 	.word	0x20000008

080027cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b089      	sub	sp, #36	@ 0x24
 80027d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027da:	4b3e      	ldr	r3, [pc, #248]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027e4:	4b3b      	ldr	r3, [pc, #236]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x34>
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	2b0c      	cmp	r3, #12
 80027f8:	d121      	bne.n	800283e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d11e      	bne.n	800283e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002800:	4b34      	ldr	r3, [pc, #208]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d107      	bne.n	800281c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800280c:	4b31      	ldr	r3, [pc, #196]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800280e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	e005      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800281c:	4b2d      	ldr	r3, [pc, #180]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002828:	4a2b      	ldr	r2, [pc, #172]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002830:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10d      	bne.n	8002854 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800283c:	e00a      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	2b04      	cmp	r3, #4
 8002842:	d102      	bne.n	800284a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002844:	4b25      	ldr	r3, [pc, #148]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x110>)
 8002846:	61bb      	str	r3, [r7, #24]
 8002848:	e004      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	2b08      	cmp	r3, #8
 800284e:	d101      	bne.n	8002854 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002850:	4b23      	ldr	r3, [pc, #140]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002852:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	2b0c      	cmp	r3, #12
 8002858:	d134      	bne.n	80028c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800285a:	4b1e      	ldr	r3, [pc, #120]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d003      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0xa6>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2b03      	cmp	r3, #3
 800286e:	d003      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0xac>
 8002870:	e005      	b.n	800287e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002872:	4b1a      	ldr	r3, [pc, #104]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x110>)
 8002874:	617b      	str	r3, [r7, #20]
      break;
 8002876:	e005      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002878:	4b19      	ldr	r3, [pc, #100]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800287a:	617b      	str	r3, [r7, #20]
      break;
 800287c:	e002      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	617b      	str	r3, [r7, #20]
      break;
 8002882:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002884:	4b13      	ldr	r3, [pc, #76]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	3301      	adds	r3, #1
 8002890:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002892:	4b10      	ldr	r3, [pc, #64]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	0a1b      	lsrs	r3, r3, #8
 8002898:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	fb03 f202 	mul.w	r2, r3, r2
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028aa:	4b0a      	ldr	r3, [pc, #40]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	0e5b      	lsrs	r3, r3, #25
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	3301      	adds	r3, #1
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028c4:	69bb      	ldr	r3, [r7, #24]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3724      	adds	r7, #36	@ 0x24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40021000 	.word	0x40021000
 80028d8:	080063d0 	.word	0x080063d0
 80028dc:	00f42400 	.word	0x00f42400
 80028e0:	017d7840 	.word	0x017d7840

080028e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028ec:	2300      	movs	r3, #0
 80028ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028f0:	4b2a      	ldr	r3, [pc, #168]	@ (800299c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028fc:	f7ff fa26 	bl	8001d4c <HAL_PWREx_GetVoltageRange>
 8002900:	6178      	str	r0, [r7, #20]
 8002902:	e014      	b.n	800292e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002904:	4b25      	ldr	r3, [pc, #148]	@ (800299c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002908:	4a24      	ldr	r2, [pc, #144]	@ (800299c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800290a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800290e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002910:	4b22      	ldr	r3, [pc, #136]	@ (800299c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800291c:	f7ff fa16 	bl	8001d4c <HAL_PWREx_GetVoltageRange>
 8002920:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002922:	4b1e      	ldr	r3, [pc, #120]	@ (800299c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002926:	4a1d      	ldr	r2, [pc, #116]	@ (800299c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002928:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800292c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002934:	d10b      	bne.n	800294e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b80      	cmp	r3, #128	@ 0x80
 800293a:	d919      	bls.n	8002970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002940:	d902      	bls.n	8002948 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002942:	2302      	movs	r3, #2
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	e013      	b.n	8002970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002948:	2301      	movs	r3, #1
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	e010      	b.n	8002970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b80      	cmp	r3, #128	@ 0x80
 8002952:	d902      	bls.n	800295a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002954:	2303      	movs	r3, #3
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	e00a      	b.n	8002970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b80      	cmp	r3, #128	@ 0x80
 800295e:	d102      	bne.n	8002966 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002960:	2302      	movs	r3, #2
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	e004      	b.n	8002970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b70      	cmp	r3, #112	@ 0x70
 800296a:	d101      	bne.n	8002970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800296c:	2301      	movs	r3, #1
 800296e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002970:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 0207 	bic.w	r2, r3, #7
 8002978:	4909      	ldr	r1, [pc, #36]	@ (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002980:	4b07      	ldr	r3, [pc, #28]	@ (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	429a      	cmp	r2, r3
 800298c:	d001      	beq.n	8002992 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40021000 	.word	0x40021000
 80029a0:	40022000 	.word	0x40022000

080029a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e095      	b.n	8002ae2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d108      	bne.n	80029d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029c6:	d009      	beq.n	80029dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	61da      	str	r2, [r3, #28]
 80029ce:	e005      	b.n	80029dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe fa04 	bl	8000e04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a1c:	d902      	bls.n	8002a24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	e002      	b.n	8002a2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002a32:	d007      	beq.n	8002a44 <HAL_SPI_Init+0xa0>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a3c:	d002      	beq.n	8002a44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a86:	ea42 0103 	orr.w	r1, r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	0c1b      	lsrs	r3, r3, #16
 8002aa0:	f003 0204 	and.w	r2, r3, #4
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002ac0:	ea42 0103 	orr.w	r1, r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	4613      	mov	r3, r2
 8002af8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_SPI_Transmit_DMA+0x20>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e0d4      	b.n	8002cb6 <HAL_SPI_Transmit_DMA+0x1ca>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d002      	beq.n	8002b26 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002b20:	2302      	movs	r3, #2
 8002b22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b24:	e0c2      	b.n	8002cac <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <HAL_SPI_Transmit_DMA+0x46>
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b36:	e0b9      	b.n	8002cac <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	88fa      	ldrh	r2, [r7, #6]
 8002b50:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	88fa      	ldrh	r2, [r7, #6]
 8002b56:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b82:	d10f      	bne.n	8002ba4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ba2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba8:	4a45      	ldr	r2, [pc, #276]	@ (8002cc0 <HAL_SPI_Transmit_DMA+0x1d4>)
 8002baa:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb0:	4a44      	ldr	r2, [pc, #272]	@ (8002cc4 <HAL_SPI_Transmit_DMA+0x1d8>)
 8002bb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb8:	4a43      	ldr	r2, [pc, #268]	@ (8002cc8 <HAL_SPI_Transmit_DMA+0x1dc>)
 8002bba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002bd2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002bdc:	d82d      	bhi.n	8002c3a <HAL_SPI_Transmit_DMA+0x14e>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002be8:	d127      	bne.n	8002c3a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10f      	bne.n	8002c18 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c06:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	085b      	lsrs	r3, r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c16:	e010      	b.n	8002c3a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c26:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	085b      	lsrs	r3, r3, #1
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c42:	4619      	mov	r1, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c50:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002c52:	f7fe fd39 	bl	80016c8 <HAL_DMA_Start_IT>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c60:	f043 0210 	orr.w	r2, r3, #16
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002c6c:	e01e      	b.n	8002cac <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c78:	2b40      	cmp	r3, #64	@ 0x40
 8002c7a:	d007      	beq.n	8002c8c <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c8a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0220 	orr.w	r2, r2, #32
 8002c9a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0202 	orr.w	r2, r2, #2
 8002caa:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	08002f83 	.word	0x08002f83
 8002cc4:	08002edd 	.word	0x08002edd
 8002cc8:	08002f9f 	.word	0x08002f9f

08002ccc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10e      	bne.n	8002d0c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d009      	beq.n	8002d0c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d004      	beq.n	8002d0c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	4798      	blx	r3
    return;
 8002d0a:	e0ce      	b.n	8002eaa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_SPI_IRQHandler+0x5e>
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d004      	beq.n	8002d2a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	4798      	blx	r3
    return;
 8002d28:	e0bf      	b.n	8002eaa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <HAL_SPI_IRQHandler+0x7e>
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d105      	bne.n	8002d4a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80b0 	beq.w	8002eaa <HAL_SPI_IRQHandler+0x1de>
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80aa 	beq.w	8002eaa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d023      	beq.n	8002da8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d011      	beq.n	8002d90 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d70:	f043 0204 	orr.w	r2, r3, #4
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	e00b      	b.n	8002da8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	693b      	ldr	r3, [r7, #16]
        return;
 8002da6:	e080      	b.n	8002eaa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d014      	beq.n	8002ddc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00c      	beq.n	8002e00 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dea:	f043 0208 	orr.w	r2, r3, #8
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d04f      	beq.n	8002ea8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e16:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d104      	bne.n	8002e34 <HAL_SPI_IRQHandler+0x168>
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d034      	beq.n	8002e9e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0203 	bic.w	r2, r2, #3
 8002e42:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d011      	beq.n	8002e70 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e50:	4a17      	ldr	r2, [pc, #92]	@ (8002eb0 <HAL_SPI_IRQHandler+0x1e4>)
 8002e52:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe fc95 	bl	8001788 <HAL_DMA_Abort_IT>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e68:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d016      	beq.n	8002ea6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8002eb0 <HAL_SPI_IRQHandler+0x1e4>)
 8002e7e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe fc7f 	bl	8001788 <HAL_DMA_Abort_IT>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e94:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002e9c:	e003      	b.n	8002ea6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f812 	bl	8002ec8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002ea4:	e000      	b.n	8002ea8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002ea6:	bf00      	nop
    return;
 8002ea8:	bf00      	nop
  }
}
 8002eaa:	3720      	adds	r7, #32
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	08002fdf 	.word	0x08002fdf

08002eb4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eea:	f7fe f9e5 	bl	80012b8 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	d03b      	beq.n	8002f76 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0220 	bic.w	r2, r2, #32
 8002f0c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0202 	bic.w	r2, r2, #2
 8002f1c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	2164      	movs	r1, #100	@ 0x64
 8002f22:	6978      	ldr	r0, [r7, #20]
 8002f24:	f000 f98e 	bl	8003244 <SPI_EndRxTxTransaction>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f32:	f043 0220 	orr.w	r2, r3, #32
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10a      	bne.n	8002f58 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002f6e:	6978      	ldr	r0, [r7, #20]
 8002f70:	f7ff ffaa 	bl	8002ec8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002f74:	e002      	b.n	8002f7c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002f76:	6978      	ldr	r0, [r7, #20]
 8002f78:	f7fd fc50 	bl	800081c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7ff ff8f 	bl	8002eb4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0203 	bic.w	r2, r2, #3
 8002fba:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc0:	f043 0210 	orr.w	r2, r3, #16
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f7ff ff79 	bl	8002ec8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fea:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f7ff ff64 	bl	8002ec8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003000:	bf00      	nop
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003018:	f7fe f94e 	bl	80012b8 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	4413      	add	r3, r2
 8003026:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003028:	f7fe f946 	bl	80012b8 <HAL_GetTick>
 800302c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800302e:	4b39      	ldr	r3, [pc, #228]	@ (8003114 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	015b      	lsls	r3, r3, #5
 8003034:	0d1b      	lsrs	r3, r3, #20
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	fb02 f303 	mul.w	r3, r2, r3
 800303c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800303e:	e054      	b.n	80030ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003046:	d050      	beq.n	80030ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003048:	f7fe f936 	bl	80012b8 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	429a      	cmp	r2, r3
 8003056:	d902      	bls.n	800305e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d13d      	bne.n	80030da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800306c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003076:	d111      	bne.n	800309c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003080:	d004      	beq.n	800308c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800308a:	d107      	bne.n	800309c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800309a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030a4:	d10f      	bne.n	80030c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e017      	b.n	800310a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4013      	ands	r3, r2
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	bf0c      	ite	eq
 80030fa:	2301      	moveq	r3, #1
 80030fc:	2300      	movne	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	429a      	cmp	r2, r3
 8003106:	d19b      	bne.n	8003040 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3720      	adds	r7, #32
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000004 	.word	0x20000004

08003118 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	@ 0x28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800312a:	f7fe f8c5 	bl	80012b8 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	4413      	add	r3, r2
 8003138:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800313a:	f7fe f8bd 	bl	80012b8 <HAL_GetTick>
 800313e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	330c      	adds	r3, #12
 8003146:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003148:	4b3d      	ldr	r3, [pc, #244]	@ (8003240 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	00da      	lsls	r2, r3, #3
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	0d1b      	lsrs	r3, r3, #20
 8003158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003160:	e060      	b.n	8003224 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003168:	d107      	bne.n	800317a <SPI_WaitFifoStateUntilTimeout+0x62>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d104      	bne.n	800317a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003178:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003180:	d050      	beq.n	8003224 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003182:	f7fe f899 	bl	80012b8 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800318e:	429a      	cmp	r2, r3
 8003190:	d902      	bls.n	8003198 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	2b00      	cmp	r3, #0
 8003196:	d13d      	bne.n	8003214 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031b0:	d111      	bne.n	80031d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031ba:	d004      	beq.n	80031c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031c4:	d107      	bne.n	80031d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031de:	d10f      	bne.n	8003200 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e010      	b.n	8003236 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	3b01      	subs	r3, #1
 8003222:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	4013      	ands	r3, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	429a      	cmp	r2, r3
 8003232:	d196      	bne.n	8003162 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3728      	adds	r7, #40	@ 0x28
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000004 	.word	0x20000004

08003244 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2200      	movs	r2, #0
 8003258:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f7ff ff5b 	bl	8003118 <SPI_WaitFifoStateUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d007      	beq.n	8003278 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800326c:	f043 0220 	orr.w	r2, r3, #32
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e027      	b.n	80032c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2200      	movs	r2, #0
 8003280:	2180      	movs	r1, #128	@ 0x80
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f7ff fec0 	bl	8003008 <SPI_WaitFlagStateUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003292:	f043 0220 	orr.w	r2, r3, #32
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e014      	b.n	80032c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f7ff ff34 	bl	8003118 <SPI_WaitFifoStateUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ba:	f043 0220 	orr.w	r2, r3, #32
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e000      	b.n	80032c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e049      	b.n	8003376 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fd fdfc 	bl	8000ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	4619      	mov	r1, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f000 fa9a 	bl	8003848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d001      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e04f      	b.n	8003438 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a23      	ldr	r2, [pc, #140]	@ (8003444 <HAL_TIM_Base_Start_IT+0xc4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d01d      	beq.n	80033f6 <HAL_TIM_Base_Start_IT+0x76>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033c2:	d018      	beq.n	80033f6 <HAL_TIM_Base_Start_IT+0x76>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003448 <HAL_TIM_Base_Start_IT+0xc8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d013      	beq.n	80033f6 <HAL_TIM_Base_Start_IT+0x76>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1e      	ldr	r2, [pc, #120]	@ (800344c <HAL_TIM_Base_Start_IT+0xcc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00e      	beq.n	80033f6 <HAL_TIM_Base_Start_IT+0x76>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003450 <HAL_TIM_Base_Start_IT+0xd0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d009      	beq.n	80033f6 <HAL_TIM_Base_Start_IT+0x76>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003454 <HAL_TIM_Base_Start_IT+0xd4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d004      	beq.n	80033f6 <HAL_TIM_Base_Start_IT+0x76>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a19      	ldr	r2, [pc, #100]	@ (8003458 <HAL_TIM_Base_Start_IT+0xd8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d115      	bne.n	8003422 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	4b17      	ldr	r3, [pc, #92]	@ (800345c <HAL_TIM_Base_Start_IT+0xdc>)
 80033fe:	4013      	ands	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b06      	cmp	r3, #6
 8003406:	d015      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0xb4>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800340e:	d011      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003420:	e008      	b.n	8003434 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0201 	orr.w	r2, r2, #1
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e000      	b.n	8003436 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003434:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	40012c00 	.word	0x40012c00
 8003448:	40000400 	.word	0x40000400
 800344c:	40000800 	.word	0x40000800
 8003450:	40000c00 	.word	0x40000c00
 8003454:	40013400 	.word	0x40013400
 8003458:	40014000 	.word	0x40014000
 800345c:	00010007 	.word	0x00010007

08003460 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d020      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01b      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0202 	mvn.w	r2, #2
 8003494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f9ad 	bl	800380a <HAL_TIM_IC_CaptureCallback>
 80034b0:	e005      	b.n	80034be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f99f 	bl	80037f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f9b0 	bl	800381e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d020      	beq.n	8003510 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01b      	beq.n	8003510 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0204 	mvn.w	r2, #4
 80034e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2202      	movs	r2, #2
 80034e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f987 	bl	800380a <HAL_TIM_IC_CaptureCallback>
 80034fc:	e005      	b.n	800350a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f979 	bl	80037f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f98a 	bl	800381e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d020      	beq.n	800355c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d01b      	beq.n	800355c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0208 	mvn.w	r2, #8
 800352c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2204      	movs	r2, #4
 8003532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f961 	bl	800380a <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f953 	bl	80037f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f964 	bl	800381e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b00      	cmp	r3, #0
 8003564:	d020      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01b      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0210 	mvn.w	r2, #16
 8003578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2208      	movs	r2, #8
 800357e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f93b 	bl	800380a <HAL_TIM_IC_CaptureCallback>
 8003594:	e005      	b.n	80035a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f92d 	bl	80037f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f93e 	bl	800381e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00c      	beq.n	80035cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0201 	mvn.w	r2, #1
 80035c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fd f996 	bl	80008f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00c      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80035e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 faf2 	bl	8003bd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00c      	beq.n	8003614 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800360c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 faea 	bl	8003be8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00c      	beq.n	8003638 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f8fd 	bl	8003832 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00c      	beq.n	800365c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b00      	cmp	r3, #0
 800364a:	d007      	beq.n	800365c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0220 	mvn.w	r2, #32
 8003654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fab2 	bl	8003bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_TIM_ConfigClockSource+0x1c>
 800367c:	2302      	movs	r3, #2
 800367e:	e0b6      	b.n	80037ee <HAL_TIM_ConfigClockSource+0x18a>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800369e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036bc:	d03e      	beq.n	800373c <HAL_TIM_ConfigClockSource+0xd8>
 80036be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036c2:	f200 8087 	bhi.w	80037d4 <HAL_TIM_ConfigClockSource+0x170>
 80036c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ca:	f000 8086 	beq.w	80037da <HAL_TIM_ConfigClockSource+0x176>
 80036ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036d2:	d87f      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x170>
 80036d4:	2b70      	cmp	r3, #112	@ 0x70
 80036d6:	d01a      	beq.n	800370e <HAL_TIM_ConfigClockSource+0xaa>
 80036d8:	2b70      	cmp	r3, #112	@ 0x70
 80036da:	d87b      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x170>
 80036dc:	2b60      	cmp	r3, #96	@ 0x60
 80036de:	d050      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x11e>
 80036e0:	2b60      	cmp	r3, #96	@ 0x60
 80036e2:	d877      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x170>
 80036e4:	2b50      	cmp	r3, #80	@ 0x50
 80036e6:	d03c      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0xfe>
 80036e8:	2b50      	cmp	r3, #80	@ 0x50
 80036ea:	d873      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x170>
 80036ec:	2b40      	cmp	r3, #64	@ 0x40
 80036ee:	d058      	beq.n	80037a2 <HAL_TIM_ConfigClockSource+0x13e>
 80036f0:	2b40      	cmp	r3, #64	@ 0x40
 80036f2:	d86f      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x170>
 80036f4:	2b30      	cmp	r3, #48	@ 0x30
 80036f6:	d064      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0x15e>
 80036f8:	2b30      	cmp	r3, #48	@ 0x30
 80036fa:	d86b      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x170>
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d060      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0x15e>
 8003700:	2b20      	cmp	r3, #32
 8003702:	d867      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x170>
 8003704:	2b00      	cmp	r3, #0
 8003706:	d05c      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0x15e>
 8003708:	2b10      	cmp	r3, #16
 800370a:	d05a      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0x15e>
 800370c:	e062      	b.n	80037d4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800371e:	f000 f9a7 	bl	8003a70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003730:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	609a      	str	r2, [r3, #8]
      break;
 800373a:	e04f      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800374c:	f000 f990 	bl	8003a70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800375e:	609a      	str	r2, [r3, #8]
      break;
 8003760:	e03c      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800376e:	461a      	mov	r2, r3
 8003770:	f000 f904 	bl	800397c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2150      	movs	r1, #80	@ 0x50
 800377a:	4618      	mov	r0, r3
 800377c:	f000 f95d 	bl	8003a3a <TIM_ITRx_SetConfig>
      break;
 8003780:	e02c      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800378e:	461a      	mov	r2, r3
 8003790:	f000 f923 	bl	80039da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2160      	movs	r1, #96	@ 0x60
 800379a:	4618      	mov	r0, r3
 800379c:	f000 f94d 	bl	8003a3a <TIM_ITRx_SetConfig>
      break;
 80037a0:	e01c      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ae:	461a      	mov	r2, r3
 80037b0:	f000 f8e4 	bl	800397c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2140      	movs	r1, #64	@ 0x40
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f93d 	bl	8003a3a <TIM_ITRx_SetConfig>
      break;
 80037c0:	e00c      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4619      	mov	r1, r3
 80037cc:	4610      	mov	r0, r2
 80037ce:	f000 f934 	bl	8003a3a <TIM_ITRx_SetConfig>
      break;
 80037d2:	e003      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
      break;
 80037d8:	e000      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80037da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a40      	ldr	r2, [pc, #256]	@ (800395c <TIM_Base_SetConfig+0x114>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d013      	beq.n	8003888 <TIM_Base_SetConfig+0x40>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003866:	d00f      	beq.n	8003888 <TIM_Base_SetConfig+0x40>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a3d      	ldr	r2, [pc, #244]	@ (8003960 <TIM_Base_SetConfig+0x118>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00b      	beq.n	8003888 <TIM_Base_SetConfig+0x40>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a3c      	ldr	r2, [pc, #240]	@ (8003964 <TIM_Base_SetConfig+0x11c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d007      	beq.n	8003888 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a3b      	ldr	r2, [pc, #236]	@ (8003968 <TIM_Base_SetConfig+0x120>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d003      	beq.n	8003888 <TIM_Base_SetConfig+0x40>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a3a      	ldr	r2, [pc, #232]	@ (800396c <TIM_Base_SetConfig+0x124>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d108      	bne.n	800389a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800388e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a2f      	ldr	r2, [pc, #188]	@ (800395c <TIM_Base_SetConfig+0x114>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d01f      	beq.n	80038e2 <TIM_Base_SetConfig+0x9a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a8:	d01b      	beq.n	80038e2 <TIM_Base_SetConfig+0x9a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003960 <TIM_Base_SetConfig+0x118>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d017      	beq.n	80038e2 <TIM_Base_SetConfig+0x9a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003964 <TIM_Base_SetConfig+0x11c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <TIM_Base_SetConfig+0x9a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003968 <TIM_Base_SetConfig+0x120>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00f      	beq.n	80038e2 <TIM_Base_SetConfig+0x9a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a29      	ldr	r2, [pc, #164]	@ (800396c <TIM_Base_SetConfig+0x124>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00b      	beq.n	80038e2 <TIM_Base_SetConfig+0x9a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a28      	ldr	r2, [pc, #160]	@ (8003970 <TIM_Base_SetConfig+0x128>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d007      	beq.n	80038e2 <TIM_Base_SetConfig+0x9a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a27      	ldr	r2, [pc, #156]	@ (8003974 <TIM_Base_SetConfig+0x12c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d003      	beq.n	80038e2 <TIM_Base_SetConfig+0x9a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a26      	ldr	r2, [pc, #152]	@ (8003978 <TIM_Base_SetConfig+0x130>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d108      	bne.n	80038f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a10      	ldr	r2, [pc, #64]	@ (800395c <TIM_Base_SetConfig+0x114>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00f      	beq.n	8003940 <TIM_Base_SetConfig+0xf8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a12      	ldr	r2, [pc, #72]	@ (800396c <TIM_Base_SetConfig+0x124>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d00b      	beq.n	8003940 <TIM_Base_SetConfig+0xf8>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a11      	ldr	r2, [pc, #68]	@ (8003970 <TIM_Base_SetConfig+0x128>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d007      	beq.n	8003940 <TIM_Base_SetConfig+0xf8>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a10      	ldr	r2, [pc, #64]	@ (8003974 <TIM_Base_SetConfig+0x12c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d003      	beq.n	8003940 <TIM_Base_SetConfig+0xf8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a0f      	ldr	r2, [pc, #60]	@ (8003978 <TIM_Base_SetConfig+0x130>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d103      	bne.n	8003948 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	615a      	str	r2, [r3, #20]
}
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40012c00 	.word	0x40012c00
 8003960:	40000400 	.word	0x40000400
 8003964:	40000800 	.word	0x40000800
 8003968:	40000c00 	.word	0x40000c00
 800396c:	40013400 	.word	0x40013400
 8003970:	40014000 	.word	0x40014000
 8003974:	40014400 	.word	0x40014400
 8003978:	40014800 	.word	0x40014800

0800397c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f023 0201 	bic.w	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 030a 	bic.w	r3, r3, #10
 80039b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	621a      	str	r2, [r3, #32]
}
 80039ce:	bf00      	nop
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039da:	b480      	push	{r7}
 80039dc:	b087      	sub	sp, #28
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f023 0210 	bic.w	r2, r3, #16
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	031b      	lsls	r3, r3, #12
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	621a      	str	r2, [r3, #32]
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b085      	sub	sp, #20
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f043 0307 	orr.w	r3, r3, #7
 8003a5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	609a      	str	r2, [r3, #8]
}
 8003a64:	bf00      	nop
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	021a      	lsls	r2, r3, #8
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	609a      	str	r2, [r3, #8]
}
 8003aa4:	bf00      	nop
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e068      	b.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a2e      	ldr	r2, [pc, #184]	@ (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d004      	beq.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a2d      	ldr	r2, [pc, #180]	@ (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d108      	bne.n	8003b0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003b02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d01d      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b3a:	d018      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1b      	ldr	r2, [pc, #108]	@ (8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1a      	ldr	r2, [pc, #104]	@ (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00e      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a18      	ldr	r2, [pc, #96]	@ (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d009      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a13      	ldr	r2, [pc, #76]	@ (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a14      	ldr	r2, [pc, #80]	@ (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d10c      	bne.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40012c00 	.word	0x40012c00
 8003bac:	40013400 	.word	0x40013400
 8003bb0:	40000400 	.word	0x40000400
 8003bb4:	40000800 	.word	0x40000800
 8003bb8:	40000c00 	.word	0x40000c00
 8003bbc:	40014000 	.word	0x40014000

08003bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08a      	sub	sp, #40	@ 0x28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c08:	f001 fc0c 	bl	8005424 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c0c:	4b5c      	ldr	r3, [pc, #368]	@ (8003d80 <pvPortMalloc+0x184>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c14:	f000 f924 	bl	8003e60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c18:	4b5a      	ldr	r3, [pc, #360]	@ (8003d84 <pvPortMalloc+0x188>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f040 8095 	bne.w	8003d50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01e      	beq.n	8003c6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003c2c:	2208      	movs	r2, #8
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4413      	add	r3, r2
 8003c32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d015      	beq.n	8003c6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f023 0307 	bic.w	r3, r3, #7
 8003c44:	3308      	adds	r3, #8
 8003c46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop
 8003c68:	e7fd      	b.n	8003c66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d06f      	beq.n	8003d50 <pvPortMalloc+0x154>
 8003c70:	4b45      	ldr	r3, [pc, #276]	@ (8003d88 <pvPortMalloc+0x18c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d86a      	bhi.n	8003d50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003c7a:	4b44      	ldr	r3, [pc, #272]	@ (8003d8c <pvPortMalloc+0x190>)
 8003c7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003c7e:	4b43      	ldr	r3, [pc, #268]	@ (8003d8c <pvPortMalloc+0x190>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c84:	e004      	b.n	8003c90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d903      	bls.n	8003ca2 <pvPortMalloc+0xa6>
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f1      	bne.n	8003c86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003ca2:	4b37      	ldr	r3, [pc, #220]	@ (8003d80 <pvPortMalloc+0x184>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d051      	beq.n	8003d50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2208      	movs	r2, #8
 8003cb2:	4413      	add	r3, r2
 8003cb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	1ad2      	subs	r2, r2, r3
 8003cc6:	2308      	movs	r3, #8
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d920      	bls.n	8003d10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00b      	beq.n	8003cf8 <pvPortMalloc+0xfc>
	__asm volatile
 8003ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	613b      	str	r3, [r7, #16]
}
 8003cf2:	bf00      	nop
 8003cf4:	bf00      	nop
 8003cf6:	e7fd      	b.n	8003cf4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	1ad2      	subs	r2, r2, r3
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d0a:	69b8      	ldr	r0, [r7, #24]
 8003d0c:	f000 f90a 	bl	8003f24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d10:	4b1d      	ldr	r3, [pc, #116]	@ (8003d88 <pvPortMalloc+0x18c>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8003d88 <pvPortMalloc+0x18c>)
 8003d1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003d88 <pvPortMalloc+0x18c>)
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	4b1b      	ldr	r3, [pc, #108]	@ (8003d90 <pvPortMalloc+0x194>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d203      	bcs.n	8003d32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d2a:	4b17      	ldr	r3, [pc, #92]	@ (8003d88 <pvPortMalloc+0x18c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a18      	ldr	r2, [pc, #96]	@ (8003d90 <pvPortMalloc+0x194>)
 8003d30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	4b13      	ldr	r3, [pc, #76]	@ (8003d84 <pvPortMalloc+0x188>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003d46:	4b13      	ldr	r3, [pc, #76]	@ (8003d94 <pvPortMalloc+0x198>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	4a11      	ldr	r2, [pc, #68]	@ (8003d94 <pvPortMalloc+0x198>)
 8003d4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d50:	f001 fbb0 	bl	80054b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00b      	beq.n	8003d76 <pvPortMalloc+0x17a>
	__asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	60fb      	str	r3, [r7, #12]
}
 8003d70:	bf00      	nop
 8003d72:	bf00      	nop
 8003d74:	e7fd      	b.n	8003d72 <pvPortMalloc+0x176>
	return pvReturn;
 8003d76:	69fb      	ldr	r3, [r7, #28]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3728      	adds	r7, #40	@ 0x28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20011e44 	.word	0x20011e44
 8003d84:	20011e58 	.word	0x20011e58
 8003d88:	20011e48 	.word	0x20011e48
 8003d8c:	20011e3c 	.word	0x20011e3c
 8003d90:	20011e4c 	.word	0x20011e4c
 8003d94:	20011e50 	.word	0x20011e50

08003d98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d04f      	beq.n	8003e4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003daa:	2308      	movs	r3, #8
 8003dac:	425b      	negs	r3, r3
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4413      	add	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	4b25      	ldr	r3, [pc, #148]	@ (8003e54 <vPortFree+0xbc>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10b      	bne.n	8003dde <vPortFree+0x46>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	60fb      	str	r3, [r7, #12]
}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	e7fd      	b.n	8003dda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00b      	beq.n	8003dfe <vPortFree+0x66>
	__asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	60bb      	str	r3, [r7, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	e7fd      	b.n	8003dfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	4b14      	ldr	r3, [pc, #80]	@ (8003e54 <vPortFree+0xbc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01e      	beq.n	8003e4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d11a      	bne.n	8003e4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	4b0e      	ldr	r3, [pc, #56]	@ (8003e54 <vPortFree+0xbc>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	401a      	ands	r2, r3
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e24:	f001 fafe 	bl	8005424 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e58 <vPortFree+0xc0>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4413      	add	r3, r2
 8003e32:	4a09      	ldr	r2, [pc, #36]	@ (8003e58 <vPortFree+0xc0>)
 8003e34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e36:	6938      	ldr	r0, [r7, #16]
 8003e38:	f000 f874 	bl	8003f24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003e3c:	4b07      	ldr	r3, [pc, #28]	@ (8003e5c <vPortFree+0xc4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3301      	adds	r3, #1
 8003e42:	4a06      	ldr	r2, [pc, #24]	@ (8003e5c <vPortFree+0xc4>)
 8003e44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003e46:	f001 fb35 	bl	80054b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003e4a:	bf00      	nop
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20011e58 	.word	0x20011e58
 8003e58:	20011e48 	.word	0x20011e48
 8003e5c:	20011e54 	.word	0x20011e54

08003e60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e66:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003e6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003e6c:	4b27      	ldr	r3, [pc, #156]	@ (8003f0c <prvHeapInit+0xac>)
 8003e6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00c      	beq.n	8003e94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3307      	adds	r3, #7
 8003e7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0307 	bic.w	r3, r3, #7
 8003e86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8003f0c <prvHeapInit+0xac>)
 8003e90:	4413      	add	r3, r2
 8003e92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e98:	4a1d      	ldr	r2, [pc, #116]	@ (8003f10 <prvHeapInit+0xb0>)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8003f10 <prvHeapInit+0xb0>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003eac:	2208      	movs	r2, #8
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0307 	bic.w	r3, r3, #7
 8003eba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4a15      	ldr	r2, [pc, #84]	@ (8003f14 <prvHeapInit+0xb4>)
 8003ec0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003ec2:	4b14      	ldr	r3, [pc, #80]	@ (8003f14 <prvHeapInit+0xb4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003eca:	4b12      	ldr	r3, [pc, #72]	@ (8003f14 <prvHeapInit+0xb4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	1ad2      	subs	r2, r2, r3
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f14 <prvHeapInit+0xb4>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	4a0a      	ldr	r2, [pc, #40]	@ (8003f18 <prvHeapInit+0xb8>)
 8003eee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	4a09      	ldr	r2, [pc, #36]	@ (8003f1c <prvHeapInit+0xbc>)
 8003ef6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ef8:	4b09      	ldr	r3, [pc, #36]	@ (8003f20 <prvHeapInit+0xc0>)
 8003efa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003efe:	601a      	str	r2, [r3, #0]
}
 8003f00:	bf00      	nop
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	200033dc 	.word	0x200033dc
 8003f10:	20011e3c 	.word	0x20011e3c
 8003f14:	20011e44 	.word	0x20011e44
 8003f18:	20011e4c 	.word	0x20011e4c
 8003f1c:	20011e48 	.word	0x20011e48
 8003f20:	20011e58 	.word	0x20011e58

08003f24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f2c:	4b28      	ldr	r3, [pc, #160]	@ (8003fd0 <prvInsertBlockIntoFreeList+0xac>)
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	e002      	b.n	8003f38 <prvInsertBlockIntoFreeList+0x14>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d8f7      	bhi.n	8003f32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d108      	bne.n	8003f66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	441a      	add	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	441a      	add	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d118      	bne.n	8003fac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4b15      	ldr	r3, [pc, #84]	@ (8003fd4 <prvInsertBlockIntoFreeList+0xb0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d00d      	beq.n	8003fa2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	441a      	add	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	e008      	b.n	8003fb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd4 <prvInsertBlockIntoFreeList+0xb0>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e003      	b.n	8003fb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d002      	beq.n	8003fc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fc2:	bf00      	nop
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20011e3c 	.word	0x20011e3c
 8003fd4:	20011e44 	.word	0x20011e44

08003fd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f103 0208 	add.w	r2, r3, #8
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ff0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f103 0208 	add.w	r2, r3, #8
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f103 0208 	add.w	r2, r3, #8
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004032:	b480      	push	{r7}
 8004034:	b085      	sub	sp, #20
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	601a      	str	r2, [r3, #0]
}
 800406e:	bf00      	nop
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800407a:	b480      	push	{r7}
 800407c:	b085      	sub	sp, #20
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004090:	d103      	bne.n	800409a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	e00c      	b.n	80040b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3308      	adds	r3, #8
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	e002      	b.n	80040a8 <vListInsert+0x2e>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d2f6      	bcs.n	80040a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	601a      	str	r2, [r3, #0]
}
 80040e0:	bf00      	nop
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6892      	ldr	r2, [r2, #8]
 8004102:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6852      	ldr	r2, [r2, #4]
 800410c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	429a      	cmp	r2, r3
 8004116:	d103      	bne.n	8004120 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	1e5a      	subs	r2, r3, #1
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3b04      	subs	r3, #4
 8004150:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3b04      	subs	r3, #4
 800415e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f023 0201 	bic.w	r2, r3, #1
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3b04      	subs	r3, #4
 800416e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004170:	4a0c      	ldr	r2, [pc, #48]	@ (80041a4 <pxPortInitialiseStack+0x64>)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3b14      	subs	r3, #20
 800417a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3b04      	subs	r3, #4
 8004186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f06f 0202 	mvn.w	r2, #2
 800418e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3b20      	subs	r3, #32
 8004194:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004196:	68fb      	ldr	r3, [r7, #12]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	080041a9 	.word	0x080041a9

080041a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041b2:	4b13      	ldr	r3, [pc, #76]	@ (8004200 <prvTaskExitError+0x58>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041ba:	d00b      	beq.n	80041d4 <prvTaskExitError+0x2c>
	__asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	60fb      	str	r3, [r7, #12]
}
 80041ce:	bf00      	nop
 80041d0:	bf00      	nop
 80041d2:	e7fd      	b.n	80041d0 <prvTaskExitError+0x28>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	60bb      	str	r3, [r7, #8]
}
 80041e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80041e8:	bf00      	nop
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0fc      	beq.n	80041ea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041f0:	bf00      	nop
 80041f2:	bf00      	nop
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	20000010 	.word	0x20000010
	...

08004210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004210:	4b07      	ldr	r3, [pc, #28]	@ (8004230 <pxCurrentTCBConst2>)
 8004212:	6819      	ldr	r1, [r3, #0]
 8004214:	6808      	ldr	r0, [r1, #0]
 8004216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800421a:	f380 8809 	msr	PSP, r0
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	f04f 0000 	mov.w	r0, #0
 8004226:	f380 8811 	msr	BASEPRI, r0
 800422a:	4770      	bx	lr
 800422c:	f3af 8000 	nop.w

08004230 <pxCurrentTCBConst2>:
 8004230:	20011e70 	.word	0x20011e70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004234:	bf00      	nop
 8004236:	bf00      	nop

08004238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004238:	4808      	ldr	r0, [pc, #32]	@ (800425c <prvPortStartFirstTask+0x24>)
 800423a:	6800      	ldr	r0, [r0, #0]
 800423c:	6800      	ldr	r0, [r0, #0]
 800423e:	f380 8808 	msr	MSP, r0
 8004242:	f04f 0000 	mov.w	r0, #0
 8004246:	f380 8814 	msr	CONTROL, r0
 800424a:	b662      	cpsie	i
 800424c:	b661      	cpsie	f
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	df00      	svc	0
 8004258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800425a:	bf00      	nop
 800425c:	e000ed08 	.word	0xe000ed08

08004260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004266:	4b47      	ldr	r3, [pc, #284]	@ (8004384 <xPortStartScheduler+0x124>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a47      	ldr	r2, [pc, #284]	@ (8004388 <xPortStartScheduler+0x128>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d10b      	bne.n	8004288 <xPortStartScheduler+0x28>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	613b      	str	r3, [r7, #16]
}
 8004282:	bf00      	nop
 8004284:	bf00      	nop
 8004286:	e7fd      	b.n	8004284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004288:	4b3e      	ldr	r3, [pc, #248]	@ (8004384 <xPortStartScheduler+0x124>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a3f      	ldr	r2, [pc, #252]	@ (800438c <xPortStartScheduler+0x12c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d10b      	bne.n	80042aa <xPortStartScheduler+0x4a>
	__asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	60fb      	str	r3, [r7, #12]
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop
 80042a8:	e7fd      	b.n	80042a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042aa:	4b39      	ldr	r3, [pc, #228]	@ (8004390 <xPortStartScheduler+0x130>)
 80042ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	22ff      	movs	r2, #255	@ 0xff
 80042ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	4b31      	ldr	r3, [pc, #196]	@ (8004394 <xPortStartScheduler+0x134>)
 80042d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042d2:	4b31      	ldr	r3, [pc, #196]	@ (8004398 <xPortStartScheduler+0x138>)
 80042d4:	2207      	movs	r2, #7
 80042d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042d8:	e009      	b.n	80042ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80042da:	4b2f      	ldr	r3, [pc, #188]	@ (8004398 <xPortStartScheduler+0x138>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3b01      	subs	r3, #1
 80042e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004398 <xPortStartScheduler+0x138>)
 80042e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042ee:	78fb      	ldrb	r3, [r7, #3]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f6:	2b80      	cmp	r3, #128	@ 0x80
 80042f8:	d0ef      	beq.n	80042da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042fa:	4b27      	ldr	r3, [pc, #156]	@ (8004398 <xPortStartScheduler+0x138>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f1c3 0307 	rsb	r3, r3, #7
 8004302:	2b04      	cmp	r3, #4
 8004304:	d00b      	beq.n	800431e <xPortStartScheduler+0xbe>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	60bb      	str	r3, [r7, #8]
}
 8004318:	bf00      	nop
 800431a:	bf00      	nop
 800431c:	e7fd      	b.n	800431a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800431e:	4b1e      	ldr	r3, [pc, #120]	@ (8004398 <xPortStartScheduler+0x138>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	4a1c      	ldr	r2, [pc, #112]	@ (8004398 <xPortStartScheduler+0x138>)
 8004326:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004328:	4b1b      	ldr	r3, [pc, #108]	@ (8004398 <xPortStartScheduler+0x138>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004330:	4a19      	ldr	r2, [pc, #100]	@ (8004398 <xPortStartScheduler+0x138>)
 8004332:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	b2da      	uxtb	r2, r3
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800433c:	4b17      	ldr	r3, [pc, #92]	@ (800439c <xPortStartScheduler+0x13c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a16      	ldr	r2, [pc, #88]	@ (800439c <xPortStartScheduler+0x13c>)
 8004342:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004346:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004348:	4b14      	ldr	r3, [pc, #80]	@ (800439c <xPortStartScheduler+0x13c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a13      	ldr	r2, [pc, #76]	@ (800439c <xPortStartScheduler+0x13c>)
 800434e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004352:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004354:	f000 f97c 	bl	8004650 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004358:	4b11      	ldr	r3, [pc, #68]	@ (80043a0 <xPortStartScheduler+0x140>)
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800435e:	f000 f9b3 	bl	80046c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004362:	4b10      	ldr	r3, [pc, #64]	@ (80043a4 <xPortStartScheduler+0x144>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a0f      	ldr	r2, [pc, #60]	@ (80043a4 <xPortStartScheduler+0x144>)
 8004368:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800436c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800436e:	f7ff ff63 	bl	8004238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004372:	f001 fa1f 	bl	80057b4 <vTaskSwitchContext>
	prvTaskExitError();
 8004376:	f7ff ff17 	bl	80041a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	e000ed00 	.word	0xe000ed00
 8004388:	410fc271 	.word	0x410fc271
 800438c:	410fc270 	.word	0x410fc270
 8004390:	e000e400 	.word	0xe000e400
 8004394:	20011e68 	.word	0x20011e68
 8004398:	20011e6c 	.word	0x20011e6c
 800439c:	e000ed20 	.word	0xe000ed20
 80043a0:	20000010 	.word	0x20000010
 80043a4:	e000ef34 	.word	0xe000ef34

080043a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	607b      	str	r3, [r7, #4]
}
 80043c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80043c2:	4b10      	ldr	r3, [pc, #64]	@ (8004404 <vPortEnterCritical+0x5c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3301      	adds	r3, #1
 80043c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004404 <vPortEnterCritical+0x5c>)
 80043ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004404 <vPortEnterCritical+0x5c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d110      	bne.n	80043f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004408 <vPortEnterCritical+0x60>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	603b      	str	r3, [r7, #0]
}
 80043f0:	bf00      	nop
 80043f2:	bf00      	nop
 80043f4:	e7fd      	b.n	80043f2 <vPortEnterCritical+0x4a>
	}
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000010 	.word	0x20000010
 8004408:	e000ed04 	.word	0xe000ed04

0800440c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004412:	4b12      	ldr	r3, [pc, #72]	@ (800445c <vPortExitCritical+0x50>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10b      	bne.n	8004432 <vPortExitCritical+0x26>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	607b      	str	r3, [r7, #4]
}
 800442c:	bf00      	nop
 800442e:	bf00      	nop
 8004430:	e7fd      	b.n	800442e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004432:	4b0a      	ldr	r3, [pc, #40]	@ (800445c <vPortExitCritical+0x50>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3b01      	subs	r3, #1
 8004438:	4a08      	ldr	r2, [pc, #32]	@ (800445c <vPortExitCritical+0x50>)
 800443a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800443c:	4b07      	ldr	r3, [pc, #28]	@ (800445c <vPortExitCritical+0x50>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d105      	bne.n	8004450 <vPortExitCritical+0x44>
 8004444:	2300      	movs	r3, #0
 8004446:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800444e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	20000010 	.word	0x20000010

08004460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004460:	f3ef 8009 	mrs	r0, PSP
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	4b15      	ldr	r3, [pc, #84]	@ (80044c0 <pxCurrentTCBConst>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	f01e 0f10 	tst.w	lr, #16
 8004470:	bf08      	it	eq
 8004472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447a:	6010      	str	r0, [r2, #0]
 800447c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004480:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004484:	f380 8811 	msr	BASEPRI, r0
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f001 f990 	bl	80057b4 <vTaskSwitchContext>
 8004494:	f04f 0000 	mov.w	r0, #0
 8004498:	f380 8811 	msr	BASEPRI, r0
 800449c:	bc09      	pop	{r0, r3}
 800449e:	6819      	ldr	r1, [r3, #0]
 80044a0:	6808      	ldr	r0, [r1, #0]
 80044a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a6:	f01e 0f10 	tst.w	lr, #16
 80044aa:	bf08      	it	eq
 80044ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044b0:	f380 8809 	msr	PSP, r0
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	f3af 8000 	nop.w

080044c0 <pxCurrentTCBConst>:
 80044c0:	20011e70 	.word	0x20011e70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop

080044c8 <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 80044d0:	4b59      	ldr	r3, [pc, #356]	@ (8004638 <vPortSuppressTicksAndSleep+0x170>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d902      	bls.n	80044e0 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 80044da:	4b57      	ldr	r3, [pc, #348]	@ (8004638 <vPortSuppressTicksAndSleep+0x170>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80044e0:	4b56      	ldr	r3, [pc, #344]	@ (800463c <vPortSuppressTicksAndSleep+0x174>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a55      	ldr	r2, [pc, #340]	@ (800463c <vPortSuppressTicksAndSleep+0x174>)
 80044e6:	f023 0301 	bic.w	r3, r3, #1
 80044ea:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 80044ec:	4b54      	ldr	r3, [pc, #336]	@ (8004640 <vPortSuppressTicksAndSleep+0x178>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	4953      	ldr	r1, [pc, #332]	@ (8004644 <vPortSuppressTicksAndSleep+0x17c>)
 80044f6:	6809      	ldr	r1, [r1, #0]
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	4413      	add	r3, r2
 80044fe:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8004500:	4b51      	ldr	r3, [pc, #324]	@ (8004648 <vPortSuppressTicksAndSleep+0x180>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69fa      	ldr	r2, [r7, #28]
 8004506:	429a      	cmp	r2, r3
 8004508:	d904      	bls.n	8004514 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800450a:	4b4f      	ldr	r3, [pc, #316]	@ (8004648 <vPortSuppressTicksAndSleep+0x180>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8004514:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8004516:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800451a:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800451e:	f001 faf7 	bl	8005b10 <eTaskConfirmSleepModeStatus>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d110      	bne.n	800454a <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8004528:	4b45      	ldr	r3, [pc, #276]	@ (8004640 <vPortSuppressTicksAndSleep+0x178>)
 800452a:	4a48      	ldr	r2, [pc, #288]	@ (800464c <vPortSuppressTicksAndSleep+0x184>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8004530:	4b42      	ldr	r3, [pc, #264]	@ (800463c <vPortSuppressTicksAndSleep+0x174>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a41      	ldr	r2, [pc, #260]	@ (800463c <vPortSuppressTicksAndSleep+0x174>)
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800453c:	4b41      	ldr	r3, [pc, #260]	@ (8004644 <vPortSuppressTicksAndSleep+0x17c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a42      	ldr	r2, [pc, #264]	@ (800464c <vPortSuppressTicksAndSleep+0x184>)
 8004542:	3b01      	subs	r3, #1
 8004544:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8004546:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8004548:	e071      	b.n	800462e <vPortSuppressTicksAndSleep+0x166>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800454a:	4a40      	ldr	r2, [pc, #256]	@ (800464c <vPortSuppressTicksAndSleep+0x184>)
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004550:	4b3b      	ldr	r3, [pc, #236]	@ (8004640 <vPortSuppressTicksAndSleep+0x178>)
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8004556:	4b39      	ldr	r3, [pc, #228]	@ (800463c <vPortSuppressTicksAndSleep+0x174>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a38      	ldr	r2, [pc, #224]	@ (800463c <vPortSuppressTicksAndSleep+0x174>)
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	613b      	str	r3, [r7, #16]
			if( xModifiableIdleTime > 0 )
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d004      	beq.n	8004576 <vPortSuppressTicksAndSleep+0xae>
				__asm volatile( "dsb" ::: "memory" );
 800456c:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8004570:	bf30      	wfi
				__asm volatile( "isb" );
 8004572:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsie i" ::: "memory" );
 8004576:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8004578:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800457c:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8004580:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8004582:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8004586:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800458a:	4b2c      	ldr	r3, [pc, #176]	@ (800463c <vPortSuppressTicksAndSleep+0x174>)
 800458c:	2206      	movs	r2, #6
 800458e:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8004590:	4b2a      	ldr	r3, [pc, #168]	@ (800463c <vPortSuppressTicksAndSleep+0x174>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01d      	beq.n	80045d8 <vPortSuppressTicksAndSleep+0x110>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800459c:	4b29      	ldr	r3, [pc, #164]	@ (8004644 <vPortSuppressTicksAndSleep+0x17c>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4b27      	ldr	r3, [pc, #156]	@ (8004640 <vPortSuppressTicksAndSleep+0x178>)
 80045a2:	6819      	ldr	r1, [r3, #0]
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	1acb      	subs	r3, r1, r3
 80045a8:	4413      	add	r3, r2
 80045aa:	3b01      	subs	r3, #1
 80045ac:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 80045ae:	4b26      	ldr	r3, [pc, #152]	@ (8004648 <vPortSuppressTicksAndSleep+0x180>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d304      	bcc.n	80045c2 <vPortSuppressTicksAndSleep+0xfa>
 80045b8:	4b22      	ldr	r3, [pc, #136]	@ (8004644 <vPortSuppressTicksAndSleep+0x17c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d903      	bls.n	80045ca <vPortSuppressTicksAndSleep+0x102>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 80045c2:	4b20      	ldr	r3, [pc, #128]	@ (8004644 <vPortSuppressTicksAndSleep+0x17c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 80045ca:	4a20      	ldr	r2, [pc, #128]	@ (800464c <vPortSuppressTicksAndSleep+0x184>)
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	61bb      	str	r3, [r7, #24]
 80045d6:	e018      	b.n	800460a <vPortSuppressTicksAndSleep+0x142>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80045d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004644 <vPortSuppressTicksAndSleep+0x17c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	fb03 f202 	mul.w	r2, r3, r2
 80045e2:	4b17      	ldr	r3, [pc, #92]	@ (8004640 <vPortSuppressTicksAndSleep+0x178>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 80045ea:	4b16      	ldr	r3, [pc, #88]	@ (8004644 <vPortSuppressTicksAndSleep+0x17c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	3301      	adds	r3, #1
 80045fa:	4a12      	ldr	r2, [pc, #72]	@ (8004644 <vPortSuppressTicksAndSleep+0x17c>)
 80045fc:	6812      	ldr	r2, [r2, #0]
 80045fe:	fb03 f202 	mul.w	r2, r3, r2
 8004602:	4912      	ldr	r1, [pc, #72]	@ (800464c <vPortSuppressTicksAndSleep+0x184>)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800460a:	4b0d      	ldr	r3, [pc, #52]	@ (8004640 <vPortSuppressTicksAndSleep+0x178>)
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8004610:	4b0a      	ldr	r3, [pc, #40]	@ (800463c <vPortSuppressTicksAndSleep+0x174>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a09      	ldr	r2, [pc, #36]	@ (800463c <vPortSuppressTicksAndSleep+0x174>)
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800461c:	69b8      	ldr	r0, [r7, #24]
 800461e:	f000 ffe7 	bl	80055f0 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8004622:	4b08      	ldr	r3, [pc, #32]	@ (8004644 <vPortSuppressTicksAndSleep+0x17c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a09      	ldr	r2, [pc, #36]	@ (800464c <vPortSuppressTicksAndSleep+0x184>)
 8004628:	3b01      	subs	r3, #1
 800462a:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800462c:	b662      	cpsie	i
	}
 800462e:	bf00      	nop
 8004630:	3720      	adds	r7, #32
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	20011e60 	.word	0x20011e60
 800463c:	e000e010 	.word	0xe000e010
 8004640:	e000e018 	.word	0xe000e018
 8004644:	20011e5c 	.word	0x20011e5c
 8004648:	20011e64 	.word	0x20011e64
 800464c:	e000e014 	.word	0xe000e014

08004650 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8004654:	4b14      	ldr	r3, [pc, #80]	@ (80046a8 <vPortSetupTimerInterrupt+0x58>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a14      	ldr	r2, [pc, #80]	@ (80046ac <vPortSetupTimerInterrupt+0x5c>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	099b      	lsrs	r3, r3, #6
 8004660:	4a13      	ldr	r2, [pc, #76]	@ (80046b0 <vPortSetupTimerInterrupt+0x60>)
 8004662:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8004664:	4b12      	ldr	r3, [pc, #72]	@ (80046b0 <vPortSetupTimerInterrupt+0x60>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800466c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004670:	4a10      	ldr	r2, [pc, #64]	@ (80046b4 <vPortSetupTimerInterrupt+0x64>)
 8004672:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8004674:	4b10      	ldr	r3, [pc, #64]	@ (80046b8 <vPortSetupTimerInterrupt+0x68>)
 8004676:	222d      	movs	r2, #45	@ 0x2d
 8004678:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800467a:	4b10      	ldr	r3, [pc, #64]	@ (80046bc <vPortSetupTimerInterrupt+0x6c>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004680:	4b0f      	ldr	r3, [pc, #60]	@ (80046c0 <vPortSetupTimerInterrupt+0x70>)
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004686:	4b08      	ldr	r3, [pc, #32]	@ (80046a8 <vPortSetupTimerInterrupt+0x58>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a08      	ldr	r2, [pc, #32]	@ (80046ac <vPortSetupTimerInterrupt+0x5c>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	099b      	lsrs	r3, r3, #6
 8004692:	4a0c      	ldr	r2, [pc, #48]	@ (80046c4 <vPortSetupTimerInterrupt+0x74>)
 8004694:	3b01      	subs	r3, #1
 8004696:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004698:	4b08      	ldr	r3, [pc, #32]	@ (80046bc <vPortSetupTimerInterrupt+0x6c>)
 800469a:	2207      	movs	r2, #7
 800469c:	601a      	str	r2, [r3, #0]
}
 800469e:	bf00      	nop
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	20000004 	.word	0x20000004
 80046ac:	10624dd3 	.word	0x10624dd3
 80046b0:	20011e5c 	.word	0x20011e5c
 80046b4:	20011e60 	.word	0x20011e60
 80046b8:	20011e64 	.word	0x20011e64
 80046bc:	e000e010 	.word	0xe000e010
 80046c0:	e000e018 	.word	0xe000e018
 80046c4:	e000e014 	.word	0xe000e014

080046c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80046c8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80046d8 <vPortEnableVFP+0x10>
 80046cc:	6801      	ldr	r1, [r0, #0]
 80046ce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80046d2:	6001      	str	r1, [r0, #0]
 80046d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80046d6:	bf00      	nop
 80046d8:	e000ed88 	.word	0xe000ed88

080046dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80046e2:	f3ef 8305 	mrs	r3, IPSR
 80046e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b0f      	cmp	r3, #15
 80046ec:	d915      	bls.n	800471a <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80046ee:	4a18      	ldr	r2, [pc, #96]	@ (8004750 <vPortValidateInterruptPriority+0x74>)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80046f8:	4b16      	ldr	r3, [pc, #88]	@ (8004754 <vPortValidateInterruptPriority+0x78>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	7afa      	ldrb	r2, [r7, #11]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d20b      	bcs.n	800471a <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	607b      	str	r3, [r7, #4]
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop
 8004718:	e7fd      	b.n	8004716 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800471a:	4b0f      	ldr	r3, [pc, #60]	@ (8004758 <vPortValidateInterruptPriority+0x7c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004722:	4b0e      	ldr	r3, [pc, #56]	@ (800475c <vPortValidateInterruptPriority+0x80>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d90b      	bls.n	8004742 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	603b      	str	r3, [r7, #0]
}
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	e7fd      	b.n	800473e <vPortValidateInterruptPriority+0x62>
	}
 8004742:	bf00      	nop
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	e000e3f0 	.word	0xe000e3f0
 8004754:	20011e68 	.word	0x20011e68
 8004758:	e000ed0c 	.word	0xe000ed0c
 800475c:	20011e6c 	.word	0x20011e6c

08004760 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10b      	bne.n	800478c <xQueueGenericReset+0x2c>
	__asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	60bb      	str	r3, [r7, #8]
}
 8004786:	bf00      	nop
 8004788:	bf00      	nop
 800478a:	e7fd      	b.n	8004788 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800478c:	f7ff fe0c 	bl	80043a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004798:	68f9      	ldr	r1, [r7, #12]
 800479a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	441a      	add	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047bc:	3b01      	subs	r3, #1
 80047be:	68f9      	ldr	r1, [r7, #12]
 80047c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80047c2:	fb01 f303 	mul.w	r3, r1, r3
 80047c6:	441a      	add	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	22ff      	movs	r2, #255	@ 0xff
 80047d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	22ff      	movs	r2, #255	@ 0xff
 80047d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d114      	bne.n	800480c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01a      	beq.n	8004820 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3310      	adds	r3, #16
 80047ee:	4618      	mov	r0, r3
 80047f0:	f001 f862 	bl	80058b8 <xTaskRemoveFromEventList>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d012      	beq.n	8004820 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004830 <xQueueGenericReset+0xd0>)
 80047fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	e009      	b.n	8004820 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	3310      	adds	r3, #16
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff fbe1 	bl	8003fd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3324      	adds	r3, #36	@ 0x24
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff fbdc 	bl	8003fd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004820:	f7ff fdf4 	bl	800440c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004824:	2301      	movs	r3, #1
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	e000ed04 	.word	0xe000ed04

08004834 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08a      	sub	sp, #40	@ 0x28
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	4613      	mov	r3, r2
 8004840:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10b      	bne.n	8004860 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	613b      	str	r3, [r7, #16]
}
 800485a:	bf00      	nop
 800485c:	bf00      	nop
 800485e:	e7fd      	b.n	800485c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	fb02 f303 	mul.w	r3, r2, r3
 8004868:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	3348      	adds	r3, #72	@ 0x48
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff f9c4 	bl	8003bfc <pvPortMalloc>
 8004874:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d011      	beq.n	80048a0 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	3348      	adds	r3, #72	@ 0x48
 8004884:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800488e:	79fa      	ldrb	r2, [r7, #7]
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	4613      	mov	r3, r2
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 f805 	bl	80048aa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048a0:	69bb      	ldr	r3, [r7, #24]
	}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
 80048b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d103      	bne.n	80048c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	e002      	b.n	80048cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048d8:	2101      	movs	r1, #1
 80048da:	69b8      	ldr	r0, [r7, #24]
 80048dc:	f7ff ff40 	bl	8004760 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08e      	sub	sp, #56	@ 0x38
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048f6:	2300      	movs	r3, #0
 80048f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10b      	bne.n	800491c <xQueueGenericSend+0x34>
	__asm volatile
 8004904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004916:	bf00      	nop
 8004918:	bf00      	nop
 800491a:	e7fd      	b.n	8004918 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d103      	bne.n	800492a <xQueueGenericSend+0x42>
 8004922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <xQueueGenericSend+0x46>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <xQueueGenericSend+0x48>
 800492e:	2300      	movs	r3, #0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10b      	bne.n	800494c <xQueueGenericSend+0x64>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004946:	bf00      	nop
 8004948:	bf00      	nop
 800494a:	e7fd      	b.n	8004948 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b02      	cmp	r3, #2
 8004950:	d103      	bne.n	800495a <xQueueGenericSend+0x72>
 8004952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <xQueueGenericSend+0x76>
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <xQueueGenericSend+0x78>
 800495e:	2300      	movs	r3, #0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10b      	bne.n	800497c <xQueueGenericSend+0x94>
	__asm volatile
 8004964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	623b      	str	r3, [r7, #32]
}
 8004976:	bf00      	nop
 8004978:	bf00      	nop
 800497a:	e7fd      	b.n	8004978 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800497c:	f001 f9b4 	bl	8005ce8 <xTaskGetSchedulerState>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d102      	bne.n	800498c <xQueueGenericSend+0xa4>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <xQueueGenericSend+0xa8>
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <xQueueGenericSend+0xaa>
 8004990:	2300      	movs	r3, #0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10b      	bne.n	80049ae <xQueueGenericSend+0xc6>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	61fb      	str	r3, [r7, #28]
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	e7fd      	b.n	80049aa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049ae:	f7ff fcfb 	bl	80043a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d302      	bcc.n	80049c4 <xQueueGenericSend+0xdc>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d129      	bne.n	8004a18 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	68b9      	ldr	r1, [r7, #8]
 80049c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049ca:	f000 fa47 	bl	8004e5c <prvCopyDataToQueue>
 80049ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d010      	beq.n	80049fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049da:	3324      	adds	r3, #36	@ 0x24
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 ff6b 	bl	80058b8 <xTaskRemoveFromEventList>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d013      	beq.n	8004a10 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80049e8:	4b3f      	ldr	r3, [pc, #252]	@ (8004ae8 <xQueueGenericSend+0x200>)
 80049ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	e00a      	b.n	8004a10 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d007      	beq.n	8004a10 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a00:	4b39      	ldr	r3, [pc, #228]	@ (8004ae8 <xQueueGenericSend+0x200>)
 8004a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a10:	f7ff fcfc 	bl	800440c <vPortExitCritical>
				return pdPASS;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e063      	b.n	8004ae0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d103      	bne.n	8004a26 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a1e:	f7ff fcf5 	bl	800440c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	e05c      	b.n	8004ae0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d106      	bne.n	8004a3a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a2c:	f107 0314 	add.w	r3, r7, #20
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 ffa7 	bl	8005984 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a36:	2301      	movs	r3, #1
 8004a38:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a3a:	f7ff fce7 	bl	800440c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a3e:	f000 fcf1 	bl	8005424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a42:	f7ff fcb1 	bl	80043a8 <vPortEnterCritical>
 8004a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a4c:	b25b      	sxtb	r3, r3
 8004a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a52:	d103      	bne.n	8004a5c <xQueueGenericSend+0x174>
 8004a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a62:	b25b      	sxtb	r3, r3
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a68:	d103      	bne.n	8004a72 <xQueueGenericSend+0x18a>
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a72:	f7ff fccb 	bl	800440c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a76:	1d3a      	adds	r2, r7, #4
 8004a78:	f107 0314 	add.w	r3, r7, #20
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 ff96 	bl	80059b0 <xTaskCheckForTimeOut>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d124      	bne.n	8004ad4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a8c:	f000 fab8 	bl	8005000 <prvIsQueueFull>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d018      	beq.n	8004ac8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a98:	3310      	adds	r3, #16
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fee4 	bl	800586c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004aa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004aa6:	f000 fa43 	bl	8004f30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004aaa:	f000 fd03 	bl	80054b4 <xTaskResumeAll>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f47f af7c 	bne.w	80049ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae8 <xQueueGenericSend+0x200>)
 8004ab8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	e772      	b.n	80049ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ac8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004aca:	f000 fa31 	bl	8004f30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ace:	f000 fcf1 	bl	80054b4 <xTaskResumeAll>
 8004ad2:	e76c      	b.n	80049ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ad4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ad6:	f000 fa2b 	bl	8004f30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ada:	f000 fceb 	bl	80054b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ade:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3738      	adds	r7, #56	@ 0x38
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	e000ed04 	.word	0xe000ed04

08004aec <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08e      	sub	sp, #56	@ 0x38
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10b      	bne.n	8004b18 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	623b      	str	r3, [r7, #32]
}
 8004b12:	bf00      	nop
 8004b14:	bf00      	nop
 8004b16:	e7fd      	b.n	8004b14 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00b      	beq.n	8004b38 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	61fb      	str	r3, [r7, #28]
}
 8004b32:	bf00      	nop
 8004b34:	bf00      	nop
 8004b36:	e7fd      	b.n	8004b34 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d103      	bne.n	8004b48 <xQueueGiveFromISR+0x5c>
 8004b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <xQueueGiveFromISR+0x60>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <xQueueGiveFromISR+0x62>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10b      	bne.n	8004b6a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	61bb      	str	r3, [r7, #24]
}
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop
 8004b68:	e7fd      	b.n	8004b66 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b6a:	f7ff fdb7 	bl	80046dc <vPortValidateInterruptPriority>
	__asm volatile
 8004b6e:	f3ef 8211 	mrs	r2, BASEPRI
 8004b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	617a      	str	r2, [r7, #20]
 8004b84:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004b86:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d22b      	bcs.n	8004bf2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ba0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004baa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004bac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bb4:	d112      	bne.n	8004bdc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d016      	beq.n	8004bec <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc0:	3324      	adds	r3, #36	@ 0x24
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fe78 	bl	80058b8 <xTaskRemoveFromEventList>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00e      	beq.n	8004bec <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00b      	beq.n	8004bec <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	e007      	b.n	8004bec <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004be0:	3301      	adds	r3, #1
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	b25a      	sxtb	r2, r3
 8004be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004bec:	2301      	movs	r3, #1
 8004bee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bf0:	e001      	b.n	8004bf6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f383 8811 	msr	BASEPRI, r3
}
 8004c00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3738      	adds	r7, #56	@ 0x38
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08e      	sub	sp, #56	@ 0x38
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c16:	2300      	movs	r3, #0
 8004c18:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10b      	bne.n	8004c40 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c2c:	f383 8811 	msr	BASEPRI, r3
 8004c30:	f3bf 8f6f 	isb	sy
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	623b      	str	r3, [r7, #32]
}
 8004c3a:	bf00      	nop
 8004c3c:	bf00      	nop
 8004c3e:	e7fd      	b.n	8004c3c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00b      	beq.n	8004c60 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	61fb      	str	r3, [r7, #28]
}
 8004c5a:	bf00      	nop
 8004c5c:	bf00      	nop
 8004c5e:	e7fd      	b.n	8004c5c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c60:	f001 f842 	bl	8005ce8 <xTaskGetSchedulerState>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d102      	bne.n	8004c70 <xQueueSemaphoreTake+0x64>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <xQueueSemaphoreTake+0x68>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <xQueueSemaphoreTake+0x6a>
 8004c74:	2300      	movs	r3, #0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10b      	bne.n	8004c92 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	61bb      	str	r3, [r7, #24]
}
 8004c8c:	bf00      	nop
 8004c8e:	bf00      	nop
 8004c90:	e7fd      	b.n	8004c8e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c92:	f7ff fb89 	bl	80043a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d024      	beq.n	8004cec <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca4:	1e5a      	subs	r2, r3, #1
 8004ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d104      	bne.n	8004cbc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004cb2:	f001 f9c5 	bl	8006040 <pvTaskIncrementMutexHeldCount>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00f      	beq.n	8004ce4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc6:	3310      	adds	r3, #16
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 fdf5 	bl	80058b8 <xTaskRemoveFromEventList>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d007      	beq.n	8004ce4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004cd4:	4b54      	ldr	r3, [pc, #336]	@ (8004e28 <xQueueSemaphoreTake+0x21c>)
 8004cd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ce4:	f7ff fb92 	bl	800440c <vPortExitCritical>
				return pdPASS;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e098      	b.n	8004e1e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d112      	bne.n	8004d18 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00b      	beq.n	8004d10 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	617b      	str	r3, [r7, #20]
}
 8004d0a:	bf00      	nop
 8004d0c:	bf00      	nop
 8004d0e:	e7fd      	b.n	8004d0c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004d10:	f7ff fb7c 	bl	800440c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d14:	2300      	movs	r3, #0
 8004d16:	e082      	b.n	8004e1e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d106      	bne.n	8004d2c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d1e:	f107 030c 	add.w	r3, r7, #12
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fe2e 	bl	8005984 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d2c:	f7ff fb6e 	bl	800440c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d30:	f000 fb78 	bl	8005424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d34:	f7ff fb38 	bl	80043a8 <vPortEnterCritical>
 8004d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d3e:	b25b      	sxtb	r3, r3
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d44:	d103      	bne.n	8004d4e <xQueueSemaphoreTake+0x142>
 8004d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d54:	b25b      	sxtb	r3, r3
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d5a:	d103      	bne.n	8004d64 <xQueueSemaphoreTake+0x158>
 8004d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d64:	f7ff fb52 	bl	800440c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d68:	463a      	mov	r2, r7
 8004d6a:	f107 030c 	add.w	r3, r7, #12
 8004d6e:	4611      	mov	r1, r2
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fe1d 	bl	80059b0 <xTaskCheckForTimeOut>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d132      	bne.n	8004de2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d7e:	f000 f929 	bl	8004fd4 <prvIsQueueEmpty>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d026      	beq.n	8004dd6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d109      	bne.n	8004da4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004d90:	f7ff fb0a 	bl	80043a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 ffc3 	bl	8005d24 <xTaskPriorityInherit>
 8004d9e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004da0:	f7ff fb34 	bl	800440c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da6:	3324      	adds	r3, #36	@ 0x24
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	4611      	mov	r1, r2
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 fd5d 	bl	800586c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004db2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004db4:	f000 f8bc 	bl	8004f30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004db8:	f000 fb7c 	bl	80054b4 <xTaskResumeAll>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f47f af67 	bne.w	8004c92 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004dc4:	4b18      	ldr	r3, [pc, #96]	@ (8004e28 <xQueueSemaphoreTake+0x21c>)
 8004dc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	e75d      	b.n	8004c92 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004dd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004dd8:	f000 f8aa 	bl	8004f30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ddc:	f000 fb6a 	bl	80054b4 <xTaskResumeAll>
 8004de0:	e757      	b.n	8004c92 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004de2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004de4:	f000 f8a4 	bl	8004f30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004de8:	f000 fb64 	bl	80054b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004dee:	f000 f8f1 	bl	8004fd4 <prvIsQueueEmpty>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f43f af4c 	beq.w	8004c92 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00d      	beq.n	8004e1c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004e00:	f7ff fad2 	bl	80043a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004e04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e06:	f000 f811 	bl	8004e2c <prvGetDisinheritPriorityAfterTimeout>
 8004e0a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e12:	4618      	mov	r0, r3
 8004e14:	f001 f884 	bl	8005f20 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004e18:	f7ff faf8 	bl	800440c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3738      	adds	r7, #56	@ 0x38
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	e000ed04 	.word	0xe000ed04

08004e2c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d006      	beq.n	8004e4a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f1c3 0307 	rsb	r3, r3, #7
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	e001      	b.n	8004e4e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
	}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10d      	bne.n	8004e96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d14d      	bne.n	8004f1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 ffc2 	bl	8005e10 <xTaskPriorityDisinherit>
 8004e8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	609a      	str	r2, [r3, #8]
 8004e94:	e043      	b.n	8004f1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d119      	bne.n	8004ed0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6858      	ldr	r0, [r3, #4]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	68b9      	ldr	r1, [r7, #8]
 8004ea8:	f001 fa4c 	bl	8006344 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb4:	441a      	add	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d32b      	bcc.n	8004f1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	605a      	str	r2, [r3, #4]
 8004ece:	e026      	b.n	8004f1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	68d8      	ldr	r0, [r3, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed8:	461a      	mov	r2, r3
 8004eda:	68b9      	ldr	r1, [r7, #8]
 8004edc:	f001 fa32 	bl	8006344 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee8:	425b      	negs	r3, r3
 8004eea:	441a      	add	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d207      	bcs.n	8004f0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f04:	425b      	negs	r3, r3
 8004f06:	441a      	add	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d105      	bne.n	8004f1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004f26:	697b      	ldr	r3, [r7, #20]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f38:	f7ff fa36 	bl	80043a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f44:	e011      	b.n	8004f6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d012      	beq.n	8004f74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3324      	adds	r3, #36	@ 0x24
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fcb0 	bl	80058b8 <xTaskRemoveFromEventList>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f5e:	f000 fd8b 	bl	8005a78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	dce9      	bgt.n	8004f46 <prvUnlockQueue+0x16>
 8004f72:	e000      	b.n	8004f76 <prvUnlockQueue+0x46>
					break;
 8004f74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	22ff      	movs	r2, #255	@ 0xff
 8004f7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004f7e:	f7ff fa45 	bl	800440c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f82:	f7ff fa11 	bl	80043a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f8e:	e011      	b.n	8004fb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d012      	beq.n	8004fbe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3310      	adds	r3, #16
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fc8b 	bl	80058b8 <xTaskRemoveFromEventList>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fa8:	f000 fd66 	bl	8005a78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fac:	7bbb      	ldrb	r3, [r7, #14]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	dce9      	bgt.n	8004f90 <prvUnlockQueue+0x60>
 8004fbc:	e000      	b.n	8004fc0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fbe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	22ff      	movs	r2, #255	@ 0xff
 8004fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004fc8:	f7ff fa20 	bl	800440c <vPortExitCritical>
}
 8004fcc:	bf00      	nop
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fdc:	f7ff f9e4 	bl	80043a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d102      	bne.n	8004fee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	e001      	b.n	8004ff2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ff2:	f7ff fa0b 	bl	800440c <vPortExitCritical>

	return xReturn;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005008:	f7ff f9ce 	bl	80043a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005014:	429a      	cmp	r2, r3
 8005016:	d102      	bne.n	800501e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005018:	2301      	movs	r3, #1
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	e001      	b.n	8005022 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005022:	f7ff f9f3 	bl	800440c <vPortExitCritical>

	return xReturn;
 8005026:	68fb      	ldr	r3, [r7, #12]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08e      	sub	sp, #56	@ 0x38
 8005034:	af04      	add	r7, sp, #16
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800503e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10b      	bne.n	800505c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	623b      	str	r3, [r7, #32]
}
 8005056:	bf00      	nop
 8005058:	bf00      	nop
 800505a:	e7fd      	b.n	8005058 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800505c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10b      	bne.n	800507a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	61fb      	str	r3, [r7, #28]
}
 8005074:	bf00      	nop
 8005076:	bf00      	nop
 8005078:	e7fd      	b.n	8005076 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800507a:	2354      	movs	r3, #84	@ 0x54
 800507c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b54      	cmp	r3, #84	@ 0x54
 8005082:	d00b      	beq.n	800509c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	61bb      	str	r3, [r7, #24]
}
 8005096:	bf00      	nop
 8005098:	bf00      	nop
 800509a:	e7fd      	b.n	8005098 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800509c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800509e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01e      	beq.n	80050e2 <xTaskCreateStatic+0xb2>
 80050a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d01b      	beq.n	80050e2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050b2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050bc:	2300      	movs	r3, #0
 80050be:	9303      	str	r3, [sp, #12]
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	9302      	str	r3, [sp, #8]
 80050c4:	f107 0314 	add.w	r3, r7, #20
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 f850 	bl	800517a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80050dc:	f000 f8d6 	bl	800528c <prvAddNewTaskToReadyList>
 80050e0:	e001      	b.n	80050e6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050e6:	697b      	ldr	r3, [r7, #20]
	}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3728      	adds	r7, #40	@ 0x28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08c      	sub	sp, #48	@ 0x30
 80050f4:	af04      	add	r7, sp, #16
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	4613      	mov	r3, r2
 80050fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4618      	mov	r0, r3
 8005106:	f7fe fd79 	bl	8003bfc <pvPortMalloc>
 800510a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00e      	beq.n	8005130 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005112:	2054      	movs	r0, #84	@ 0x54
 8005114:	f7fe fd72 	bl	8003bfc <pvPortMalloc>
 8005118:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	631a      	str	r2, [r3, #48]	@ 0x30
 8005126:	e005      	b.n	8005134 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005128:	6978      	ldr	r0, [r7, #20]
 800512a:	f7fe fe35 	bl	8003d98 <vPortFree>
 800512e:	e001      	b.n	8005134 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005130:	2300      	movs	r3, #0
 8005132:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d017      	beq.n	800516a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005142:	88fa      	ldrh	r2, [r7, #6]
 8005144:	2300      	movs	r3, #0
 8005146:	9303      	str	r3, [sp, #12]
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	9302      	str	r3, [sp, #8]
 800514c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800514e:	9301      	str	r3, [sp, #4]
 8005150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 f80e 	bl	800517a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800515e:	69f8      	ldr	r0, [r7, #28]
 8005160:	f000 f894 	bl	800528c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005164:	2301      	movs	r3, #1
 8005166:	61bb      	str	r3, [r7, #24]
 8005168:	e002      	b.n	8005170 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800516a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800516e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005170:	69bb      	ldr	r3, [r7, #24]
	}
 8005172:	4618      	mov	r0, r3
 8005174:	3720      	adds	r7, #32
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b088      	sub	sp, #32
 800517e:	af00      	add	r7, sp, #0
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	607a      	str	r2, [r7, #4]
 8005186:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005192:	3b01      	subs	r3, #1
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	f023 0307 	bic.w	r3, r3, #7
 80051a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00b      	beq.n	80051c4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	617b      	str	r3, [r7, #20]
}
 80051be:	bf00      	nop
 80051c0:	bf00      	nop
 80051c2:	e7fd      	b.n	80051c0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01f      	beq.n	800520a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051ca:	2300      	movs	r3, #0
 80051cc:	61fb      	str	r3, [r7, #28]
 80051ce:	e012      	b.n	80051f6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	4413      	add	r3, r2
 80051d6:	7819      	ldrb	r1, [r3, #0]
 80051d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	3334      	adds	r3, #52	@ 0x34
 80051e0:	460a      	mov	r2, r1
 80051e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d006      	beq.n	80051fe <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	3301      	adds	r3, #1
 80051f4:	61fb      	str	r3, [r7, #28]
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	2b0f      	cmp	r3, #15
 80051fa:	d9e9      	bls.n	80051d0 <prvInitialiseNewTask+0x56>
 80051fc:	e000      	b.n	8005200 <prvInitialiseNewTask+0x86>
			{
				break;
 80051fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005208:	e003      	b.n	8005212 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800520a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005214:	2b06      	cmp	r3, #6
 8005216:	d901      	bls.n	800521c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005218:	2306      	movs	r3, #6
 800521a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800521c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005220:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005224:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005226:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522a:	2200      	movs	r2, #0
 800522c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800522e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005230:	3304      	adds	r3, #4
 8005232:	4618      	mov	r0, r3
 8005234:	f7fe fef0 	bl	8004018 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523a:	3318      	adds	r3, #24
 800523c:	4618      	mov	r0, r3
 800523e:	f7fe feeb 	bl	8004018 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005246:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524a:	f1c3 0207 	rsb	r2, r3, #7
 800524e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005250:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005256:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525a:	2200      	movs	r2, #0
 800525c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800525e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	68f9      	ldr	r1, [r7, #12]
 800526a:	69b8      	ldr	r0, [r7, #24]
 800526c:	f7fe ff68 	bl	8004140 <pxPortInitialiseStack>
 8005270:	4602      	mov	r2, r0
 8005272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005274:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800527c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005280:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005282:	bf00      	nop
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005294:	f7ff f888 	bl	80043a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005298:	4b2a      	ldr	r3, [pc, #168]	@ (8005344 <prvAddNewTaskToReadyList+0xb8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3301      	adds	r3, #1
 800529e:	4a29      	ldr	r2, [pc, #164]	@ (8005344 <prvAddNewTaskToReadyList+0xb8>)
 80052a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052a2:	4b29      	ldr	r3, [pc, #164]	@ (8005348 <prvAddNewTaskToReadyList+0xbc>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d109      	bne.n	80052be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052aa:	4a27      	ldr	r2, [pc, #156]	@ (8005348 <prvAddNewTaskToReadyList+0xbc>)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052b0:	4b24      	ldr	r3, [pc, #144]	@ (8005344 <prvAddNewTaskToReadyList+0xb8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d110      	bne.n	80052da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052b8:	f000 fc58 	bl	8005b6c <prvInitialiseTaskLists>
 80052bc:	e00d      	b.n	80052da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052be:	4b23      	ldr	r3, [pc, #140]	@ (800534c <prvAddNewTaskToReadyList+0xc0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d109      	bne.n	80052da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052c6:	4b20      	ldr	r3, [pc, #128]	@ (8005348 <prvAddNewTaskToReadyList+0xbc>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d802      	bhi.n	80052da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005348 <prvAddNewTaskToReadyList+0xbc>)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052da:	4b1d      	ldr	r3, [pc, #116]	@ (8005350 <prvAddNewTaskToReadyList+0xc4>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3301      	adds	r3, #1
 80052e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005350 <prvAddNewTaskToReadyList+0xc4>)
 80052e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e8:	2201      	movs	r2, #1
 80052ea:	409a      	lsls	r2, r3
 80052ec:	4b19      	ldr	r3, [pc, #100]	@ (8005354 <prvAddNewTaskToReadyList+0xc8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	4a18      	ldr	r2, [pc, #96]	@ (8005354 <prvAddNewTaskToReadyList+0xc8>)
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4a15      	ldr	r2, [pc, #84]	@ (8005358 <prvAddNewTaskToReadyList+0xcc>)
 8005304:	441a      	add	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	3304      	adds	r3, #4
 800530a:	4619      	mov	r1, r3
 800530c:	4610      	mov	r0, r2
 800530e:	f7fe fe90 	bl	8004032 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005312:	f7ff f87b 	bl	800440c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005316:	4b0d      	ldr	r3, [pc, #52]	@ (800534c <prvAddNewTaskToReadyList+0xc0>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00e      	beq.n	800533c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800531e:	4b0a      	ldr	r3, [pc, #40]	@ (8005348 <prvAddNewTaskToReadyList+0xbc>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005328:	429a      	cmp	r2, r3
 800532a:	d207      	bcs.n	800533c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800532c:	4b0b      	ldr	r3, [pc, #44]	@ (800535c <prvAddNewTaskToReadyList+0xd0>)
 800532e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800533c:	bf00      	nop
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	20011f70 	.word	0x20011f70
 8005348:	20011e70 	.word	0x20011e70
 800534c:	20011f7c 	.word	0x20011f7c
 8005350:	20011f8c 	.word	0x20011f8c
 8005354:	20011f78 	.word	0x20011f78
 8005358:	20011e74 	.word	0x20011e74
 800535c:	e000ed04 	.word	0xe000ed04

08005360 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08a      	sub	sp, #40	@ 0x28
 8005364:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005366:	2300      	movs	r3, #0
 8005368:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800536a:	2300      	movs	r3, #0
 800536c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800536e:	463a      	mov	r2, r7
 8005370:	1d39      	adds	r1, r7, #4
 8005372:	f107 0308 	add.w	r3, r7, #8
 8005376:	4618      	mov	r0, r3
 8005378:	f7fa ffe8 	bl	800034c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800537c:	6839      	ldr	r1, [r7, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	9202      	str	r2, [sp, #8]
 8005384:	9301      	str	r3, [sp, #4]
 8005386:	2300      	movs	r3, #0
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	2300      	movs	r3, #0
 800538c:	460a      	mov	r2, r1
 800538e:	491f      	ldr	r1, [pc, #124]	@ (800540c <vTaskStartScheduler+0xac>)
 8005390:	481f      	ldr	r0, [pc, #124]	@ (8005410 <vTaskStartScheduler+0xb0>)
 8005392:	f7ff fe4d 	bl	8005030 <xTaskCreateStatic>
 8005396:	4603      	mov	r3, r0
 8005398:	4a1e      	ldr	r2, [pc, #120]	@ (8005414 <vTaskStartScheduler+0xb4>)
 800539a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800539c:	4b1d      	ldr	r3, [pc, #116]	@ (8005414 <vTaskStartScheduler+0xb4>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053a4:	2301      	movs	r3, #1
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	e001      	b.n	80053ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053aa:	2300      	movs	r3, #0
 80053ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d116      	bne.n	80053e2 <vTaskStartScheduler+0x82>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	613b      	str	r3, [r7, #16]
}
 80053c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053c8:	4b13      	ldr	r3, [pc, #76]	@ (8005418 <vTaskStartScheduler+0xb8>)
 80053ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053d0:	4b12      	ldr	r3, [pc, #72]	@ (800541c <vTaskStartScheduler+0xbc>)
 80053d2:	2201      	movs	r2, #1
 80053d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053d6:	4b12      	ldr	r3, [pc, #72]	@ (8005420 <vTaskStartScheduler+0xc0>)
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053dc:	f7fe ff40 	bl	8004260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80053e0:	e00f      	b.n	8005402 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053e8:	d10b      	bne.n	8005402 <vTaskStartScheduler+0xa2>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	60fb      	str	r3, [r7, #12]
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	e7fd      	b.n	80053fe <vTaskStartScheduler+0x9e>
}
 8005402:	bf00      	nop
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	0800639c 	.word	0x0800639c
 8005410:	08005a91 	.word	0x08005a91
 8005414:	20011f94 	.word	0x20011f94
 8005418:	20011f90 	.word	0x20011f90
 800541c:	20011f7c 	.word	0x20011f7c
 8005420:	20011f74 	.word	0x20011f74

08005424 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005428:	4b04      	ldr	r3, [pc, #16]	@ (800543c <vTaskSuspendAll+0x18>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3301      	adds	r3, #1
 800542e:	4a03      	ldr	r2, [pc, #12]	@ (800543c <vTaskSuspendAll+0x18>)
 8005430:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005432:	bf00      	nop
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	20011f98 	.word	0x20011f98

08005440 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8005446:	2300      	movs	r3, #0
 8005448:	60bb      	str	r3, [r7, #8]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#else
		{
			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
 800544a:	2301      	movs	r3, #1
 800544c:	607b      	str	r3, [r7, #4]
			/* When port optimised task selection is used the uxTopReadyPriority
			variable is used as a bit map.  If bits other than the least
			significant bit are set then there are tasks that have a priority
			above the idle priority that are in the Ready state.  This takes
			care of the case where the co-operative scheduler is in use. */
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800544e:	4b14      	ldr	r3, [pc, #80]	@ (80054a0 <prvGetExpectedIdleTime+0x60>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	429a      	cmp	r2, r3
 8005456:	d201      	bcs.n	800545c <prvGetExpectedIdleTime+0x1c>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8005458:	2301      	movs	r3, #1
 800545a:	60bb      	str	r3, [r7, #8]
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800545c:	4b11      	ldr	r3, [pc, #68]	@ (80054a4 <prvGetExpectedIdleTime+0x64>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <prvGetExpectedIdleTime+0x2c>
		{
			xReturn = 0;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	e012      	b.n	8005492 <prvGetExpectedIdleTime+0x52>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800546c:	4b0e      	ldr	r3, [pc, #56]	@ (80054a8 <prvGetExpectedIdleTime+0x68>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d902      	bls.n	800547a <prvGetExpectedIdleTime+0x3a>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	e00b      	b.n	8005492 <prvGetExpectedIdleTime+0x52>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <prvGetExpectedIdleTime+0x46>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8005480:	2300      	movs	r3, #0
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	e005      	b.n	8005492 <prvGetExpectedIdleTime+0x52>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8005486:	4b09      	ldr	r3, [pc, #36]	@ (80054ac <prvGetExpectedIdleTime+0x6c>)
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	4b09      	ldr	r3, [pc, #36]	@ (80054b0 <prvGetExpectedIdleTime+0x70>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 8005492:	68fb      	ldr	r3, [r7, #12]
	}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	20011f78 	.word	0x20011f78
 80054a4:	20011e70 	.word	0x20011e70
 80054a8:	20011e74 	.word	0x20011e74
 80054ac:	20011f90 	.word	0x20011f90
 80054b0:	20011f74 	.word	0x20011f74

080054b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054be:	2300      	movs	r3, #0
 80054c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054c2:	4b42      	ldr	r3, [pc, #264]	@ (80055cc <xTaskResumeAll+0x118>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <xTaskResumeAll+0x2e>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	603b      	str	r3, [r7, #0]
}
 80054dc:	bf00      	nop
 80054de:	bf00      	nop
 80054e0:	e7fd      	b.n	80054de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054e2:	f7fe ff61 	bl	80043a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054e6:	4b39      	ldr	r3, [pc, #228]	@ (80055cc <xTaskResumeAll+0x118>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	4a37      	ldr	r2, [pc, #220]	@ (80055cc <xTaskResumeAll+0x118>)
 80054ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054f0:	4b36      	ldr	r3, [pc, #216]	@ (80055cc <xTaskResumeAll+0x118>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d161      	bne.n	80055bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054f8:	4b35      	ldr	r3, [pc, #212]	@ (80055d0 <xTaskResumeAll+0x11c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d05d      	beq.n	80055bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005500:	e02e      	b.n	8005560 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005502:	4b34      	ldr	r3, [pc, #208]	@ (80055d4 <xTaskResumeAll+0x120>)
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3318      	adds	r3, #24
 800550e:	4618      	mov	r0, r3
 8005510:	f7fe fdec 	bl	80040ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3304      	adds	r3, #4
 8005518:	4618      	mov	r0, r3
 800551a:	f7fe fde7 	bl	80040ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005522:	2201      	movs	r2, #1
 8005524:	409a      	lsls	r2, r3
 8005526:	4b2c      	ldr	r3, [pc, #176]	@ (80055d8 <xTaskResumeAll+0x124>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4313      	orrs	r3, r2
 800552c:	4a2a      	ldr	r2, [pc, #168]	@ (80055d8 <xTaskResumeAll+0x124>)
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4a27      	ldr	r2, [pc, #156]	@ (80055dc <xTaskResumeAll+0x128>)
 800553e:	441a      	add	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	3304      	adds	r3, #4
 8005544:	4619      	mov	r1, r3
 8005546:	4610      	mov	r0, r2
 8005548:	f7fe fd73 	bl	8004032 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005550:	4b23      	ldr	r3, [pc, #140]	@ (80055e0 <xTaskResumeAll+0x12c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005556:	429a      	cmp	r2, r3
 8005558:	d302      	bcc.n	8005560 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800555a:	4b22      	ldr	r3, [pc, #136]	@ (80055e4 <xTaskResumeAll+0x130>)
 800555c:	2201      	movs	r2, #1
 800555e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005560:	4b1c      	ldr	r3, [pc, #112]	@ (80055d4 <xTaskResumeAll+0x120>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1cc      	bne.n	8005502 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800556e:	f000 fb9b 	bl	8005ca8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005572:	4b1d      	ldr	r3, [pc, #116]	@ (80055e8 <xTaskResumeAll+0x134>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d010      	beq.n	80055a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800557e:	f000 f85f 	bl	8005640 <xTaskIncrementTick>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005588:	4b16      	ldr	r3, [pc, #88]	@ (80055e4 <xTaskResumeAll+0x130>)
 800558a:	2201      	movs	r2, #1
 800558c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3b01      	subs	r3, #1
 8005592:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f1      	bne.n	800557e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800559a:	4b13      	ldr	r3, [pc, #76]	@ (80055e8 <xTaskResumeAll+0x134>)
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055a0:	4b10      	ldr	r3, [pc, #64]	@ (80055e4 <xTaskResumeAll+0x130>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d009      	beq.n	80055bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055a8:	2301      	movs	r3, #1
 80055aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055ac:	4b0f      	ldr	r3, [pc, #60]	@ (80055ec <xTaskResumeAll+0x138>)
 80055ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055bc:	f7fe ff26 	bl	800440c <vPortExitCritical>

	return xAlreadyYielded;
 80055c0:	68bb      	ldr	r3, [r7, #8]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20011f98 	.word	0x20011f98
 80055d0:	20011f70 	.word	0x20011f70
 80055d4:	20011f30 	.word	0x20011f30
 80055d8:	20011f78 	.word	0x20011f78
 80055dc:	20011e74 	.word	0x20011e74
 80055e0:	20011e70 	.word	0x20011e70
 80055e4:	20011f84 	.word	0x20011f84
 80055e8:	20011f80 	.word	0x20011f80
 80055ec:	e000ed04 	.word	0xe000ed04

080055f0 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 80055f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005638 <vTaskStepTick+0x48>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	441a      	add	r2, r3
 8005600:	4b0e      	ldr	r3, [pc, #56]	@ (800563c <vTaskStepTick+0x4c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d90b      	bls.n	8005620 <vTaskStepTick+0x30>
	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	60fb      	str	r3, [r7, #12]
}
 800561a:	bf00      	nop
 800561c:	bf00      	nop
 800561e:	e7fd      	b.n	800561c <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8005620:	4b05      	ldr	r3, [pc, #20]	@ (8005638 <vTaskStepTick+0x48>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4413      	add	r3, r2
 8005628:	4a03      	ldr	r2, [pc, #12]	@ (8005638 <vTaskStepTick+0x48>)
 800562a:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800562c:	bf00      	nop
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	20011f74 	.word	0x20011f74
 800563c:	20011f90 	.word	0x20011f90

08005640 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005646:	2300      	movs	r3, #0
 8005648:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800564a:	4b4f      	ldr	r3, [pc, #316]	@ (8005788 <xTaskIncrementTick+0x148>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f040 808f 	bne.w	8005772 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005654:	4b4d      	ldr	r3, [pc, #308]	@ (800578c <xTaskIncrementTick+0x14c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3301      	adds	r3, #1
 800565a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800565c:	4a4b      	ldr	r2, [pc, #300]	@ (800578c <xTaskIncrementTick+0x14c>)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d121      	bne.n	80056ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005668:	4b49      	ldr	r3, [pc, #292]	@ (8005790 <xTaskIncrementTick+0x150>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00b      	beq.n	800568a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	603b      	str	r3, [r7, #0]
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop
 8005688:	e7fd      	b.n	8005686 <xTaskIncrementTick+0x46>
 800568a:	4b41      	ldr	r3, [pc, #260]	@ (8005790 <xTaskIncrementTick+0x150>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	4b40      	ldr	r3, [pc, #256]	@ (8005794 <xTaskIncrementTick+0x154>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a3e      	ldr	r2, [pc, #248]	@ (8005790 <xTaskIncrementTick+0x150>)
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	4a3e      	ldr	r2, [pc, #248]	@ (8005794 <xTaskIncrementTick+0x154>)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	4b3e      	ldr	r3, [pc, #248]	@ (8005798 <xTaskIncrementTick+0x158>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3301      	adds	r3, #1
 80056a4:	4a3c      	ldr	r2, [pc, #240]	@ (8005798 <xTaskIncrementTick+0x158>)
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	f000 fafe 	bl	8005ca8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056ac:	4b3b      	ldr	r3, [pc, #236]	@ (800579c <xTaskIncrementTick+0x15c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d348      	bcc.n	8005748 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056b6:	4b36      	ldr	r3, [pc, #216]	@ (8005790 <xTaskIncrementTick+0x150>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d104      	bne.n	80056ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c0:	4b36      	ldr	r3, [pc, #216]	@ (800579c <xTaskIncrementTick+0x15c>)
 80056c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056c6:	601a      	str	r2, [r3, #0]
					break;
 80056c8:	e03e      	b.n	8005748 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ca:	4b31      	ldr	r3, [pc, #196]	@ (8005790 <xTaskIncrementTick+0x150>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d203      	bcs.n	80056ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056e2:	4a2e      	ldr	r2, [pc, #184]	@ (800579c <xTaskIncrementTick+0x15c>)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056e8:	e02e      	b.n	8005748 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	3304      	adds	r3, #4
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fe fcfc 	bl	80040ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d004      	beq.n	8005706 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	3318      	adds	r3, #24
 8005700:	4618      	mov	r0, r3
 8005702:	f7fe fcf3 	bl	80040ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570a:	2201      	movs	r2, #1
 800570c:	409a      	lsls	r2, r3
 800570e:	4b24      	ldr	r3, [pc, #144]	@ (80057a0 <xTaskIncrementTick+0x160>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4313      	orrs	r3, r2
 8005714:	4a22      	ldr	r2, [pc, #136]	@ (80057a0 <xTaskIncrementTick+0x160>)
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4a1f      	ldr	r2, [pc, #124]	@ (80057a4 <xTaskIncrementTick+0x164>)
 8005726:	441a      	add	r2, r3
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	3304      	adds	r3, #4
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f7fe fc7f 	bl	8004032 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005738:	4b1b      	ldr	r3, [pc, #108]	@ (80057a8 <xTaskIncrementTick+0x168>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573e:	429a      	cmp	r2, r3
 8005740:	d3b9      	bcc.n	80056b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005742:	2301      	movs	r3, #1
 8005744:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005746:	e7b6      	b.n	80056b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005748:	4b17      	ldr	r3, [pc, #92]	@ (80057a8 <xTaskIncrementTick+0x168>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800574e:	4915      	ldr	r1, [pc, #84]	@ (80057a4 <xTaskIncrementTick+0x164>)
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d901      	bls.n	8005764 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005760:	2301      	movs	r3, #1
 8005762:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005764:	4b11      	ldr	r3, [pc, #68]	@ (80057ac <xTaskIncrementTick+0x16c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800576c:	2301      	movs	r3, #1
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e004      	b.n	800577c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005772:	4b0f      	ldr	r3, [pc, #60]	@ (80057b0 <xTaskIncrementTick+0x170>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3301      	adds	r3, #1
 8005778:	4a0d      	ldr	r2, [pc, #52]	@ (80057b0 <xTaskIncrementTick+0x170>)
 800577a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800577c:	697b      	ldr	r3, [r7, #20]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20011f98 	.word	0x20011f98
 800578c:	20011f74 	.word	0x20011f74
 8005790:	20011f28 	.word	0x20011f28
 8005794:	20011f2c 	.word	0x20011f2c
 8005798:	20011f88 	.word	0x20011f88
 800579c:	20011f90 	.word	0x20011f90
 80057a0:	20011f78 	.word	0x20011f78
 80057a4:	20011e74 	.word	0x20011e74
 80057a8:	20011e70 	.word	0x20011e70
 80057ac:	20011f84 	.word	0x20011f84
 80057b0:	20011f80 	.word	0x20011f80

080057b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057ba:	4b27      	ldr	r3, [pc, #156]	@ (8005858 <vTaskSwitchContext+0xa4>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057c2:	4b26      	ldr	r3, [pc, #152]	@ (800585c <vTaskSwitchContext+0xa8>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057c8:	e040      	b.n	800584c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80057ca:	4b24      	ldr	r3, [pc, #144]	@ (800585c <vTaskSwitchContext+0xa8>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d0:	4b23      	ldr	r3, [pc, #140]	@ (8005860 <vTaskSwitchContext+0xac>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	fab3 f383 	clz	r3, r3
 80057dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80057de:	7afb      	ldrb	r3, [r7, #11]
 80057e0:	f1c3 031f 	rsb	r3, r3, #31
 80057e4:	617b      	str	r3, [r7, #20]
 80057e6:	491f      	ldr	r1, [pc, #124]	@ (8005864 <vTaskSwitchContext+0xb0>)
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	440b      	add	r3, r1
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10b      	bne.n	8005812 <vTaskSwitchContext+0x5e>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	607b      	str	r3, [r7, #4]
}
 800580c:	bf00      	nop
 800580e:	bf00      	nop
 8005810:	e7fd      	b.n	800580e <vTaskSwitchContext+0x5a>
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4a11      	ldr	r2, [pc, #68]	@ (8005864 <vTaskSwitchContext+0xb0>)
 800581e:	4413      	add	r3, r2
 8005820:	613b      	str	r3, [r7, #16]
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	605a      	str	r2, [r3, #4]
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	3308      	adds	r3, #8
 8005834:	429a      	cmp	r2, r3
 8005836:	d104      	bne.n	8005842 <vTaskSwitchContext+0x8e>
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	605a      	str	r2, [r3, #4]
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	4a07      	ldr	r2, [pc, #28]	@ (8005868 <vTaskSwitchContext+0xb4>)
 800584a:	6013      	str	r3, [r2, #0]
}
 800584c:	bf00      	nop
 800584e:	371c      	adds	r7, #28
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	20011f98 	.word	0x20011f98
 800585c:	20011f84 	.word	0x20011f84
 8005860:	20011f78 	.word	0x20011f78
 8005864:	20011e74 	.word	0x20011e74
 8005868:	20011e70 	.word	0x20011e70

0800586c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10b      	bne.n	8005894 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	60fb      	str	r3, [r7, #12]
}
 800588e:	bf00      	nop
 8005890:	bf00      	nop
 8005892:	e7fd      	b.n	8005890 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005894:	4b07      	ldr	r3, [pc, #28]	@ (80058b4 <vTaskPlaceOnEventList+0x48>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3318      	adds	r3, #24
 800589a:	4619      	mov	r1, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7fe fbec 	bl	800407a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058a2:	2101      	movs	r1, #1
 80058a4:	6838      	ldr	r0, [r7, #0]
 80058a6:	f000 fcbb 	bl	8006220 <prvAddCurrentTaskToDelayedList>
}
 80058aa:	bf00      	nop
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20011e70 	.word	0x20011e70

080058b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10b      	bne.n	80058e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	60fb      	str	r3, [r7, #12]
}
 80058e0:	bf00      	nop
 80058e2:	bf00      	nop
 80058e4:	e7fd      	b.n	80058e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	3318      	adds	r3, #24
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe fbfe 	bl	80040ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058f0:	4b1e      	ldr	r3, [pc, #120]	@ (800596c <xTaskRemoveFromEventList+0xb4>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d11e      	bne.n	8005936 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fe fbf5 	bl	80040ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005906:	2201      	movs	r2, #1
 8005908:	409a      	lsls	r2, r3
 800590a:	4b19      	ldr	r3, [pc, #100]	@ (8005970 <xTaskRemoveFromEventList+0xb8>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4313      	orrs	r3, r2
 8005910:	4a17      	ldr	r2, [pc, #92]	@ (8005970 <xTaskRemoveFromEventList+0xb8>)
 8005912:	6013      	str	r3, [r2, #0]
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005918:	4613      	mov	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4a14      	ldr	r2, [pc, #80]	@ (8005974 <xTaskRemoveFromEventList+0xbc>)
 8005922:	441a      	add	r2, r3
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	3304      	adds	r3, #4
 8005928:	4619      	mov	r1, r3
 800592a:	4610      	mov	r0, r2
 800592c:	f7fe fb81 	bl	8004032 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8005930:	f000 f9ba 	bl	8005ca8 <prvResetNextTaskUnblockTime>
 8005934:	e005      	b.n	8005942 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	3318      	adds	r3, #24
 800593a:	4619      	mov	r1, r3
 800593c:	480e      	ldr	r0, [pc, #56]	@ (8005978 <xTaskRemoveFromEventList+0xc0>)
 800593e:	f7fe fb78 	bl	8004032 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005946:	4b0d      	ldr	r3, [pc, #52]	@ (800597c <xTaskRemoveFromEventList+0xc4>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594c:	429a      	cmp	r2, r3
 800594e:	d905      	bls.n	800595c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005950:	2301      	movs	r3, #1
 8005952:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005954:	4b0a      	ldr	r3, [pc, #40]	@ (8005980 <xTaskRemoveFromEventList+0xc8>)
 8005956:	2201      	movs	r2, #1
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	e001      	b.n	8005960 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005960:	697b      	ldr	r3, [r7, #20]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	20011f98 	.word	0x20011f98
 8005970:	20011f78 	.word	0x20011f78
 8005974:	20011e74 	.word	0x20011e74
 8005978:	20011f30 	.word	0x20011f30
 800597c:	20011e70 	.word	0x20011e70
 8005980:	20011f84 	.word	0x20011f84

08005984 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800598c:	4b06      	ldr	r3, [pc, #24]	@ (80059a8 <vTaskInternalSetTimeOutState+0x24>)
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005994:	4b05      	ldr	r3, [pc, #20]	@ (80059ac <vTaskInternalSetTimeOutState+0x28>)
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	605a      	str	r2, [r3, #4]
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	20011f88 	.word	0x20011f88
 80059ac:	20011f74 	.word	0x20011f74

080059b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b088      	sub	sp, #32
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10b      	bne.n	80059d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80059c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	613b      	str	r3, [r7, #16]
}
 80059d2:	bf00      	nop
 80059d4:	bf00      	nop
 80059d6:	e7fd      	b.n	80059d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10b      	bne.n	80059f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	60fb      	str	r3, [r7, #12]
}
 80059f0:	bf00      	nop
 80059f2:	bf00      	nop
 80059f4:	e7fd      	b.n	80059f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80059f6:	f7fe fcd7 	bl	80043a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005a70 <xTaskCheckForTimeOut+0xc0>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a12:	d102      	bne.n	8005a1a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a14:	2300      	movs	r3, #0
 8005a16:	61fb      	str	r3, [r7, #28]
 8005a18:	e023      	b.n	8005a62 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	4b15      	ldr	r3, [pc, #84]	@ (8005a74 <xTaskCheckForTimeOut+0xc4>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d007      	beq.n	8005a36 <xTaskCheckForTimeOut+0x86>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d302      	bcc.n	8005a36 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a30:	2301      	movs	r3, #1
 8005a32:	61fb      	str	r3, [r7, #28]
 8005a34:	e015      	b.n	8005a62 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d20b      	bcs.n	8005a58 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	1ad2      	subs	r2, r2, r3
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7ff ff99 	bl	8005984 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61fb      	str	r3, [r7, #28]
 8005a56:	e004      	b.n	8005a62 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a62:	f7fe fcd3 	bl	800440c <vPortExitCritical>

	return xReturn;
 8005a66:	69fb      	ldr	r3, [r7, #28]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3720      	adds	r7, #32
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	20011f74 	.word	0x20011f74
 8005a74:	20011f88 	.word	0x20011f88

08005a78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a7c:	4b03      	ldr	r3, [pc, #12]	@ (8005a8c <vTaskMissedYield+0x14>)
 8005a7e:	2201      	movs	r2, #1
 8005a80:	601a      	str	r2, [r3, #0]
}
 8005a82:	bf00      	nop
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	20011f84 	.word	0x20011f84

08005a90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a98:	f000 f8a8 	bl	8005bec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a9c:	4b18      	ldr	r3, [pc, #96]	@ (8005b00 <prvIdleTask+0x70>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d907      	bls.n	8005ab4 <prvIdleTask+0x24>
			{
				taskYIELD();
 8005aa4:	4b17      	ldr	r3, [pc, #92]	@ (8005b04 <prvIdleTask+0x74>)
 8005aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8005ab4:	f7ff fcc4 	bl	8005440 <prvGetExpectedIdleTime>
 8005ab8:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d9eb      	bls.n	8005a98 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8005ac0:	f7ff fcb0 	bl	8005424 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8005ac4:	4b10      	ldr	r3, [pc, #64]	@ (8005b08 <prvIdleTask+0x78>)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	4b10      	ldr	r3, [pc, #64]	@ (8005b0c <prvIdleTask+0x7c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d20b      	bcs.n	8005ae8 <prvIdleTask+0x58>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	60bb      	str	r3, [r7, #8]
}
 8005ae2:	bf00      	nop
 8005ae4:	bf00      	nop
 8005ae6:	e7fd      	b.n	8005ae4 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8005ae8:	f7ff fcaa 	bl	8005440 <prvGetExpectedIdleTime>
 8005aec:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d902      	bls.n	8005afa <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f7fe fce7 	bl	80044c8 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8005afa:	f7ff fcdb 	bl	80054b4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8005afe:	e7cb      	b.n	8005a98 <prvIdleTask+0x8>
 8005b00:	20011e74 	.word	0x20011e74
 8005b04:	e000ed04 	.word	0xe000ed04
 8005b08:	20011f90 	.word	0x20011f90
 8005b0c:	20011f74 	.word	0x20011f74

08005b10 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8005b16:	2301      	movs	r3, #1
 8005b18:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8005b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8005b5c <eTaskConfirmSleepModeStatus+0x4c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8005b26:	2300      	movs	r3, #0
 8005b28:	71fb      	strb	r3, [r7, #7]
 8005b2a:	e010      	b.n	8005b4e <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8005b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b60 <eTaskConfirmSleepModeStatus+0x50>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8005b34:	2300      	movs	r3, #0
 8005b36:	71fb      	strb	r3, [r7, #7]
 8005b38:	e009      	b.n	8005b4e <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8005b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b64 <eTaskConfirmSleepModeStatus+0x54>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b68 <eTaskConfirmSleepModeStatus+0x58>)
 8005b40:	6819      	ldr	r1, [r3, #0]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	1acb      	subs	r3, r1, r3
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d101      	bne.n	8005b4e <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8005b4e:	79fb      	ldrb	r3, [r7, #7]
	}
 8005b50:	4618      	mov	r0, r3
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	20011f30 	.word	0x20011f30
 8005b60:	20011f84 	.word	0x20011f84
 8005b64:	20011f5c 	.word	0x20011f5c
 8005b68:	20011f70 	.word	0x20011f70

08005b6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b72:	2300      	movs	r3, #0
 8005b74:	607b      	str	r3, [r7, #4]
 8005b76:	e00c      	b.n	8005b92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4a12      	ldr	r2, [pc, #72]	@ (8005bcc <prvInitialiseTaskLists+0x60>)
 8005b84:	4413      	add	r3, r2
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fe fa26 	bl	8003fd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	607b      	str	r3, [r7, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b06      	cmp	r3, #6
 8005b96:	d9ef      	bls.n	8005b78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b98:	480d      	ldr	r0, [pc, #52]	@ (8005bd0 <prvInitialiseTaskLists+0x64>)
 8005b9a:	f7fe fa1d 	bl	8003fd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b9e:	480d      	ldr	r0, [pc, #52]	@ (8005bd4 <prvInitialiseTaskLists+0x68>)
 8005ba0:	f7fe fa1a 	bl	8003fd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ba4:	480c      	ldr	r0, [pc, #48]	@ (8005bd8 <prvInitialiseTaskLists+0x6c>)
 8005ba6:	f7fe fa17 	bl	8003fd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005baa:	480c      	ldr	r0, [pc, #48]	@ (8005bdc <prvInitialiseTaskLists+0x70>)
 8005bac:	f7fe fa14 	bl	8003fd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bb0:	480b      	ldr	r0, [pc, #44]	@ (8005be0 <prvInitialiseTaskLists+0x74>)
 8005bb2:	f7fe fa11 	bl	8003fd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8005be4 <prvInitialiseTaskLists+0x78>)
 8005bb8:	4a05      	ldr	r2, [pc, #20]	@ (8005bd0 <prvInitialiseTaskLists+0x64>)
 8005bba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005be8 <prvInitialiseTaskLists+0x7c>)
 8005bbe:	4a05      	ldr	r2, [pc, #20]	@ (8005bd4 <prvInitialiseTaskLists+0x68>)
 8005bc0:	601a      	str	r2, [r3, #0]
}
 8005bc2:	bf00      	nop
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20011e74 	.word	0x20011e74
 8005bd0:	20011f00 	.word	0x20011f00
 8005bd4:	20011f14 	.word	0x20011f14
 8005bd8:	20011f30 	.word	0x20011f30
 8005bdc:	20011f44 	.word	0x20011f44
 8005be0:	20011f5c 	.word	0x20011f5c
 8005be4:	20011f28 	.word	0x20011f28
 8005be8:	20011f2c 	.word	0x20011f2c

08005bec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bf2:	e019      	b.n	8005c28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bf4:	f7fe fbd8 	bl	80043a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bf8:	4b10      	ldr	r3, [pc, #64]	@ (8005c3c <prvCheckTasksWaitingTermination+0x50>)
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3304      	adds	r3, #4
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fe fa71 	bl	80040ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c40 <prvCheckTasksWaitingTermination+0x54>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	4a0b      	ldr	r2, [pc, #44]	@ (8005c40 <prvCheckTasksWaitingTermination+0x54>)
 8005c12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c14:	4b0b      	ldr	r3, [pc, #44]	@ (8005c44 <prvCheckTasksWaitingTermination+0x58>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8005c44 <prvCheckTasksWaitingTermination+0x58>)
 8005c1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c1e:	f7fe fbf5 	bl	800440c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f810 	bl	8005c48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c28:	4b06      	ldr	r3, [pc, #24]	@ (8005c44 <prvCheckTasksWaitingTermination+0x58>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1e1      	bne.n	8005bf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c30:	bf00      	nop
 8005c32:	bf00      	nop
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20011f44 	.word	0x20011f44
 8005c40:	20011f70 	.word	0x20011f70
 8005c44:	20011f58 	.word	0x20011f58

08005c48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d108      	bne.n	8005c6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fe f89a 	bl	8003d98 <vPortFree>
				vPortFree( pxTCB );
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7fe f897 	bl	8003d98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c6a:	e019      	b.n	8005ca0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d103      	bne.n	8005c7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7fe f88e 	bl	8003d98 <vPortFree>
	}
 8005c7c:	e010      	b.n	8005ca0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d00b      	beq.n	8005ca0 <prvDeleteTCB+0x58>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	60fb      	str	r3, [r7, #12]
}
 8005c9a:	bf00      	nop
 8005c9c:	bf00      	nop
 8005c9e:	e7fd      	b.n	8005c9c <prvDeleteTCB+0x54>
	}
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cae:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce0 <prvResetNextTaskUnblockTime+0x38>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d104      	bne.n	8005cc2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce4 <prvResetNextTaskUnblockTime+0x3c>)
 8005cba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005cbe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cc0:	e008      	b.n	8005cd4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cc2:	4b07      	ldr	r3, [pc, #28]	@ (8005ce0 <prvResetNextTaskUnblockTime+0x38>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	4a04      	ldr	r2, [pc, #16]	@ (8005ce4 <prvResetNextTaskUnblockTime+0x3c>)
 8005cd2:	6013      	str	r3, [r2, #0]
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	20011f28 	.word	0x20011f28
 8005ce4:	20011f90 	.word	0x20011f90

08005ce8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cee:	4b0b      	ldr	r3, [pc, #44]	@ (8005d1c <xTaskGetSchedulerState+0x34>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d102      	bne.n	8005cfc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	607b      	str	r3, [r7, #4]
 8005cfa:	e008      	b.n	8005d0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cfc:	4b08      	ldr	r3, [pc, #32]	@ (8005d20 <xTaskGetSchedulerState+0x38>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d04:	2302      	movs	r3, #2
 8005d06:	607b      	str	r3, [r7, #4]
 8005d08:	e001      	b.n	8005d0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d0e:	687b      	ldr	r3, [r7, #4]
	}
 8005d10:	4618      	mov	r0, r3
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	20011f7c 	.word	0x20011f7c
 8005d20:	20011f98 	.word	0x20011f98

08005d24 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005d30:	2300      	movs	r3, #0
 8005d32:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d05e      	beq.n	8005df8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d3e:	4b31      	ldr	r3, [pc, #196]	@ (8005e04 <xTaskPriorityInherit+0xe0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d24e      	bcs.n	8005de6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	db06      	blt.n	8005d5e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d50:	4b2c      	ldr	r3, [pc, #176]	@ (8005e04 <xTaskPriorityInherit+0xe0>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d56:	f1c3 0207 	rsb	r2, r3, #7
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	6959      	ldr	r1, [r3, #20]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d66:	4613      	mov	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4a26      	ldr	r2, [pc, #152]	@ (8005e08 <xTaskPriorityInherit+0xe4>)
 8005d70:	4413      	add	r3, r2
 8005d72:	4299      	cmp	r1, r3
 8005d74:	d12f      	bne.n	8005dd6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	3304      	adds	r3, #4
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fe f9b6 	bl	80040ec <uxListRemove>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10a      	bne.n	8005d9c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d90:	43da      	mvns	r2, r3
 8005d92:	4b1e      	ldr	r3, [pc, #120]	@ (8005e0c <xTaskPriorityInherit+0xe8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4013      	ands	r3, r2
 8005d98:	4a1c      	ldr	r2, [pc, #112]	@ (8005e0c <xTaskPriorityInherit+0xe8>)
 8005d9a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d9c:	4b19      	ldr	r3, [pc, #100]	@ (8005e04 <xTaskPriorityInherit+0xe0>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005daa:	2201      	movs	r2, #1
 8005dac:	409a      	lsls	r2, r3
 8005dae:	4b17      	ldr	r3, [pc, #92]	@ (8005e0c <xTaskPriorityInherit+0xe8>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	4a15      	ldr	r2, [pc, #84]	@ (8005e0c <xTaskPriorityInherit+0xe8>)
 8005db6:	6013      	str	r3, [r2, #0]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4a10      	ldr	r2, [pc, #64]	@ (8005e08 <xTaskPriorityInherit+0xe4>)
 8005dc6:	441a      	add	r2, r3
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4610      	mov	r0, r2
 8005dd0:	f7fe f92f 	bl	8004032 <vListInsertEnd>
 8005dd4:	e004      	b.n	8005de0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e04 <xTaskPriorityInherit+0xe0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005de0:	2301      	movs	r3, #1
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	e008      	b.n	8005df8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dea:	4b06      	ldr	r3, [pc, #24]	@ (8005e04 <xTaskPriorityInherit+0xe0>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d201      	bcs.n	8005df8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005df4:	2301      	movs	r3, #1
 8005df6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005df8:	68fb      	ldr	r3, [r7, #12]
	}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20011e70 	.word	0x20011e70
 8005e08:	20011e74 	.word	0x20011e74
 8005e0c:	20011f78 	.word	0x20011f78

08005e10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d070      	beq.n	8005f08 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e26:	4b3b      	ldr	r3, [pc, #236]	@ (8005f14 <xTaskPriorityDisinherit+0x104>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d00b      	beq.n	8005e48 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	60fb      	str	r3, [r7, #12]
}
 8005e42:	bf00      	nop
 8005e44:	bf00      	nop
 8005e46:	e7fd      	b.n	8005e44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10b      	bne.n	8005e68 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	60bb      	str	r3, [r7, #8]
}
 8005e62:	bf00      	nop
 8005e64:	bf00      	nop
 8005e66:	e7fd      	b.n	8005e64 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e6c:	1e5a      	subs	r2, r3, #1
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d044      	beq.n	8005f08 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d140      	bne.n	8005f08 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fe f92e 	bl	80040ec <uxListRemove>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d115      	bne.n	8005ec2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e9a:	491f      	ldr	r1, [pc, #124]	@ (8005f18 <xTaskPriorityDisinherit+0x108>)
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10a      	bne.n	8005ec2 <xTaskPriorityDisinherit+0xb2>
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	43da      	mvns	r2, r3
 8005eb8:	4b18      	ldr	r3, [pc, #96]	@ (8005f1c <xTaskPriorityDisinherit+0x10c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	4a17      	ldr	r2, [pc, #92]	@ (8005f1c <xTaskPriorityDisinherit+0x10c>)
 8005ec0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ece:	f1c3 0207 	rsb	r2, r3, #7
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eda:	2201      	movs	r2, #1
 8005edc:	409a      	lsls	r2, r3
 8005ede:	4b0f      	ldr	r3, [pc, #60]	@ (8005f1c <xTaskPriorityDisinherit+0x10c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8005f1c <xTaskPriorityDisinherit+0x10c>)
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eec:	4613      	mov	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4a08      	ldr	r2, [pc, #32]	@ (8005f18 <xTaskPriorityDisinherit+0x108>)
 8005ef6:	441a      	add	r2, r3
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4619      	mov	r1, r3
 8005efe:	4610      	mov	r0, r2
 8005f00:	f7fe f897 	bl	8004032 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f04:	2301      	movs	r3, #1
 8005f06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f08:	697b      	ldr	r3, [r7, #20]
	}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20011e70 	.word	0x20011e70
 8005f18:	20011e74 	.word	0x20011e74
 8005f1c:	20011f78 	.word	0x20011f78

08005f20 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b088      	sub	sp, #32
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d079      	beq.n	800602c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10b      	bne.n	8005f58 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	60fb      	str	r3, [r7, #12]
}
 8005f52:	bf00      	nop
 8005f54:	bf00      	nop
 8005f56:	e7fd      	b.n	8005f54 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d902      	bls.n	8005f68 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	e002      	b.n	8005f6e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f6c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d059      	beq.n	800602c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d154      	bne.n	800602c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005f82:	4b2c      	ldr	r3, [pc, #176]	@ (8006034 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d10b      	bne.n	8005fa4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	60bb      	str	r3, [r7, #8]
}
 8005f9e:	bf00      	nop
 8005fa0:	bf00      	nop
 8005fa2:	e7fd      	b.n	8005fa0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	69fa      	ldr	r2, [r7, #28]
 8005fae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	db04      	blt.n	8005fc2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	f1c3 0207 	rsb	r2, r3, #7
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	6959      	ldr	r1, [r3, #20]
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4a19      	ldr	r2, [pc, #100]	@ (8006038 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005fd2:	4413      	add	r3, r2
 8005fd4:	4299      	cmp	r1, r3
 8005fd6:	d129      	bne.n	800602c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	3304      	adds	r3, #4
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fe f885 	bl	80040ec <uxListRemove>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10a      	bne.n	8005ffe <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fec:	2201      	movs	r2, #1
 8005fee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff2:	43da      	mvns	r2, r3
 8005ff4:	4b11      	ldr	r3, [pc, #68]	@ (800603c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	4a10      	ldr	r2, [pc, #64]	@ (800603c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005ffc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006002:	2201      	movs	r2, #1
 8006004:	409a      	lsls	r2, r3
 8006006:	4b0d      	ldr	r3, [pc, #52]	@ (800603c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4313      	orrs	r3, r2
 800600c:	4a0b      	ldr	r2, [pc, #44]	@ (800603c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4a06      	ldr	r2, [pc, #24]	@ (8006038 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800601e:	441a      	add	r2, r3
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	3304      	adds	r3, #4
 8006024:	4619      	mov	r1, r3
 8006026:	4610      	mov	r0, r2
 8006028:	f7fe f803 	bl	8004032 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800602c:	bf00      	nop
 800602e:	3720      	adds	r7, #32
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20011e70 	.word	0x20011e70
 8006038:	20011e74 	.word	0x20011e74
 800603c:	20011f78 	.word	0x20011f78

08006040 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006044:	4b07      	ldr	r3, [pc, #28]	@ (8006064 <pvTaskIncrementMutexHeldCount+0x24>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d004      	beq.n	8006056 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800604c:	4b05      	ldr	r3, [pc, #20]	@ (8006064 <pvTaskIncrementMutexHeldCount+0x24>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006052:	3201      	adds	r2, #1
 8006054:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8006056:	4b03      	ldr	r3, [pc, #12]	@ (8006064 <pvTaskIncrementMutexHeldCount+0x24>)
 8006058:	681b      	ldr	r3, [r3, #0]
	}
 800605a:	4618      	mov	r0, r3
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	20011e70 	.word	0x20011e70

08006068 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8006072:	f7fe f999 	bl	80043a8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006076:	4b1e      	ldr	r3, [pc, #120]	@ (80060f0 <ulTaskNotifyTake+0x88>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800607c:	2b00      	cmp	r3, #0
 800607e:	d113      	bne.n	80060a8 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006080:	4b1b      	ldr	r3, [pc, #108]	@ (80060f0 <ulTaskNotifyTake+0x88>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00b      	beq.n	80060a8 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006090:	2101      	movs	r1, #1
 8006092:	6838      	ldr	r0, [r7, #0]
 8006094:	f000 f8c4 	bl	8006220 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006098:	4b16      	ldr	r3, [pc, #88]	@ (80060f4 <ulTaskNotifyTake+0x8c>)
 800609a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80060a8:	f7fe f9b0 	bl	800440c <vPortExitCritical>

		taskENTER_CRITICAL();
 80060ac:	f7fe f97c 	bl	80043a8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80060b0:	4b0f      	ldr	r3, [pc, #60]	@ (80060f0 <ulTaskNotifyTake+0x88>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060b6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00c      	beq.n	80060d8 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d004      	beq.n	80060ce <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80060c4:	4b0a      	ldr	r3, [pc, #40]	@ (80060f0 <ulTaskNotifyTake+0x88>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2200      	movs	r2, #0
 80060ca:	64da      	str	r2, [r3, #76]	@ 0x4c
 80060cc:	e004      	b.n	80060d8 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80060ce:	4b08      	ldr	r3, [pc, #32]	@ (80060f0 <ulTaskNotifyTake+0x88>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	3a01      	subs	r2, #1
 80060d6:	64da      	str	r2, [r3, #76]	@ 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060d8:	4b05      	ldr	r3, [pc, #20]	@ (80060f0 <ulTaskNotifyTake+0x88>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 80060e2:	f7fe f993 	bl	800440c <vPortExitCritical>

		return ulReturn;
 80060e6:	68fb      	ldr	r3, [r7, #12]
	}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	20011e70 	.word	0x20011e70
 80060f4:	e000ed04 	.word	0xe000ed04

080060f8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08a      	sub	sp, #40	@ 0x28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10b      	bne.n	8006120 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	61bb      	str	r3, [r7, #24]
}
 800611a:	bf00      	nop
 800611c:	bf00      	nop
 800611e:	e7fd      	b.n	800611c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006120:	f7fe fadc 	bl	80046dc <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8006128:	f3ef 8211 	mrs	r2, BASEPRI
 800612c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	617a      	str	r2, [r7, #20]
 800613e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006140:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006142:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006146:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800614a:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800614c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614e:	2202      	movs	r2, #2
 8006150:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8006154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615c:	64da      	str	r2, [r3, #76]	@ 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800615e:	7ffb      	ldrb	r3, [r7, #31]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d146      	bne.n	80061f2 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00b      	beq.n	8006184 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	60fb      	str	r3, [r7, #12]
}
 800617e:	bf00      	nop
 8006180:	bf00      	nop
 8006182:	e7fd      	b.n	8006180 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006184:	4b20      	ldr	r3, [pc, #128]	@ (8006208 <vTaskNotifyGiveFromISR+0x110>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d11c      	bne.n	80061c6 <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800618c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618e:	3304      	adds	r3, #4
 8006190:	4618      	mov	r0, r3
 8006192:	f7fd ffab 	bl	80040ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619a:	2201      	movs	r2, #1
 800619c:	409a      	lsls	r2, r3
 800619e:	4b1b      	ldr	r3, [pc, #108]	@ (800620c <vTaskNotifyGiveFromISR+0x114>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	4a19      	ldr	r2, [pc, #100]	@ (800620c <vTaskNotifyGiveFromISR+0x114>)
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4a16      	ldr	r2, [pc, #88]	@ (8006210 <vTaskNotifyGiveFromISR+0x118>)
 80061b6:	441a      	add	r2, r3
 80061b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ba:	3304      	adds	r3, #4
 80061bc:	4619      	mov	r1, r3
 80061be:	4610      	mov	r0, r2
 80061c0:	f7fd ff37 	bl	8004032 <vListInsertEnd>
 80061c4:	e005      	b.n	80061d2 <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80061c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c8:	3318      	adds	r3, #24
 80061ca:	4619      	mov	r1, r3
 80061cc:	4811      	ldr	r0, [pc, #68]	@ (8006214 <vTaskNotifyGiveFromISR+0x11c>)
 80061ce:	f7fd ff30 	bl	8004032 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d6:	4b10      	ldr	r3, [pc, #64]	@ (8006218 <vTaskNotifyGiveFromISR+0x120>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061dc:	429a      	cmp	r2, r3
 80061de:	d908      	bls.n	80061f2 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2201      	movs	r2, #1
 80061ea:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80061ec:	4b0b      	ldr	r3, [pc, #44]	@ (800621c <vTaskNotifyGiveFromISR+0x124>)
 80061ee:	2201      	movs	r2, #1
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f383 8811 	msr	BASEPRI, r3
}
 80061fc:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80061fe:	bf00      	nop
 8006200:	3728      	adds	r7, #40	@ 0x28
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20011f98 	.word	0x20011f98
 800620c:	20011f78 	.word	0x20011f78
 8006210:	20011e74 	.word	0x20011e74
 8006214:	20011f30 	.word	0x20011f30
 8006218:	20011e70 	.word	0x20011e70
 800621c:	20011f84 	.word	0x20011f84

08006220 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800622a:	4b29      	ldr	r3, [pc, #164]	@ (80062d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006230:	4b28      	ldr	r3, [pc, #160]	@ (80062d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3304      	adds	r3, #4
 8006236:	4618      	mov	r0, r3
 8006238:	f7fd ff58 	bl	80040ec <uxListRemove>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10b      	bne.n	800625a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006242:	4b24      	ldr	r3, [pc, #144]	@ (80062d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006248:	2201      	movs	r2, #1
 800624a:	fa02 f303 	lsl.w	r3, r2, r3
 800624e:	43da      	mvns	r2, r3
 8006250:	4b21      	ldr	r3, [pc, #132]	@ (80062d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4013      	ands	r3, r2
 8006256:	4a20      	ldr	r2, [pc, #128]	@ (80062d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006258:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006260:	d10a      	bne.n	8006278 <prvAddCurrentTaskToDelayedList+0x58>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d007      	beq.n	8006278 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006268:	4b1a      	ldr	r3, [pc, #104]	@ (80062d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3304      	adds	r3, #4
 800626e:	4619      	mov	r1, r3
 8006270:	481a      	ldr	r0, [pc, #104]	@ (80062dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006272:	f7fd fede 	bl	8004032 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006276:	e026      	b.n	80062c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006280:	4b14      	ldr	r3, [pc, #80]	@ (80062d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	429a      	cmp	r2, r3
 800628e:	d209      	bcs.n	80062a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006290:	4b13      	ldr	r3, [pc, #76]	@ (80062e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	4b0f      	ldr	r3, [pc, #60]	@ (80062d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3304      	adds	r3, #4
 800629a:	4619      	mov	r1, r3
 800629c:	4610      	mov	r0, r2
 800629e:	f7fd feec 	bl	800407a <vListInsert>
}
 80062a2:	e010      	b.n	80062c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062a4:	4b0f      	ldr	r3, [pc, #60]	@ (80062e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	4b0a      	ldr	r3, [pc, #40]	@ (80062d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3304      	adds	r3, #4
 80062ae:	4619      	mov	r1, r3
 80062b0:	4610      	mov	r0, r2
 80062b2:	f7fd fee2 	bl	800407a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062b6:	4b0c      	ldr	r3, [pc, #48]	@ (80062e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d202      	bcs.n	80062c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80062c0:	4a09      	ldr	r2, [pc, #36]	@ (80062e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	6013      	str	r3, [r2, #0]
}
 80062c6:	bf00      	nop
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20011f74 	.word	0x20011f74
 80062d4:	20011e70 	.word	0x20011e70
 80062d8:	20011f78 	.word	0x20011f78
 80062dc:	20011f5c 	.word	0x20011f5c
 80062e0:	20011f2c 	.word	0x20011f2c
 80062e4:	20011f28 	.word	0x20011f28
 80062e8:	20011f90 	.word	0x20011f90

080062ec <memset>:
 80062ec:	4402      	add	r2, r0
 80062ee:	4603      	mov	r3, r0
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d100      	bne.n	80062f6 <memset+0xa>
 80062f4:	4770      	bx	lr
 80062f6:	f803 1b01 	strb.w	r1, [r3], #1
 80062fa:	e7f9      	b.n	80062f0 <memset+0x4>

080062fc <__libc_init_array>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	4d0d      	ldr	r5, [pc, #52]	@ (8006334 <__libc_init_array+0x38>)
 8006300:	4c0d      	ldr	r4, [pc, #52]	@ (8006338 <__libc_init_array+0x3c>)
 8006302:	1b64      	subs	r4, r4, r5
 8006304:	10a4      	asrs	r4, r4, #2
 8006306:	2600      	movs	r6, #0
 8006308:	42a6      	cmp	r6, r4
 800630a:	d109      	bne.n	8006320 <__libc_init_array+0x24>
 800630c:	4d0b      	ldr	r5, [pc, #44]	@ (800633c <__libc_init_array+0x40>)
 800630e:	4c0c      	ldr	r4, [pc, #48]	@ (8006340 <__libc_init_array+0x44>)
 8006310:	f000 f826 	bl	8006360 <_init>
 8006314:	1b64      	subs	r4, r4, r5
 8006316:	10a4      	asrs	r4, r4, #2
 8006318:	2600      	movs	r6, #0
 800631a:	42a6      	cmp	r6, r4
 800631c:	d105      	bne.n	800632a <__libc_init_array+0x2e>
 800631e:	bd70      	pop	{r4, r5, r6, pc}
 8006320:	f855 3b04 	ldr.w	r3, [r5], #4
 8006324:	4798      	blx	r3
 8006326:	3601      	adds	r6, #1
 8006328:	e7ee      	b.n	8006308 <__libc_init_array+0xc>
 800632a:	f855 3b04 	ldr.w	r3, [r5], #4
 800632e:	4798      	blx	r3
 8006330:	3601      	adds	r6, #1
 8006332:	e7f2      	b.n	800631a <__libc_init_array+0x1e>
 8006334:	08006408 	.word	0x08006408
 8006338:	08006408 	.word	0x08006408
 800633c:	08006408 	.word	0x08006408
 8006340:	0800640c 	.word	0x0800640c

08006344 <memcpy>:
 8006344:	440a      	add	r2, r1
 8006346:	4291      	cmp	r1, r2
 8006348:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800634c:	d100      	bne.n	8006350 <memcpy+0xc>
 800634e:	4770      	bx	lr
 8006350:	b510      	push	{r4, lr}
 8006352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800635a:	4291      	cmp	r1, r2
 800635c:	d1f9      	bne.n	8006352 <memcpy+0xe>
 800635e:	bd10      	pop	{r4, pc}

08006360 <_init>:
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006362:	bf00      	nop
 8006364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006366:	bc08      	pop	{r3}
 8006368:	469e      	mov	lr, r3
 800636a:	4770      	bx	lr

0800636c <_fini>:
 800636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636e:	bf00      	nop
 8006370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006372:	bc08      	pop	{r3}
 8006374:	469e      	mov	lr, r3
 8006376:	4770      	bx	lr
